#region LGPL Header
// Copyright (C) 2009, Jackie Ng
// http://code.google.com/p/fdotoolbox, jumpinjackie@gmail.com
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
// 
//
// See license.txt for more/additional licensing information
#endregion
using System;
using System.Collections.Generic;
using System.Text;
using NUnit.Framework;
using OSGeo.FDO.Connections;
using Rhino.Mocks;
using FdoToolbox.Core.Feature;
using OSGeo.FDO.Schema;
using OSGeo.FDO.Common;
using OSGeo.FDO.Expression;
using System.Collections.ObjectModel;
using OSGeo.FDO.Connections.Capabilities;
using System.IO;
using FdoToolbox.Core.Utility;

namespace FdoToolbox.Core.Tests
{
    // Most of the FdoFeatureService methods wrapper existing FDO APIs
    //
    // This test fixture only concerns methods/functionality of FdoFeatureService
    // that are unique to this class, namely:
    //
    // - Schema alteration
    // - Schema validity checking
    // - Schema cloning
    // - Class cloning
    // - Property cloning

    [TestFixture]
    public class FeatureServiceTests
    {
        [Test]
        public void TestUnopenedConnection()
        {
            MockRepository mocks = new MockRepository();
            IConnection conn = mocks.StrictMock<IConnection>();
            Expect.Call(conn.ConnectionState).Return(ConnectionState.ConnectionState_Closed);
            mocks.ReplayAll();

            Assert.Throws<FeatureServiceException>(() => new FdoFeatureService(conn));
        }

        [Test]
        public void TestSchemaClone()
        {
            FeatureSchemaCollection schemas = new FeatureSchemaCollection(null);
            schemas.ReadXml(Path.Combine(TestHelper.CurrentPath, "Test.xml"));

            FeatureSchema cloned = FdoSchemaUtil.CloneSchema(schemas[0]);
            AssertHelper.EqualSchemas(schemas[0], cloned);
        }

        [Test]
        public void TestCloneFeatureClassNoGeometry()
        {
            FeatureClass fc = new FeatureClass("Test", "Test Feature Class");
            DataPropertyDefinition id = new DataPropertyDefinition("ID", "");
            DataPropertyDefinition name = new DataPropertyDefinition("Name", "");
            id.DataType = DataType.DataType_Int32;
            id.IsAutoGenerated = true;
            id.ReadOnly = true;
            id.Nullable = false;

            name.DataType = DataType.DataType_String;
            name.Length = 255;
            name.Nullable = true;

            fc.Properties.Add(id);
            fc.Properties.Add(name);
            fc.IdentityProperties.Add(id);

            ClassDefinition cd = FdoSchemaUtil.CloneClass(fc);
            Assert.IsNotNull(cd);
            Assert.AreEqual(cd.Name, fc.Name);
            Assert.AreEqual(cd.Description, fc.Description);
            Assert.AreEqual(cd.Properties.Count, fc.Properties.Count);
            Assert.AreEqual(cd.IdentityProperties.Count, fc.IdentityProperties.Count);
        }

        [Test]
        public void TestCloneClass()
        {
            ClassDefinition c1 = new FeatureClass("Test", "Test Feature Class");
            DataPropertyDefinition id = new DataPropertyDefinition("ID", "");
            DataPropertyDefinition name = new DataPropertyDefinition("Name", "");
            id.DataType = DataType.DataType_Int32;
            id.IsAutoGenerated = true;
            id.ReadOnly = true;
            id.Nullable = false;

            name.DataType = DataType.DataType_String;
            name.Length = 255;
            name.Nullable = true;

            GeometricPropertyDefinition geom = new GeometricPropertyDefinition("Geometry", "");
            geom.GeometryTypes = (int)GeometryType.GeometryType_Polygon;
            geom.ReadOnly = false;

            c1.Properties.Add(id);
            c1.Properties.Add(name);
            c1.Properties.Add(geom);
            c1.IdentityProperties.Add(id);

            ((FeatureClass)c1).GeometryProperty = geom;

            ClassDefinition cd = FdoSchemaUtil.CloneClass(c1);
            Assert.IsNotNull(cd);
            FeatureClass fc = cd as FeatureClass;
            Assert.IsNotNull(fc);
            Assert.AreEqual(cd.Name, c1.Name);
            Assert.AreEqual(cd.ClassType, c1.ClassType);
            Assert.IsNotNull(fc.GeometryProperty);
            Assert.IsNotNull(((FeatureClass)c1).GeometryProperty);
            Assert.AreEqual(fc.GeometryProperty.Name, ((FeatureClass)c1).GeometryProperty.Name);
            Assert.AreEqual(cd.Description, c1.Description);
            Assert.AreEqual(cd.Properties.Count, c1.Properties.Count);
            Assert.AreEqual(cd.IdentityProperties.Count, c1.IdentityProperties.Count);

            c1.Dispose();
            c1 = new Class("TestClass", "Test Class");
            id = new DataPropertyDefinition("ID", "");
            name = new DataPropertyDefinition("Name", "");

            id.DataType = DataType.DataType_Int32;
            id.IsAutoGenerated = true;
            id.ReadOnly = true;
            id.Nullable = false;

            name.DataType = DataType.DataType_String;
            name.Length = 255;
            name.Nullable = true;

            cd = FdoSchemaUtil.CloneClass(c1);
            Assert.IsNotNull(cd);
            Assert.AreEqual(cd.Name, c1.Name);
            Assert.AreEqual(cd.Description, c1.Description);
            Assert.AreEqual(cd.Properties.Count, c1.Properties.Count);
            Assert.AreEqual(cd.IdentityProperties.Count, c1.IdentityProperties.Count);
        }

        [Test]
        public void TestCloneProperty()
        {
            DataPropertyDefinition dp = new DataPropertyDefinition("Foo", "Bar");
            dp.DataType = DataType.DataType_String;
            dp.DefaultValue = "Whatever";
            dp.IsAutoGenerated = false;
            dp.Length = 45;
            dp.Nullable = true;
            dp.ReadOnly = false;
            PropertyValueConstraintList list = new PropertyValueConstraintList();
            list.ConstraintList.Add(new StringValue("A"));
            list.ConstraintList.Add(new StringValue("B"));
            list.ConstraintList.Add(new StringValue("C"));
            dp.ValueConstraint = list;

            DataPropertyDefinition dp2 = FdoSchemaUtil.CloneProperty(dp) as DataPropertyDefinition;
            AssertHelper.EqualProperty(dp, dp2);

            GeometricPropertyDefinition gp = new GeometricPropertyDefinition("Sna", "Fu");
            gp.GeometryTypes = (int)(GeometryType.GeometryType_LineString | GeometryType.GeometryType_MultiLineString | GeometryType.GeometryType_Polygon);
            gp.HasElevation = true;
            gp.HasMeasure = false;
            gp.ReadOnly = false;
            gp.SpatialContextAssociation = "LL84";

            GeometricPropertyDefinition gp2 = FdoSchemaUtil.CloneProperty(gp) as GeometricPropertyDefinition;
            AssertHelper.EqualProperty(gp, gp2);
        }

        [Test]
        public void TestSchemaCanBeApplied()
        {
            FeatureSchema schema = new FeatureSchema("Default", "");
            FeatureClass fc = new FeatureClass("Class1", "");

            DataPropertyDefinition id = new DataPropertyDefinition("ID", "");
            id.DataType = DataType.DataType_Int32;
            id.IsAutoGenerated = true;

            fc.Properties.Add(id);
            fc.IdentityProperties.Add(id);

            GeometricPropertyDefinition geom = new GeometricPropertyDefinition("Geometry", "");
            geom.GeometryTypes = (int)GeometryType.GeometryType_Point;

            fc.Properties.Add(geom);
            schema.Classes.Add(fc);

            /*
            IConnection conn = FeatureAccessManager.GetConnectionManager().CreateConnection("OSGeo.SHP");
            conn.ConnectionString = "DefaultFileLocation=" + AppGateway.RunningApplication.AppPath;
            using (conn)
            {
                conn.Open();
                using (FeatureService service = new FeatureService(conn))
                {
                    IncompatibleSchema incSchema = null;
                    bool result = service.CanApplySchema(schema, out incSchema);
                    Assert.IsNull(incSchema);
                    Assert.IsTrue(result);
                }
                conn.Close();
            }*/
        }

        [Test]
        public void TestSchemaCannotBeApplied()
        {
            FeatureSchema schema = new FeatureSchema("Default", "");
            FeatureClass fc = new FeatureClass("Class1", "");

            DataPropertyDefinition id = new DataPropertyDefinition("ID", "");
            id.DataType = DataType.DataType_Int32;
            id.IsAutoGenerated = true;

            fc.Properties.Add(id);
            fc.IdentityProperties.Add(id);

            //Unsupported property in SHP
            DataPropertyDefinition d1 = new DataPropertyDefinition("Unsupported", "");
            d1.DataType = DataType.DataType_Int64;
            d1.Nullable = true;

            fc.Properties.Add(d1);

            GeometricPropertyDefinition geom = new GeometricPropertyDefinition("Geometry", "");
            geom.GeometryTypes = (int)GeometryType.GeometryType_Point;

            fc.Properties.Add(geom);
            schema.Classes.Add(fc);

            /*
            IConnection conn = FeatureAccessManager.GetConnectionManager().CreateConnection("OSGeo.SHP");
            conn.ConnectionString = "DefaultFileLocation=" + AppGateway.RunningApplication.AppPath;
            using (conn)
            {
                conn.Open();
                using (FeatureService service = new FeatureService(conn))
                {
                    IncompatibleSchema incSchema = null;
                    bool result = service.CanApplySchema(schema, out incSchema);
                    Assert.IsNotNull(incSchema);
                    Assert.IsFalse(result);

                    foreach (IncompatibleClass incClass in incSchema.Classes)
                    {
                        foreach (IncompatibleProperty incProp in incClass.Properties)
                        {
                            Assert.AreEqual(incProp.Reasons.Count, incProp.ReasonCodes.Count);
                        }
                    }
                }
                conn.Close();
            }*/
        }

        [Test]
        public void TestBoolPromotion()
        {
            DataType[] dtypes = new DataType[] { DataType.DataType_String };
            //bool -> string
            DataType dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Boolean, dtypes);
            Assert.AreEqual(DataType.DataType_String, dt);

            dtypes = new DataType[] { DataType.DataType_String, DataType.DataType_Int64 };
            //bool -> int64
            dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Boolean, dtypes);
            Assert.AreEqual(DataType.DataType_Int64, dt);

            dtypes = new DataType[] { DataType.DataType_String, DataType.DataType_Int64, DataType.DataType_Int32 };
            //bool -> int32
            dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Boolean, dtypes);
            Assert.AreEqual(DataType.DataType_Int32, dt);

            dtypes = new DataType[] { DataType.DataType_String, DataType.DataType_Int64, DataType.DataType_Int32, DataType.DataType_Int16 };
            //bool -> int16
            dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Boolean, dtypes);
            Assert.AreEqual(DataType.DataType_Int16, dt);

            dtypes = (DataType[])Enum.GetValues(typeof(DataType));
            //bool -> byte
            dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Boolean, dtypes);
            Assert.AreEqual(DataType.DataType_Byte, dt);

            //No suitable data type
            dtypes = new DataType[] { DataType.DataType_CLOB, DataType.DataType_BLOB };
            try
            {
                dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Boolean, dtypes);
                Assert.Fail("Should have failed to find suitable data type");
            }
            catch (FeatureServiceException)
            { }
        }

        [Test]
        public void TestBytePromotion()
        {
            DataType[] dtypes = new DataType[] { DataType.DataType_String };

            //byte -> string
            DataType dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Byte, dtypes);
            Assert.AreEqual(DataType.DataType_String, dt);

            dtypes = new DataType[] { DataType.DataType_String, DataType.DataType_Int64 };
            //byte -> int64
            dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Byte, dtypes);
            Assert.AreEqual(DataType.DataType_Int64, dt);

            dtypes = new DataType[] { DataType.DataType_String, DataType.DataType_Int64, DataType.DataType_Int32 };
            //byte -> int32
            dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Byte, dtypes);
            Assert.AreEqual(DataType.DataType_Int32, dt);

            dtypes = new DataType[] { DataType.DataType_String, DataType.DataType_Int64, DataType.DataType_Int32, DataType.DataType_Int16 };
            //byte -> int16
            dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Byte, dtypes);
            Assert.AreEqual(DataType.DataType_Int16, dt);

            //No suitable data type
            dtypes = new DataType[] { DataType.DataType_CLOB, DataType.DataType_BLOB };
            try
            {
                dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Byte, dtypes);
                Assert.Fail("Should have failed to find suitable data type");
            }
            catch (FeatureServiceException)
            { }
        }

        [Test]
        public void TestDateTimePromotion()
        {
            DataType[] dtypes = (DataType[])Enum.GetValues(typeof(DataType));
            DataType dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_DateTime, dtypes);

            Assert.AreEqual(DataType.DataType_String, dt);

            //No suitable data type
            dtypes = new DataType[] { DataType.DataType_CLOB, DataType.DataType_BLOB };
            try
            {
                dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_DateTime, dtypes);
                Assert.Fail("Should have failed to find suitable data type");
            }
            catch (FeatureServiceException)
            { }
        }

        [Test]
        public void TestDecimalPromotion()
        {
            DataType[] dtypes = new DataType[] { DataType.DataType_String };
            //decimal -> string
            DataType dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Decimal, dtypes);
            Assert.AreEqual(DataType.DataType_String, dt);

            dtypes = (DataType[])Enum.GetValues(typeof(DataType));
            //decimal -> double
            dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Decimal, dtypes);
            Assert.AreEqual(DataType.DataType_Double, dt);

            //No suitable data type
            dtypes = new DataType[] { DataType.DataType_CLOB, DataType.DataType_BLOB };
            try
            {
                dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Decimal, dtypes);
                Assert.Fail("Should have failed to find suitable data type");
            }
            catch (FeatureServiceException)
            { }
        }

        [Test]
        public void TestInt16Promotion()
        {
            DataType[] dtypes = new DataType[] { DataType.DataType_String };
            //int16 -> string
            DataType dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Int16, dtypes);
            Assert.AreEqual(DataType.DataType_String, dt);

            dtypes = new DataType[] { DataType.DataType_String, DataType.DataType_Int64 };
            //int16 -> int64
            dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Int16, dtypes);
            Assert.AreEqual(DataType.DataType_Int64, dt);

            dtypes = (DataType[])Enum.GetValues(typeof(DataType));
            //int16 -> int32
            dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Int16, dtypes);
            Assert.AreEqual(DataType.DataType_Int32, dt);

            //No suitable data type
            dtypes = new DataType[] { DataType.DataType_CLOB, DataType.DataType_BLOB };
            try
            {
                dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Int16, dtypes);
                Assert.Fail("Should have failed to find suitable data type");
            }
            catch (FeatureServiceException)
            { }
        }

        [Test]
        public void TestInt32Promotion()
        {
            DataType[] dtypes = new DataType[] { DataType.DataType_String };
            //int32 -> string
            DataType dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Int32, dtypes);
            Assert.AreEqual(DataType.DataType_String, dt);

            dtypes = (DataType[])Enum.GetValues(typeof(DataType));
            //int32 -> int64
            dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Int32, dtypes);
            Assert.AreEqual(DataType.DataType_Int64, dt);

            //No suitable data type
            dtypes = new DataType[] { DataType.DataType_CLOB, DataType.DataType_BLOB };
            try
            {
                dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Int32, dtypes);
                Assert.Fail("Should have failed to find suitable data type");
            }
            catch (FeatureServiceException)
            { }
        }

        [Test]
        public void TestInt64Promotion()
        {
            DataType[] dtypes = (DataType[])Enum.GetValues(typeof(DataType));
            //int32 -> string
            DataType dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Int64, dtypes);
            Assert.AreEqual(DataType.DataType_String, dt);

            //No suitable data type
            dtypes = new DataType[] { DataType.DataType_CLOB, DataType.DataType_BLOB };
            try
            {
                dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Int64, dtypes);
                Assert.Fail("Should have failed to find suitable data type");
            }
            catch (FeatureServiceException)
            { }
        }

        [Test]
        public void TestSinglePromotion()
        {
            DataType[] dtypes = new DataType[] { DataType.DataType_String };
            //decimal -> string
            DataType dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Single, dtypes);
            Assert.AreEqual(DataType.DataType_String, dt);

            dtypes = (DataType[])Enum.GetValues(typeof(DataType));
            //decimal -> double
            dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Single, dtypes);
            Assert.AreEqual(DataType.DataType_Double, dt);

            //No suitable data type
            dtypes = new DataType[] { DataType.DataType_CLOB, DataType.DataType_BLOB };
            try
            {
                dt = FdoFeatureService.GetPromotedDataType(DataType.DataType_Single, dtypes);
                Assert.Fail("Should have failed to find suitable data type");
            }
            catch (FeatureServiceException)
            { }
        }

        [Test]
        public void TestFailedDataTypePromotion()
        {
            DataType[] dtypes = (DataType[])Enum.GetValues(typeof(DataType));

            try
            {
                FdoFeatureService.GetPromotedDataType(DataType.DataType_BLOB, dtypes);
                Assert.Fail("BLOB is not convertible");
            }
            catch (FeatureServiceException)
            { }

            try
            {
                FdoFeatureService.GetPromotedDataType(DataType.DataType_CLOB, dtypes);
                Assert.Fail("CLOB is not convertible");
            }
            catch (FeatureServiceException)
            { }

            try
            {
                FdoFeatureService.GetPromotedDataType(DataType.DataType_Double, dtypes);
                Assert.Fail("double is not convertible");
            }
            catch (FeatureServiceException)
            { }

            try
            {
                FdoFeatureService.GetPromotedDataType(DataType.DataType_String, dtypes);
                Assert.Fail("string is not convertible");
            }
            catch (FeatureServiceException)
            { }
        }

        [Test]
        public void TestAlterSchemaPassAutoId()
        {
            MockRepository mocks = new MockRepository();
            IConnection conn = mocks.DynamicMock<IConnection>();
            ISchemaCapabilities caps = mocks.DynamicMock<ISchemaCapabilities>();

            using (mocks.Record())
            {
                SetupResult.For(conn.ConnectionState).Return(ConnectionState.ConnectionState_Open);
                SetupResult.For(conn.SchemaCapabilities).Return(caps);
                SetupResult.For(caps.ClassTypes).Return((ClassType[])Enum.GetValues(typeof(ClassType)));
                SetupResult.For(caps.DataTypes).Return((DataType[])Enum.GetValues(typeof(DataType)));
                SetupResult.For(caps.MaximumDecimalPrecision).Return(20);
                SetupResult.For(caps.MaximumDecimalScale).Return(20);
                SetupResult.For(caps.ReservedCharactersForName).Return(string.Empty);
                //--
                SetupResult.For(caps.SupportedAutoGeneratedTypes).Return(new DataType[] { DataType.DataType_Int64 });
                //--
                SetupResult.For(caps.SupportedIdentityPropertyTypes).Return(new DataType[] { DataType.DataType_Int32, DataType.DataType_Int64 });
                SetupResult.For(caps.SupportsAssociationProperties).Return(false);
                SetupResult.For(caps.SupportsAutoIdGeneration).Return(true);
                SetupResult.For(caps.SupportsCompositeId).Return(false);
                SetupResult.For(caps.SupportsCompositeUniqueValueConstraints).Return(false);
                SetupResult.For(caps.SupportsDataStoreScopeUniqueIdGeneration).Return(false);
                SetupResult.For(caps.SupportsDefaultValue).Return(true);
                SetupResult.For(caps.SupportsExclusiveValueRangeConstraints).Return(false);
                SetupResult.For(caps.SupportsInclusiveValueRangeConstraints).Return(false);
                SetupResult.For(caps.SupportsMultipleSchemas).Return(false);
                SetupResult.For(caps.SupportsNetworkModel).Return(false);
                SetupResult.For(caps.SupportsNullValueConstraints).Return(true);
                SetupResult.For(caps.SupportsObjectProperties).Return(false);
                SetupResult.For(caps.SupportsSchemaModification).Return(true);
                SetupResult.For(caps.SupportsSchemaOverrides).Return(false);
                SetupResult.For(caps.SupportsUniqueValueConstraints).Return(false);
                SetupResult.For(caps.SupportsValueConstraintsList).Return(false);

                SetupResult.For(caps.SupportsInheritance).Return(false);
            }

            FdoFeatureService service = mocks.StrictMock<FdoFeatureService>(conn);
            mocks.ReplayAll();
            FeatureSchema schema = new FeatureSchema("Default", "");
            
            ClassDefinition cls = new Class("Test", "");

            //ID
            DataPropertyDefinition id = new DataPropertyDefinition("ID", "");
            id.DataType = DataType.DataType_Int32;
            id.IsAutoGenerated = true; //Should be converted to int64
            id.ReadOnly = true;
            id.Nullable = false;

            cls.Properties.Add(id);
            cls.IdentityProperties.Add(id);

            //Name
            DataPropertyDefinition name = new DataPropertyDefinition("Name", "");
            name.DataType = DataType.DataType_String;
            name.Nullable = true;
            name.Length = 100;

            cls.Properties.Add(name);

            schema.Classes.Add(cls);

            IncompatibleSchema incSchema = null;
            bool canApply = service.CanApplySchema(schema, out incSchema);
            Assert.IsFalse(canApply);
            Assert.IsNotNull(incSchema);

            FeatureSchema newSchema = service.AlterSchema(schema, incSchema);

            ClassDefinition newClass = newSchema.Classes[0];
            //Should be converted to int64
            Assert.AreEqual(DataType.DataType_Int64, newClass.IdentityProperties[0].DataType);
        }

        [Test]
        public void TestAlterSchemaPassValueConstraints()
        {
            MockRepository mocks = new MockRepository();
            IConnection conn = mocks.DynamicMock<IConnection>();
            ISchemaCapabilities caps = mocks.DynamicMock<ISchemaCapabilities>();

            using (mocks.Record())
            {
                SetupResult.For(conn.ConnectionState).Return(ConnectionState.ConnectionState_Open);
                SetupResult.For(conn.SchemaCapabilities).Return(caps);
                SetupResult.For(caps.ClassTypes).Return((ClassType[])Enum.GetValues(typeof(ClassType)));
                SetupResult.For(caps.DataTypes).Return((DataType[])Enum.GetValues(typeof(DataType)));
                SetupResult.For(caps.MaximumDecimalPrecision).Return(20);
                SetupResult.For(caps.MaximumDecimalScale).Return(20);
                SetupResult.For(caps.ReservedCharactersForName).Return(string.Empty);
                SetupResult.For(caps.SupportedAutoGeneratedTypes).Return(new DataType[] { DataType.DataType_Int64 });
                SetupResult.For(caps.SupportedIdentityPropertyTypes).Return(new DataType[] { DataType.DataType_Int32, DataType.DataType_Int64 });
                SetupResult.For(caps.SupportsAssociationProperties).Return(false);
                SetupResult.For(caps.SupportsAutoIdGeneration).Return(true);
                SetupResult.For(caps.SupportsCompositeId).Return(false);
                SetupResult.For(caps.SupportsCompositeUniqueValueConstraints).Return(false);
                SetupResult.For(caps.SupportsDataStoreScopeUniqueIdGeneration).Return(false);
                SetupResult.For(caps.SupportsDefaultValue).Return(true);
                //--
                SetupResult.For(caps.SupportsExclusiveValueRangeConstraints).Return(false);
                SetupResult.For(caps.SupportsInclusiveValueRangeConstraints).Return(false);
                //--
                SetupResult.For(caps.SupportsMultipleSchemas).Return(false);
                SetupResult.For(caps.SupportsNetworkModel).Return(false);
                SetupResult.For(caps.SupportsNullValueConstraints).Return(true);
                SetupResult.For(caps.SupportsObjectProperties).Return(false);
                SetupResult.For(caps.SupportsSchemaModification).Return(true);
                SetupResult.For(caps.SupportsSchemaOverrides).Return(false);
                SetupResult.For(caps.SupportsUniqueValueConstraints).Return(false);
                //--
                SetupResult.For(caps.SupportsValueConstraintsList).Return(false);
                //--
                SetupResult.For(caps.SupportsInheritance).Return(false);
            }
            FdoFeatureService service = mocks.StrictMock<FdoFeatureService>(conn);
            mocks.ReplayAll();

            FeatureSchema schema = new FeatureSchema("Default", "");

            ClassDefinition cls = new Class("Test", "");

            //ID
            DataPropertyDefinition id = new DataPropertyDefinition("ID", "");
            id.DataType = DataType.DataType_Int64;
            id.IsAutoGenerated = true; //Should be converted to int64
            id.ReadOnly = true;
            id.Nullable = false;

            cls.Properties.Add(id);
            cls.IdentityProperties.Add(id);

            //Age
            DataPropertyDefinition age = new DataPropertyDefinition("Age", "");
            PropertyValueConstraintRange range = new PropertyValueConstraintRange();
            range.MinValue = new Int32Value(0);
            range.MinInclusive = true;
            range.MaxValue = new Int32Value(100);
            range.MaxInclusive = true;
            age.ValueConstraint = range;
            age.DataType = DataType.DataType_Int32;
            age.Nullable = true;

            cls.Properties.Add(age);

            //Gender
            DataPropertyDefinition gender = new DataPropertyDefinition("Gender", "");
            PropertyValueConstraintList list = new PropertyValueConstraintList();
            list.ConstraintList.Add(new StringValue("M"));
            list.ConstraintList.Add(new StringValue("F"));
            gender.ValueConstraint = list;
            age.DataType = DataType.DataType_String;
            age.Nullable = false;
            age.Length = 1;

            cls.Properties.Add(gender);

            schema.Classes.Add(cls);

            IncompatibleSchema incSchema = null;
            bool canApply = service.CanApplySchema(schema, out incSchema);
            Assert.IsFalse(canApply);
            Assert.IsNotNull(incSchema);

            FeatureSchema newSchema = service.AlterSchema(schema, incSchema);

            ClassDefinition newClass = newSchema.Classes[0];

            DataPropertyDefinition age2 = newClass.Properties[newClass.Properties.IndexOf("Age")] as DataPropertyDefinition;

            //Should have constraint removed
            Assert.IsNull(age2.ValueConstraint);

            DataPropertyDefinition gender2 = newClass.Properties[newClass.Properties.IndexOf("Gender")] as DataPropertyDefinition;
            //Should have constraint removed
            Assert.IsNull(gender2.ValueConstraint);
        }

        [Test]
        public void TestAlterSchemaPassCompositeId()
        {
            //Test composite id not supported
            MockRepository mocks = new MockRepository();
            
            IConnection conn = mocks.DynamicMock<IConnection>();
            ISchemaCapabilities caps = mocks.DynamicMock<ISchemaCapabilities>();

            using (mocks.Record())
            {
                SetupResult.For(conn.ConnectionState).Return(ConnectionState.ConnectionState_Open);
                SetupResult.For(conn.SchemaCapabilities).Return(caps);
                SetupResult.For(caps.ClassTypes).Return((ClassType[])Enum.GetValues(typeof(ClassType)));
                SetupResult.For(caps.DataTypes).Return((DataType[])Enum.GetValues(typeof(DataType)));
                SetupResult.For(caps.MaximumDecimalPrecision).Return(20);
                SetupResult.For(caps.MaximumDecimalScale).Return(20);
                SetupResult.For(caps.ReservedCharactersForName).Return(string.Empty);
                SetupResult.For(caps.SupportedAutoGeneratedTypes).Return(new DataType[] { DataType.DataType_Int64 });
                SetupResult.For(caps.SupportedIdentityPropertyTypes).Return(new DataType[] { DataType.DataType_Int32, DataType.DataType_Int64 });
                SetupResult.For(caps.SupportsAssociationProperties).Return(false);
                SetupResult.For(caps.SupportsAutoIdGeneration).Return(true);
                //--
                SetupResult.For(caps.SupportsCompositeId).Return(false);
                //--
                SetupResult.For(caps.SupportsCompositeUniqueValueConstraints).Return(false);
                SetupResult.For(caps.SupportsDataStoreScopeUniqueIdGeneration).Return(false);
                SetupResult.For(caps.SupportsDefaultValue).Return(true);
                SetupResult.For(caps.SupportsExclusiveValueRangeConstraints).Return(false);
                SetupResult.For(caps.SupportsInclusiveValueRangeConstraints).Return(false);
                SetupResult.For(caps.SupportsMultipleSchemas).Return(false);
                SetupResult.For(caps.SupportsNetworkModel).Return(false);
                SetupResult.For(caps.SupportsNullValueConstraints).Return(true);
                SetupResult.For(caps.SupportsObjectProperties).Return(false);
                SetupResult.For(caps.SupportsSchemaModification).Return(true);
                SetupResult.For(caps.SupportsSchemaOverrides).Return(false);
                SetupResult.For(caps.SupportsUniqueValueConstraints).Return(false);
                SetupResult.For(caps.SupportsValueConstraintsList).Return(false);

                SetupResult.For(caps.SupportsInheritance).Return(false);
            }
            FdoFeatureService service = mocks.StrictMock<FdoFeatureService>(conn);
            mocks.ReplayAll();

            FeatureSchema schema = new FeatureSchema("Default", "");

            ClassDefinition cls = new Class("Test", "");

            //ID
            DataPropertyDefinition id = new DataPropertyDefinition("ID", "");
            id.DataType = DataType.DataType_Int32;
            id.IsAutoGenerated = true; //Should be converted to int64
            id.ReadOnly = true;
            id.Nullable = false;

            cls.Properties.Add(id);
            cls.IdentityProperties.Add(id);

            //ID2
            DataPropertyDefinition id2 = new DataPropertyDefinition("ID2", "");
            id2.DataType = DataType.DataType_Int32;
            id2.IsAutoGenerated = true; //Should be converted to int64
            id2.ReadOnly = true;
            id2.Nullable = false;

            cls.Properties.Add(id2);
            cls.IdentityProperties.Add(id2);

            //Name
            DataPropertyDefinition name = new DataPropertyDefinition("Name", "");
            name.DataType = DataType.DataType_String;
            name.Nullable = true;
            name.Length = 100;

            cls.Properties.Add(name);

            schema.Classes.Add(cls);

            IncompatibleSchema incSchema = null;
            bool canApply = service.CanApplySchema(schema, out incSchema);
            Assert.IsFalse(canApply);
            Assert.IsNotNull(incSchema);

            FeatureSchema newSchema = service.AlterSchema(schema, incSchema);

            ClassDefinition newClass = newSchema.Classes[0];

            Assert.AreEqual(1, newClass.IdentityProperties.Count);
            Assert.AreEqual(4, newClass.Properties.Count);

            //ID1 and ID2 should be replaced with an autogenerated property
            Assert.AreEqual(DataType.DataType_Int64, newClass.IdentityProperties[0].DataType);
            Assert.IsTrue(newClass.IdentityProperties[0].IsAutoGenerated);
            Assert.AreNotEqual("ID1", newClass.IdentityProperties[0].Name);
            Assert.AreNotEqual("ID2", newClass.IdentityProperties[0].Name);
        }

        [Test]
        public void TestAlterSchemaPassIdentityType()
        {
            MockRepository mocks = new MockRepository();
            IConnection conn = mocks.DynamicMock<IConnection>();
            ISchemaCapabilities caps = mocks.DynamicMock<ISchemaCapabilities>();

            using (mocks.Record())
            {
                SetupResult.For(conn.ConnectionState).Return(ConnectionState.ConnectionState_Open);
                SetupResult.For(conn.SchemaCapabilities).Return(caps);
                SetupResult.For(caps.ClassTypes).Return((ClassType[])Enum.GetValues(typeof(ClassType)));
                SetupResult.For(caps.DataTypes).Return((DataType[])Enum.GetValues(typeof(DataType)));
                SetupResult.For(caps.MaximumDecimalPrecision).Return(20);
                SetupResult.For(caps.MaximumDecimalScale).Return(20);
                SetupResult.For(caps.ReservedCharactersForName).Return(string.Empty);
                SetupResult.For(caps.SupportedAutoGeneratedTypes).Return(new DataType[] { DataType.DataType_Int64 });
                //--
                SetupResult.For(caps.SupportedIdentityPropertyTypes).Return(new DataType[] { DataType.DataType_Int32, DataType.DataType_Int64, DataType.DataType_String });
                //--
                SetupResult.For(caps.SupportsAssociationProperties).Return(false);
                SetupResult.For(caps.SupportsAutoIdGeneration).Return(true);
                SetupResult.For(caps.SupportsCompositeId).Return(false);
                SetupResult.For(caps.SupportsCompositeUniqueValueConstraints).Return(false);
                SetupResult.For(caps.SupportsDataStoreScopeUniqueIdGeneration).Return(false);
                SetupResult.For(caps.SupportsDefaultValue).Return(true);
                SetupResult.For(caps.SupportsExclusiveValueRangeConstraints).Return(false);
                SetupResult.For(caps.SupportsInclusiveValueRangeConstraints).Return(false);
                SetupResult.For(caps.SupportsMultipleSchemas).Return(false);
                SetupResult.For(caps.SupportsNetworkModel).Return(false);
                SetupResult.For(caps.SupportsNullValueConstraints).Return(true);
                SetupResult.For(caps.SupportsObjectProperties).Return(false);
                SetupResult.For(caps.SupportsSchemaModification).Return(true);
                SetupResult.For(caps.SupportsSchemaOverrides).Return(false);
                SetupResult.For(caps.SupportsUniqueValueConstraints).Return(false);
                SetupResult.For(caps.SupportsValueConstraintsList).Return(false);

                SetupResult.For(caps.SupportsInheritance).Return(false);
            }
            FdoFeatureService service = mocks.StrictMock<FdoFeatureService>(conn);
            mocks.ReplayAll();

            FeatureSchema schema = new FeatureSchema("Default", "");

            ClassDefinition cls = new Class("Test", "");

            //ID - float
            DataPropertyDefinition id = new DataPropertyDefinition("ID", "");
            id.DataType = DataType.DataType_Single;
            id.Nullable = false;

            cls.Properties.Add(id);
            cls.IdentityProperties.Add(id);

            //Name
            DataPropertyDefinition name = new DataPropertyDefinition("Name", "");
            name.DataType = DataType.DataType_String;
            name.Nullable = true;
            name.Length = 100;

            cls.Properties.Add(name);

            schema.Classes.Add(cls);

            IncompatibleSchema incSchema = null;
            bool canApply = service.CanApplySchema(schema, out incSchema);
            Assert.IsFalse(canApply);
            Assert.IsNotNull(incSchema);

            FeatureSchema newSchema = service.AlterSchema(schema, incSchema);

            ClassDefinition newClass = newSchema.Classes[0];

            //Should have been "promoted" to string
            Assert.AreEqual(DataType.DataType_String, newClass.IdentityProperties[0].DataType);
        }

        [Test]
        public void TestAlterSchemaBaseClass()
        {
            MockRepository mocks = new MockRepository();
            FeatureSchema schema = new FeatureSchema("Default", "");
            IConnection conn = mocks.DynamicMock<IConnection>();
            ISchemaCapabilities caps = mocks.DynamicMock<ISchemaCapabilities>();
            
            using (mocks.Record())
            {
                SetupResult.For(conn.ConnectionState).Return(ConnectionState.ConnectionState_Open);
                SetupResult.For(conn.SchemaCapabilities).Return(caps);
                SetupResult.For(caps.ClassTypes).Return((ClassType[])Enum.GetValues(typeof(ClassType)));
                SetupResult.For(caps.DataTypes).Return((DataType[])Enum.GetValues(typeof(DataType)));
                SetupResult.For(caps.MaximumDecimalPrecision).Return(20);
                SetupResult.For(caps.MaximumDecimalScale).Return(20);
                SetupResult.For(caps.ReservedCharactersForName).Return(string.Empty);
                SetupResult.For(caps.SupportedAutoGeneratedTypes).Return(new DataType[] { DataType.DataType_Int32, DataType.DataType_Int64 });
                SetupResult.For(caps.SupportedIdentityPropertyTypes).Return(new DataType[] { DataType.DataType_Int32, DataType.DataType_Int64 });
                SetupResult.For(caps.SupportsAssociationProperties).Return(false);
                SetupResult.For(caps.SupportsAutoIdGeneration).Return(true);
                SetupResult.For(caps.SupportsCompositeId).Return(false);
                SetupResult.For(caps.SupportsCompositeUniqueValueConstraints).Return(false);
                SetupResult.For(caps.SupportsDataStoreScopeUniqueIdGeneration).Return(false);
                SetupResult.For(caps.SupportsDefaultValue).Return(true);
                SetupResult.For(caps.SupportsExclusiveValueRangeConstraints).Return(false);
                SetupResult.For(caps.SupportsInclusiveValueRangeConstraints).Return(false);
                SetupResult.For(caps.SupportsMultipleSchemas).Return(false);
                SetupResult.For(caps.SupportsNetworkModel).Return(false);
                SetupResult.For(caps.SupportsNullValueConstraints).Return(true);
                SetupResult.For(caps.SupportsObjectProperties).Return(false);
                SetupResult.For(caps.SupportsSchemaModification).Return(true);
                SetupResult.For(caps.SupportsSchemaOverrides).Return(false);
                SetupResult.For(caps.SupportsUniqueValueConstraints).Return(false);
                SetupResult.For(caps.SupportsValueConstraintsList).Return(false);

                SetupResult.For(caps.SupportsInheritance).Return(false);
            }
            FdoFeatureService service = mocks.DynamicMock<FdoFeatureService>(conn);
            mocks.ReplayAll();
            
            ClassDefinition baseClass = new Class("Base", "");

            //ID
            DataPropertyDefinition id = new DataPropertyDefinition("ID", "");
            id.DataType = DataType.DataType_Int64;
            id.Nullable = false;

            baseClass.Properties.Add(id);
            baseClass.IdentityProperties.Add(id);

            //Name
            DataPropertyDefinition name = new DataPropertyDefinition("Name", "");
            name.DataType = DataType.DataType_String;
            name.Nullable = true;
            name.Length = 100;

            baseClass.Properties.Add(name);

            ClassDefinition derivedClass = new Class("Derived", "");
            derivedClass.BaseClass = baseClass;

            //DOB
            DataPropertyDefinition dob = new DataPropertyDefinition("DOB", "");
            dob.DataType = DataType.DataType_DateTime;
            dob.Nullable = true;

            derivedClass.Properties.Add(dob);

            schema.Classes.Add(baseClass);
            schema.Classes.Add(derivedClass);

            IncompatibleSchema incSchema = null;
            bool canApply = service.CanApplySchema(schema, out incSchema);
            Assert.IsFalse(canApply);
            Assert.IsNotNull(incSchema);

            FeatureSchema newSchema = service.AlterSchema(schema, incSchema);

            ClassDefinition newClass = newSchema.Classes[newSchema.Classes.IndexOf("Derived")];

            //Base class properties should be copied to derived class
            Assert.AreEqual("BASE_ID", newClass.IdentityProperties[0].Name);
            Assert.AreEqual(3, newClass.Properties.Count);
            Assert.IsTrue(newClass.Properties.IndexOf("BASE_ID") >= 0);
            Assert.IsTrue(newClass.Properties.IndexOf("BASE_Name") >= 0);
        }

        [Test]
        public void TestAlterSchemaNullable()
        {
            MockRepository mocks = new MockRepository();
            FeatureSchema schema = new FeatureSchema("Default", "");
            
            IConnection conn = mocks.DynamicMock<IConnection>();
            ISchemaCapabilities caps = mocks.DynamicMock<ISchemaCapabilities>();

            using (mocks.Record())
            {
                SetupResult.For(conn.ConnectionState).Return(ConnectionState.ConnectionState_Open);
                SetupResult.For(conn.SchemaCapabilities).Return(caps);
                SetupResult.For(caps.ClassTypes).Return((ClassType[])Enum.GetValues(typeof(ClassType)));
                SetupResult.For(caps.DataTypes).Return((DataType[])Enum.GetValues(typeof(DataType)));
                SetupResult.For(caps.MaximumDecimalPrecision).Return(20);
                SetupResult.For(caps.MaximumDecimalScale).Return(20);
                SetupResult.For(caps.ReservedCharactersForName).Return(string.Empty);
                SetupResult.For(caps.SupportedAutoGeneratedTypes).Return(new DataType[] { DataType.DataType_Int32, DataType.DataType_Int64 });
                SetupResult.For(caps.SupportedIdentityPropertyTypes).Return(new DataType[] { DataType.DataType_Int32, DataType.DataType_Int64 });
                SetupResult.For(caps.SupportsAssociationProperties).Return(false);
                SetupResult.For(caps.SupportsAutoIdGeneration).Return(true);
                SetupResult.For(caps.SupportsCompositeId).Return(false);
                SetupResult.For(caps.SupportsCompositeUniqueValueConstraints).Return(false);
                SetupResult.For(caps.SupportsDataStoreScopeUniqueIdGeneration).Return(false);
                SetupResult.For(caps.SupportsDefaultValue).Return(true);
                SetupResult.For(caps.SupportsExclusiveValueRangeConstraints).Return(false);
                SetupResult.For(caps.SupportsInclusiveValueRangeConstraints).Return(false);
                SetupResult.For(caps.SupportsMultipleSchemas).Return(false);
                SetupResult.For(caps.SupportsNetworkModel).Return(false);
                //--
                SetupResult.For(caps.SupportsNullValueConstraints).Return(false);
                //--
                SetupResult.For(caps.SupportsObjectProperties).Return(false);
                SetupResult.For(caps.SupportsSchemaModification).Return(true);
                SetupResult.For(caps.SupportsSchemaOverrides).Return(false);
                SetupResult.For(caps.SupportsUniqueValueConstraints).Return(false);
                SetupResult.For(caps.SupportsValueConstraintsList).Return(false);

                SetupResult.For(caps.SupportsInheritance).Return(false);
            }
            FdoFeatureService service = mocks.StrictMock<FdoFeatureService>(conn);
            mocks.ReplayAll();

            ClassDefinition cls = new Class("Test", "");

            //ID
            DataPropertyDefinition id = new DataPropertyDefinition("ID", "");
            id.DataType = DataType.DataType_Int64;
            id.Nullable = false;

            cls.Properties.Add(id);
            cls.IdentityProperties.Add(id);

            //Name
            DataPropertyDefinition name = new DataPropertyDefinition("Name", "");
            name.DataType = DataType.DataType_String;
            name.Nullable = true;
            name.Length = 100;

            cls.Properties.Add(name);

            schema.Classes.Add(cls);

            IncompatibleSchema incSchema = null;
            bool canApply = service.CanApplySchema(schema, out incSchema);
            Assert.IsFalse(canApply);
            Assert.IsNotNull(incSchema);

            FeatureSchema newSchema = service.AlterSchema(schema, incSchema);

            ClassDefinition newClass = newSchema.Classes[0];

            //Name should not be nullable anymore
            DataPropertyDefinition name2 = newClass.Properties[newClass.Properties.IndexOf("Name")] as DataPropertyDefinition;
            Assert.IsFalse(name2.Nullable);
        }
    }
}
