<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OSGeo.MapGuide.PlatformBase</name>
    </assembly>
    <members>
        <member name="T:OSGeo.MapGuide.MgArrayTypeMismatchException">
            <summary>
             Thrown when an attempt is made to store an element of the wrong type
             within an array.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgArrayTypeMismatchException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgArrayTypeMismatchException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgBlobProperty">
            <summary>
             Stores BLOB (Binary Large Object) data with an associated key
             name.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgBlobProperty.#ctor(System.String,OSGeo.MapGuide.MgByteReader)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgBlobProperty" /> object.
            </summary>
            <param name="name">
             (String/string) The name of the property.
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgByteReader" />) the value of the property.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgBlobProperty.GetValue">
            <summary>
             Gets the property value.
            </summary>
            <returns> Returns the property value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgBlobProperty.GetPropertyType">
            <summary>
             Gets the property type.
            </summary>
            <returns> Returns the property type <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Blob.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgBlobProperty.SetValue(OSGeo.MapGuide.MgByteReader)">
            <summary>
             Sets the property value.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgByteReader" />) The value of the property
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgBooleanProperty">
            <summary>
             Stores boolean data with an associated key name.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgBooleanProperty.#ctor(System.String,System.Boolean)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgBooleanProperty" /> object.
            </summary>
            <param name="name">
             (String/string) The name of the property
            </param>
            <param name="value">
             (boolean/bool) The value of the property
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgBooleanProperty.GetValue">
            <summary>
             Gets the property value.
            </summary>
            <returns> Returns the property value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgBooleanProperty.GetPropertyType">
            <summary>
             Gets the property type.
            </summary>
            <returns> Returns the property type <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Boolean.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgBooleanProperty.SetValue(System.Boolean)">
            <summary>
             Sets the property value.
            </summary>
            <param name="value">
             (boolean/bool) The value of the property
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgByteProperty">
            <summary>
             Stores a single BYTE of data with an associated key name.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgByteProperty.#ctor(System.String,System.Byte)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgByteProperty" /> object.
            </summary>
            <param name="name">
             (String/string) The name of the property.
            </param>
            <param name="value">
             (signed char/unsigned char/string) The value of the property.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgByteProperty.GetValue">
            <summary>
             Gets the property value.
            </summary>
            <returns> Returns the property value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgByteProperty.GetPropertyType">
            <summary>
             Gets the property type.
            </summary>
            <returns> Returns the property type <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Byte.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgByteProperty.SetValue(System.Byte)">
            <summary>
             Sets the property value.
            </summary>
            <param name="value">
             (signed char/unsigned char/string) The value of the property.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgClassDefinition">
            <summary>
             Defines a feature class belonging to a schema.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinition.#ctor">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgClassDefinition" /> object.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinition.GetProperties">
            <summary>
             Gets a collection containing all the property definitions for
             this class including identity property definitions.
            </summary>
            <returns> Returns a collection of the property definitions for this
              class.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinition.GetIdentityProperties">
            <summary>
             Gets a collection containing the set of data property
             definitions that can be used to uniquely identify instances
             of this class.
            </summary>
            <returns> Returns a collection of data property definitions that can
              be used to uniquely identify instances of this class.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinition.GetDefaultGeometryPropertyName">
            <summary>
             Gets the name of the default geometry property in this class.
            </summary>
            <returns> Returns the name of the default geometry property.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinition.SetDefaultGeometryPropertyName(System.String)">
            <summary>
             Sets the name of the default geometry property in this class.
            </summary>
            <param name="name">
             (String/string) The name of the default geometry property.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinition.SetName(System.String)">
            <summary>
             Sets the name of the feature class.
            </summary>
            <param name="name">
             (String/string) The feature class name.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinition.GetName">
            <summary>
             Gets the name of the feature class.
            </summary>
            <returns> Returns the feature class name.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinition.SetDescription(System.String)">
            <summary>
             Sets the feature class description.
            </summary>
            <param name="description">
             (String/string) The feature class description.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinition.GetDescription">
            <summary>
             Gets the feature class description
            </summary>
            <returns> Returns the feature class description.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinition.GetBaseClassDefinition">
            <summary>
             Gets the base class definition.
            </summary>
            <returns> Returns the feature class definition or NULL if no base
              class is defined.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinition.IsComputed">
            <summary>
             Tests whether a class definition is computed.
            </summary>
            <returns> Returns true if the class definition is computed; otherwise
              returns false.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinition.IsAbstract">
            <summary>
             Tests whether a class definition is abstract or not.
            </summary>
            <returns> Returns true if the class definition is abstract; otherwise
              returns false.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinition.Delete">
            <summary>
             Marks the class definition for deletion.
            </summary>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgClassDefinitionCollection">
            <summary>
             ClassDefinitionCollection represents a collection of class definitions in a feature schema.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinitionCollection.#ctor">
            <summary>
             Constructs a <see cref="T:OSGeo.MapGuide.MgClassDefinitionCollection" />.  The collection is initially empty.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinitionCollection.SetItem(System.Int32,OSGeo.MapGuide.MgClassDefinition)">
            <summary>
             Sets the item in the collection at the specified index to the specified value.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgClassDefinition" />) Input value
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the index is out of range.</exception>
            <exception cref="T:OSGeo.MapGuide.MgDuplicateObjectException"> if it is a duplicate.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinitionCollection.Add(OSGeo.MapGuide.MgClassDefinition)">
            <summary>
             Adds the specified item to the end of the collection.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgClassDefinition" />) Input value
            </param>
            <returns> Returns nothing
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgDuplicateObjectException"> if the index is a duplicate.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinitionCollection.Insert(System.Int32,OSGeo.MapGuide.MgClassDefinition)">
            <summary>
             Inserts the specified item at the specified index within the collection.
             Items following the insertion point are moved down to accommodate the new item.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgClassDefinition" />) Input value
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the index is out of range.</exception>
            <exception cref="T:OSGeo.MapGuide.MgDuplicateObjectException"> if it is a duplicate.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinitionCollection.Remove(OSGeo.MapGuide.MgClassDefinition)">
            <summary>
             Removes the specified item from the collection.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgClassDefinition" />) Input value
            </param>
            <returns> Returns true if removal was successful
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinitionCollection.GetItem(System.Int32)">
            <summary>
             Gets the item in the collection at the specified index.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <returns> Returns the item in the collection at the specified index.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinitionCollection.GetCount">
            <summary>
             Gets the number of items in the collection.
            </summary>
            <returns> Returns the number of items in the collection.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinitionCollection.Clear">
            <summary>
             Removes all items from the collection.
            </summary>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinitionCollection.RemoveAt(System.Int32)">
            <summary>
             Removes the specified item from the collection.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinitionCollection.Contains(OSGeo.MapGuide.MgClassDefinition)">
            <summary>
             Returns true if the collection contains the specified item, false otherwise.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgClassDefinition" />) Input value
            </param>
            <returns> Returns true if the collection contains the specified item, false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinitionCollection.IndexOf(OSGeo.MapGuide.MgClassDefinition)">
            <summary>
             Returns the index of the specified item in the collection or -1 if the item does not exist.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgClassDefinition" />) Input value
            </param>
            <returns> Returns the index of the specified item in the collection or -1 if the item does not exist.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgClassDefinitionCollection.ToXml">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Creates an XML document representing the collection.
            </summary>
            <returns> A pointer to an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgClobProperty">
            <summary>
             Stores CLOB (Character Large Object) data with an associated
             key name.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgClobProperty.#ctor(System.String,OSGeo.MapGuide.MgByteReader)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgClobProperty" /> object.
            </summary>
            <param name="name">
             (String/string) The name of the property.
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgByteReader" />) The value of the property.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgClobProperty.GetValue">
            <summary>
             Gets the property value.
            </summary>
            <returns> Returns the property value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgClobProperty.GetPropertyType">
            <summary>
             Gets the property type.
            </summary>
            <returns> Returns the property type <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Clob
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgClobProperty.SetValue(OSGeo.MapGuide.MgByteReader)">
            <summary>
             Sets the property value.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgByteReader" />) The value of the property.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgColor">
            <summary>
             This class stores Alpha, Red, Green and Blue component of a Color.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgColor.#ctor(System.String)">
            <summary>
             Constructor.
            </summary>
            <param name="color">
             (String/string) Color specified as 0xRRGGBBAA RR - Red component GG - Green component BB - Blue Component AA - Alpha component (optional)
            </param>
            <returns> Nothing
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgColor.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
             Constructor.
            </summary>
            <param name="red">
             (short/int) Red value. This value must be in the range of 0 to 255 inclusive.
            </param>
            <param name="green">
             (short/int) Green value. This value must be in the range of 0 to 255 inclusive.
            </param>
            <param name="blue">
             (short/int) Blue value. This value must be in the range of 0 to 255 inclusive.
            </param>
            <returns> Nothing
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgColor.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
             Constructor.
            </summary>
            <param name="red">
             (short/int) Red value. This value must be in the range of 0 to 255 inclusive.
            </param>
            <param name="green">
             (short/int) Green value. This value must be in the range of 0 to 255 inclusive.
            </param>
            <param name="blue">
             (short/int) Blue value. This value must be in the range of 0 to 255 inclusive.
            </param>
            <param name="alpha">
             (short/int) Alpha value
            </param>
            <returns> Nothing
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgColor.GetColor">
            <summary>
             Returns Color specified as 0xRRGGBBAA
             RR - Red component
             GG - Green component
             BB - Blue Component
             AA - Alpha component (optional)
            </summary>
            <returns> return the color value
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgColor.GetRed">
            <summary>
             return the color red value
            </summary>
            <returns> return the red value
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgColor.GetBlue">
            <summary>
             return the color blue value
            </summary>
            <returns> return the blue value
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgColor.GetGreen">
            <summary>
             return the color green value
            </summary>
            <returns> return the green value
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgColor.GetAlpha">
            <summary>
             return the color alpha value
            </summary>
            <returns> return the alpha value
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgDataPropertyDefinition">
            <summary>
             Defines a data property belonging to a feature class.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgDataPropertyDefinition.#ctor(System.String)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgDataPropertyDefinition" /> object.
            </summary>
            <param name="name">
             (String/string) The name of the property.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgDataPropertyDefinition.GetDataType">
            <summary>
             Gets the data type of this property.
            </summary>
            <returns> Returns the data type of this property. See <see cref="T:OSGeo.MapGuide.MgPropertyType" />
              for the different data types.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDataPropertyDefinition.GetLength">
            <summary>
             Gets the length of a String, BLOB, or CLOB data property.
             This value does not apply to any other data type.
            </summary>
            <returns> Returns the length of a String, BLOB, or CLOB data property.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDataPropertyDefinition.GetPrecision">
            <summary>
             Gets the precision (total number of digits) of a decimal data
             property.
            </summary>
            <returns> Returns the precision.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDataPropertyDefinition.GetScale">
            <summary>
             Gets the scale (number of digits to the right of the decimal
             point) of a decimal data property.
            </summary>
            <returns> Returns the scale.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDataPropertyDefinition.IsAutoGenerated">
            <summary>
             Gets a Boolean value that indicates whether this is an
             auto-generated property.
            </summary>
            <returns> Returns true if the property is auto-generated; otherwise
              returns false.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDataPropertyDefinition.GetDefaultValue">
            <summary>
             Gets the default value for this property.
            </summary>
            <returns> Returns the default value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDataPropertyDefinition.GetNullable">
            <summary>
             Gets a Boolean value that indicates whether this property&apos;s
             value can be null.
            </summary>
            <returns> Returns true if the property&apos;s value can be null; otherwise
              returns false.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDataPropertyDefinition.GetReadOnly">
            <summary>
             Gets a Boolean value that indicates whether this property is
             read-only.
            </summary>
            <returns> Returns a Boolean value that indicates whether this property
              is read-only.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDataPropertyDefinition.SetDataType(System.Int32)">
            <summary>
             Sets the data type of this property. See <see cref="T:OSGeo.MapGuide.MgPropertyType" /> for
             the different data types.
            </summary>
            <param name="type">
             (int) The data type of this property.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDataPropertyDefinition.SetReadOnly(System.Boolean)">
            <summary>
             Determines whether this property is read-only
            </summary>
            <param name="value">
             (boolean/bool) True configures the property to be read-only, and false configures it to be user settable.
            </param>
            <returns> Returns nothing
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDataPropertyDefinition.SetLength(System.Int32)">
            <summary>
             Sets the maximum length of a String, BLOB, or CLOB data
             property. This value does not apply to any other data type.
            </summary>
            <param name="len">
             (int) The length of this String, BLOB, or CLOB data property.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDataPropertyDefinition.SetPrecision(System.Int32)">
            <summary>
             Sets the precision (total number of digits) of a decimal data
             property. This value does not apply to any other data type.
            </summary>
            <param name="precision">
             (int) Precision of this decimal property.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgDataPropertyDefinition.SetScale(System.Int32)">
            <summary>
             Sets the scale (number of digits to the right of the decimal
             point) of a decimal data property. This value does not apply
             to any other data type.
            </summary>
            <param name="scale">
             (int) The scale of this decimal property.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgDataPropertyDefinition.SetNullable(System.Boolean)">
            <summary>
             Determines whether this property&apos;s value can be null.
            </summary>
            <param name="value">
             (boolean/bool) True configures the property to be nullable. That is, it is possible to set it to a null value and false configures the property so that it cannot be set to a null value.
            </param>
            <returns> Returns nothing
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDataPropertyDefinition.SetDefaultValue(System.String)">
            <summary>
             Sets the default value for this property.
            </summary>
            <param name="value">
             (String/string) The default value.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDataPropertyDefinition.SetAutoGeneration(System.Boolean)">
            <summary>
             Sets a boolean value that determines whether this is an
             auto-generated property.
            </summary>
            <param name="value">
             (boolean/bool) True configures the property to be auto-generated and read-only and false configures it to be user settable.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgDataReader">
            <summary>
             Provides a forward-only, read-only iterator for reading
             computed data retrieved from a datastore.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgDateTimeProperty">
            <summary>
             Stores <see cref="T:OSGeo.MapGuide.MgDateTime" /> data with an associated key name.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgDateTimeProperty.#ctor(System.String,OSGeo.MapGuide.MgDateTime)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgDateTimeProperty" /> object..
            </summary>
            <param name="name">
             (String/string) The name of the property.
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgDateTime" />) The value of the property.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgDateTimeProperty.GetValue">
            <summary>
             Gets the property value.
            </summary>
            <returns> Returns the property value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDateTimeProperty.GetPropertyType">
            <summary>
             Gets the property type.
            </summary>
            <returns> Returns the property type <see cref="T:OSGeo.MapGuide.MgPropertyType" />::DateTime
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDateTimeProperty.SetValue(OSGeo.MapGuide.MgDateTime)">
            <summary>
             Sets the property value
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgDateTime" />) The value of the property.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgDeleteFeatures">
            <summary>
             A feature command that features from a datastore. The feature
             class name and filter text define feature(s) to delete. This
             class is added to an <see cref="T:OSGeo.MapGuide.MgFeatureCommandCollection" /> object, which
             is then passed in a call to the
             <see cref="T:OSGeo.MapGuide.MgFeatureService" />::UpdateFeatures method.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgDeleteFeatures.#ctor(System.String,System.String)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgDeleteFeatures" /> object.
            </summary>
            <param name="className">
             (String/string) The name of the class from which the data is to be deleted.
            </param>
            <param name="filterText">
             (String/string) The filter used to select features for deletion.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDeleteFeatures.GetCommandType">
            <summary>
             Gets the type of the command, that is,
             <see cref="T:OSGeo.MapGuide.MgFeatureCommandType" />::DeleteFeatures.
            </summary>
            <returns> Returns <see cref="T:OSGeo.MapGuide.MgFeatureCommandType" />::DeleteFeatures.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDeleteFeatures.GetFeatureClassName">
            <summary>
             Gets the feature class name of the feature objects to be deleted.
            </summary>
            <returns> Returns the feature class name of the feature objects to be deleted
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDeleteFeatures.GetFilterText">
            <summary>
             Gets the filter used to select the features to be deleted
             from the datastore.
            </summary>
            <returns> Returns the filter used to select the features to be deleted
              from the datastore.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgDoubleProperty">
            <summary>
             Stores double precision floating point data with an
             associated key name. An instance of this class can be stored
             in an <see cref="T:OSGeo.MapGuide.MgPropertyCollection" /> object. The key name can be used
             to retrieve the instance from the property collection.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgDoubleProperty.#ctor(System.String,System.Double)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgDoubleProperty" /> object.
            </summary>
            <param name="name">
             (String/string) The name of the property.
            </param>
            <param name="value">
             (double) The value of the property.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgDoubleProperty.GetValue">
            <summary>
             Gets the property value.
            </summary>
            <returns> Returns the property value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDoubleProperty.GetPropertyType">
            <summary>
             Gets the property type.
            </summary>
            <returns> Returns the property type <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Double.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgDoubleProperty.SetValue(System.Double)">
            <summary>
             Sets the property value.
            </summary>
            <param name="value">
             (double) The value of the property.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgDuplicateResourceDataException">
            <summary>
             Thrown when duplicate resource data is found during a set operation.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgDuplicateResourceDataException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgDuplicateResourceDataException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgDuplicateResourceException">
            <summary>
             Thrown when a duplicate resource name is found during an add or update operation.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgDuplicateResourceException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgDuplicateResourceException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgEmptyFeatureSetException">
            <summary>
             Thrown when an empty feature set is found.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgEmptyFeatureSetException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgEmptyFeatureSetException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgFdoException">
            <summary>
             Thrown when FDO encounters an error.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgFdoException.GetNativeErrorCode">
            <summary>
             Retrieve the native error code of the underlying FDO exception.
            </summary>
            <returns> native error code of an fdo exception
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFdoException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgFdoException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgFdoException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection,System.Int64)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgFdoException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
            <param name="nativeErrorCode">
             Error code indicating specific underlying database error in the FDO component, if available.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgFeatureAggregateOptions">
            <summary>
             Use this class to set the filter criteria used to select
             groups of features from a datastore or for restricting the
             values returned to be unique.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureAggregateOptions.#ctor">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgFeatureAggregateOptions" /> object.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureAggregateOptions.SelectDistinct(System.Boolean)">
            <summary>
             Use this method to restrict the values returned by a select
             operation to be unique.
            </summary>
            <param name="yes">
             (boolean/bool) If true, apply the distinct operation; otherwise do not apply the distinct operation; the latter is the default.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureAggregateOptions.SetGroupingFilter(OSGeo.MapGuide.MgStringCollection,System.String)">
            <summary>
             Modifies a select operation with a grouping filter so that
             the results are grouped.
            </summary>
            <param name="groupByProperties">
             (<see cref="T:OSGeo.MapGuide.MgStringCollection" />) The collection of properties to be used in the grouping filter specified in the second parameter.
            </param>
            <param name="groupFilter">
             (String/string) The grouping filter expression.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
        </member>
        <member name="T:OSGeo.MapGuide.MgFeatureCommand">
            <summary>
             Is the abstract base class for feature command classes:
             <see cref="T:OSGeo.MapGuide.MgDeleteFeatures" />, <see cref="T:OSGeo.MapGuide.MgInsertFeatures" />, and <see cref="T:OSGeo.MapGuide.MgUpdateFeatures" />.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureCommand.GetCommandType">
            <summary>
             Gets the type of the command.
            </summary>
            <returns> Returns one of the constants defined in
              <see cref="T:OSGeo.MapGuide.MgFeatureCommandType" />.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgFeatureCommandCollection">
            <summary>
             Represents a collection of feature commands.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureCommandCollection.GetCount">
            <summary>
             Gets the number of commands in the collection.
            </summary>
            <returns> Returns number of commands in the collection
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureCommandCollection.GetItem(System.Int32)">
            <summary>
             Gets the command in the collection at the specified index.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <returns> Returns the command in the collection at the specified index
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureCommandCollection.SetItem(System.Int32,OSGeo.MapGuide.MgFeatureCommand)">
            <summary>
             Sets the command in the collection at the specified index to the specified command.
             If there was already command assigned to specified index, it will be overwritten.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <param name="command">
             (<see cref="T:OSGeo.MapGuide.MgFeatureCommand" />) Input command
            </param>
            <returns> Returns nothing
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureCommandCollection.Add(OSGeo.MapGuide.MgFeatureCommand)">
            <summary>
             Adds the specified command to the end of the collection.
            </summary>
            <param name="command">
             (<see cref="T:OSGeo.MapGuide.MgFeatureCommand" />) One of type <see cref="T:OSGeo.MapGuide.MgDeleteFeatures" />, <see cref="T:OSGeo.MapGuide.MgInsertFeatures" />, or <see cref="T:OSGeo.MapGuide.MgUpdateFeatures" />
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureCommandCollection.Insert(System.Int32,OSGeo.MapGuide.MgFeatureCommand)">
            <summary>
             Inserts the specified command at the specified index within the collection.
             Items following the insertion point are moved down to accommodate the new command.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <param name="command">
             (<see cref="T:OSGeo.MapGuide.MgFeatureCommand" />) Input command
            </param>
            <returns> Returns nothing
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureCommandCollection.Clear">
            <summary>
             Removes all commands from the collection.
            </summary>
            <returns> Returns nothing
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureCommandCollection.Remove(OSGeo.MapGuide.MgFeatureCommand)">
            <summary>
             Removes the specified command from the collection.
            </summary>
            <param name="command">
             (<see cref="T:OSGeo.MapGuide.MgFeatureCommand" />) Input command
            </param>
            <returns> Returns true if removal was successful.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureCommandCollection.RemoveAt(System.Int32)">
            <summary>
             Removes the specified command from the collection.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <returns> Returns nothing
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureCommandCollection.Contains(OSGeo.MapGuide.MgFeatureCommand)">
            <summary>
             Returns true if the collection contains the specified command, false otherwise.
            </summary>
            <param name="command">
             (<see cref="T:OSGeo.MapGuide.MgFeatureCommand" />) Input command
            </param>
            <returns> Returns true if the collection contains the specified command, false otherwise
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureCommandCollection.IndexOf(OSGeo.MapGuide.MgFeatureCommand)">
            <summary>
             Returns the index of the specified command in the collection or -1 if the command does not exist.
            </summary>
            <param name="command">
             (<see cref="T:OSGeo.MapGuide.MgFeatureCommand" />) Input command
            </param>
            <returns> Returns the index of the specified command in the collection or -1 if the command does not exist
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureCommandCollection.#ctor">
            <summary>
             Constructor.  Creates an empty collection of feature commands.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgFeatureProperty">
            <summary>
             Stores <see cref="T:OSGeo.MapGuide.MgFeatureReader" /> data with an associated key name.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureProperty.#ctor(System.String,OSGeo.MapGuide.MgFeatureReader)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgFeatureProperty" /> object.
            </summary>
            <param name="name">
             (String/string) The name of property.
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgFeatureReader" />) The value of property.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureProperty.GetValue">
            <summary>
             Gets the property value.
            </summary>
            <returns> Returns the property value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureProperty.GetPropertyType">
            <summary>
             Gets the property type.
            </summary>
            <returns> Returns the property type <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Feature.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureProperty.SetValue(OSGeo.MapGuide.MgFeatureReader)">
            <summary>
             Sets the property value.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgFeatureReader" />) The value of property.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgFeatureQueryOptions">
            <summary>
             Use this class to set filter criteria for selecting features
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureQueryOptions.#ctor">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgFeatureQueryOptions" /> object.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureQueryOptions.AddFeatureProperty(System.String)">
            <summary>
             Call this method for each class property whose value you want
             retrieved by the <see cref="T:OSGeo.MapGuide.MgFeatureService" />::SelectFeatures() call. Not
             calling this method results in the retrieval of all property
             values for each feature selected.
            </summary>
            <param name="propertyName">
             (String/string) The name of the class property to be added.
            </param>
            <returns> Returns the total number of properties added.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"> if property name is empty</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureQueryOptions.AddComputedProperty(System.String,System.String)">
            <summary>
             Define an alias for a computed property and an expression for
             what is to be computed. In this SQL example, &quot;select
             min(aDouble + aSingle) as minF, min(anInt16 + anInt16) as
             minI from featclass;&quot;, minF and minI are computed properties.
             Call this method for each computed property that you add.
            </summary>
            <param name="aliasName">
             (String/string) The name of the computed property.
            </param>
            <param name="expression">
             (String/string) The expression to be associated with the name of the computed property.
            </param>
            <returns> Returns the total number of properties added.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"> if aliasName or expression is empty</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureQueryOptions.SetFilter(System.String)">
            <summary>
             Sets the filter for this select operation. The filter acts
             like the where clause in an SQL Select statement. Not calling
             this method causes all instances of the feature class to be
            </summary>
            <param name="filterText">
             (String/string) The filter text to be applied.
            </param>
            <returns> Returns nothing.
              &lt;!-- Example --&gt;
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureQueryOptions.SetBinaryOperator(System.Boolean)">
            <summary>
             Use this method to join a regular filter with a spatial
             filter An argument of TRUE results in an AND join, and an
             argument of FALSE results in an OR join. The binary operator
             applies only when both the SetFilter() and SetSpatialFilter()
             methods have been called. If both have been called and
             SetBinaryOperator() has not been called, an AND join is
             applied.
            </summary>
            <param name="andOr">
             (boolean/bool) If true, apply an AND join; otherwise apply an OR join.
            </param>
            <returns> Nothing
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureQueryOptions.SetSpatialFilter(System.String,OSGeo.MapGuide.MgGeometry,System.Int32)">
            <summary>
             Use this method to select features whose geometry property
             satisfies the relationship argument to the geometry argument.
             The effect is geometryProperty.spatialOperation(geometryArg).
             By default this filter is joined by the AND operator with the
            </summary>
            <param name="geometryProperty">
             (String/string) The name of the geometry property belonging the features selected from the datastore
            </param>
            <param name="geometry">
             (<see cref="T:OSGeo.MapGuide.MgGeometry" />) The geometry object set in relation to the geometry property.
            </param>
            <param name="spatialOperation">
             (int) The spatial operation to perform between the lefthand operand (the geometry property) and the righthand operand (the geometry object). The spatial operation value of is one of the <see cref="T:OSGeo.MapGuide.MgFeatureSpatialOperations" /> types.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureQueryOptions.SetOrderingFilter(OSGeo.MapGuide.MgStringCollection,System.Int32)">
            <summary>
             Use this method to specify the order (ascending or
             descending) in which the selected features are returned.
            </summary>
            <param name="orderByProperties">
             (<see cref="T:OSGeo.MapGuide.MgStringCollection" />) The collection of properties to which the ordering option specified in the second parameter is applied.
            </param>
            <param name="orderOption">
             (int) The ordering option, <see cref="T:OSGeo.MapGuide.MgOrderingOption" />::Ascending or <see cref="T:OSGeo.MapGuide.MgOrderingOption" />::Descending.
            </param>
            <returns> Nothing
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureQueryOptions.RemoveFeatureProperty(System.String)">
            <summary>
             Removes a class property.
            </summary>
            <param name="propertyName">
             (String/string) The name of the class property to be removed.
            </param>
            <returns> Returns the total number of properties remaining.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureQueryOptions.RemoveComputedProperty(System.String)">
            <summary>
             Removes a computed property.
            </summary>
            <param name="aliasName">
             (String/string) The name of the computed property to be removed.
            </param>
            <returns> Returns the total number of properties remaining.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureQueryOptions.SetFetchSize(System.Int32)">
            <summary>
             For queries that return a large number of objects
             some feature sources support improving performance by setting
             fetch size in order to reduce the number of database server
             round trips required to satisfy the selection criteria.
             Providers that do not use a fetch size will ignore the fetch
             size parameter. This does not affect the actual results of
             queries as it is a performance tuning parameter.
            </summary>
            <param name="fetchSize">
             (int) The fetch size of query. The query returns all of query results if setting the fetch size to 0.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgFeatureReader">
            <summary>
             Provides a forward-only, read-only iterator for reading
             features selected from the FDO Provider by the
             <see cref="T:OSGeo.MapGuide.MgFeatureService" />::SelectFeatures() method call.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureReader.GetClassDefinition">
            <summary>
             Gets the class definition of the object currently being read.
             If the user has requested only a subset of the class
             properties (as specified in the filter text), the class
             definition reflects what the user has requested, rather than
             the full class definition.
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgClassDefinition" /> object representing the current
              feature object.
            </returns>
            <exception cref="!:OSGeo.MapGuide.MgConnectionNotOpenException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureReader.GetFeatureObject(System.String)">
            <summary>
             Use this method to obtain the values of the properties
             belonging to an object contained in the feature class
             instance. Such an object is a property of the feature class
             instance with a type of <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Feature.
            </summary>
            <param name="propertyName">
             (String/string) The property name.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgFeatureReader" /> object, which can be used to
              access properties of an object contained in the feature
              object.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="!:OSGeo.MapGuide.MgConnectionNotOpenException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgNullPropertyValueException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureReader.GetFeatureObject(System.Int32)">
            <summary>
             Use this method to obtain the values of the properties
             belonging to an object contained in the feature class
             instance. Such an object is a property of the feature class
             instance with a type of <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Feature.
            </summary>
            <param name="index">
             (int) The position of the property in the list of properties belonging to the feature currently being read.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgFeatureReader" /> object, which can be used to
              access properties of an object contained in the feature
              object.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="!:OSGeo.MapGuide.MgConnectionNotOpenException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgNullPropertyValueException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="T:OSGeo.MapGuide.MgFeatureSchema">
            <summary>
             Contains one or more feature class definitions, which specify
             the structure of feature data in a datastore.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchema.#ctor">
            <summary>
             Constructs an empty <see cref="T:OSGeo.MapGuide.MgFeatureSchema" /> object.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchema.#ctor(System.String,System.String)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgFeatureSchema" /> object and sets the schema name
             and description.
            </summary>
            <param name="name">
             (String/string) The name of the schema.
            </param>
            <param name="description">
             (String/string) A description of the schema.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchema.GetName">
            <summary>
             Gets the schema name.
            </summary>
            <returns> Returns the name of the schema.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchema.SetName(System.String)">
            <summary>
             Sets the schema name.
            </summary>
            <param name="name">
             (String/string) The name of the schema.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchema.GetDescription">
            <summary>
             Gets the schema description.
            </summary>
            <returns> Returns the description of the schema.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchema.SetDescription(System.String)">
            <summary>
             Set the schema description.
            </summary>
            <param name="description">
             (String/string) The description of the schema.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchema.GetClasses">
            <summary>
             Gets the class definitions.
            </summary>
            <returns> Returns a collection of the class definitions.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchema.Delete">
            <summary>
             Marks the feature schema for deletion.
            </summary>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgFeatureSchemaCollection">
            <summary>
             FeatureSchemaCollection represents a collection of feature schemas.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchemaCollection.#ctor">
            <summary>
             Constructs a <see cref="T:OSGeo.MapGuide.MgFeatureSchemaCollection" />.  The collection is initially empty.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchemaCollection.SetItem(System.Int32,OSGeo.MapGuide.MgFeatureSchema)">
            <summary>
             Sets the item in the collection at the specified index to the specified value.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgFeatureSchema" />) Input value
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the index is out of range.</exception>
            <exception cref="T:OSGeo.MapGuide.MgDuplicateObjectException"> if it is a duplicate.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchemaCollection.Add(OSGeo.MapGuide.MgFeatureSchema)">
            <summary>
             Adds the specified item to the end of the collection.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgFeatureSchema" />) Input value
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgDuplicateObjectException"> if the index is a duplicate.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchemaCollection.Insert(System.Int32,OSGeo.MapGuide.MgFeatureSchema)">
            <summary>
             Inserts the specified item at the specified index within the collection.
             Items following the insertion point are moved down to accommodate the new item.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgFeatureSchema" />) Input value
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the index is out of range.</exception>
            <exception cref="T:OSGeo.MapGuide.MgDuplicateObjectException"> if it is a duplicate.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchemaCollection.Remove(OSGeo.MapGuide.MgFeatureSchema)">
            <summary>
             Removes the specified item from the collection.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgFeatureSchema" />) Input value
            </param>
            <returns> Returns true if removal was successful.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchemaCollection.GetItem(System.Int32)">
            <summary>
             Gets the item in the collection at the specified index.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <returns> Returns the item in the collection at the specified index.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchemaCollection.GetCount">
            <summary>
             Gets the number of items in the collection.
            </summary>
            <returns> Returns the number of items in the collection.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchemaCollection.Clear">
            <summary>
             Removes all items from the collection.
            </summary>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchemaCollection.RemoveAt(System.Int32)">
            <summary>
             Removes the specified item from the collection.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchemaCollection.Contains(OSGeo.MapGuide.MgFeatureSchema)">
            <summary>
             Returns true if the collection contains the specified item, false otherwise.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgFeatureSchema" />) Input value
            </param>
            <returns> Returns true if the collection contains the specified item, false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchemaCollection.IndexOf(OSGeo.MapGuide.MgFeatureSchema)">
            <summary>
             Returns the index of the specified item in the collection or -1 if the item does not exist.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgFeatureSchema" />) Input value
            </param>
            <returns> Returns the index of the specified item in the collection or -1 if the item does not exist.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureSchemaCollection.ToXml">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Creates an XML document representing the collection.
            </summary>
            <returns> A pointer to an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgFeatureService">
            <summary>
             Provides an abstraction layer for the storage and retrieval
             of feature data in a technology-independent way. The API
             lets you determine what storage technologies are available
             and what capabilities they have. Access to the storage
             technology is modeled as a connection. For example, you can
             connect to a file and do simple insertions or connect to a
             relational database and do transaction-based operations.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.GetFeatureProviders">
            <summary>
             Gets a list of the available FDO providers together with
             other information such as the names of the connection
             properties for each provider. This information is in XML
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> containing the provider registry in
              XML format.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.GetConnectionPropertyValues(System.String,System.String,System.String)">
            <summary>
             Gets a set of connection values that are used to make
             connections to an FDO provider that permits multiple
             connections.
            </summary>
            <param name="providerName">
             (String/string) The name of the Fdo feature provider. Permissible
            </param>
            <param name="propertyName">
             (String/string) The name of the enumerable property for which values need to be retrieved. Connection property names are contained in the output of the <see cref="T:OSGeo.MapGuide.MgFeatureService" />::GetFeatureProviders method. The value of the ConnectionProperty element&amp;apos;s Enumerable attribute must be true.
            </param>
            <param name="partialConnString">
             (String/string) A partial connection string, which is sufficient to connect to a provider.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgStringCollection" /> or NULL, if nothing is found.
              &lt;!-- Examples (PHP) --&gt;
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.TestConnection(System.String,System.String)">
            <summary>
             Connects to the Feature Provider specified in the connection
            </summary>
            <param name="providerName">
             (String/string) The name of the Fdo feature provider. Permissible
            </param>
            <param name="connectionString">
             (String/string) Connection string for Feature Provider. Connection property names that appear in the connection string as keys can be obtained from the output of GetFeatureProviders method. Look at the //FeatureProviderRegistry/FeatureProvider/ConnectionProperties/ConnectionProperty/Name elements.
            </param>
            <returns> Returns true if the connection was successful; otherwise
              returns false.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.TestConnection(OSGeo.MapGuide.MgResourceIdentifier)">
            <summary>
             Connects to the feature source specified by the resource
             identifier and verifies that the feature source has been
             correctly configured and installed in the resource
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) The resource identifier for the feature source.
            </param>
            <returns> Returns true if connection was successful; otherwise returns
              false.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.GetCapabilities(System.String)">
            <summary>
             Gets the capabilities of an FDO Provider expressed in XML
            </summary>
            <param name="providerName">
             (String/string) The name of the FDO provider. Get the exact form of the name from <see cref="T:OSGeo.MapGuide.MgFeatureService" />::GetFeatureProviders.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> containing the capabilities in XML
              format (or NULL).
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.GetCapabilities(System.String,System.String)">
            <summary>
             Gets the capabilities of an FDO Provider expressed in XML
            </summary>
            <param name="providerName">
             (String/string) The name of the FDO provider. Get the exact form of the name from <see cref="T:OSGeo.MapGuide.MgFeatureService" />::GetFeatureProviders.
            </param>
            <param name="connectionString">
             (String/string) The connection string to use.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> containing the capabilities in XML
              format (or NULL).
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.ApplySchema(OSGeo.MapGuide.MgResourceIdentifier,OSGeo.MapGuide.MgFeatureSchema)">
            <summary>
             Creates or updates a feature schema within the specified feature source. For this method to
             actually delete any schema elements, the matching elements in the input schema must be marked
             for deletion using the <see cref="T:OSGeo.MapGuide.MgFeatureSchema" />::Delete(), <see cref="T:OSGeo.MapGuide.MgClassDefinition" />::Delete() and
             <see cref="T:OSGeo.MapGuide.MgPropertyDefinition" />::Delete() methods
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier referring to a feature source.
            </param>
            <param name="schema">
             Input schema to be created or updated.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.DescribeSchema(OSGeo.MapGuide.MgResourceIdentifier,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             Gets the definitions of one or more schemas contained in the
             feature source for particular classes. If the specified schema name or
             a class name does not exist, this method will throw an exception.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for the feature source.
            </param>
            <param name="schemaName">
             (String/string) The name of the schema definition to retrieve. If this string is empty, execution of the command will describe requested classes using the qualified class name. If the class name is not qualified, the requested class from all schemas will be described.
            </param>
            <param name="classNames">
             (<see cref="T:OSGeo.MapGuide.MgStringCollection" />) A collection of strings identifying the feature classes for which to retrieve schema information. If this collection is null or empty, execution of the command will describe all classes. If the class name is not qualified, and the schema name is not specified, the requested class from all schemas will be described. The class names specified serve only as a hint. Use of the hint during command execution is provider dependent. Providers that will not use the hint will describe the schema for all classes.
            </param>
            <returns> Returns the schema collection representing the schema containing
              the class collection for the specified classes.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.DescribeSchema(OSGeo.MapGuide.MgResourceIdentifier,System.String)">
            <summary>
             Gets the definitions of one or more schema contained in the
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for the feature source.
            </param>
            <param name="schemaName">
             (String/string) The name of the schema definition to retrieve or an empty string to retrieve all available schema definitions.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgFeatureSchemaCollection" />.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.DescribeSchemaAsXml(OSGeo.MapGuide.MgResourceIdentifier,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             Gets the definitions in XML format of one or more schemas contained in the
             feature source for particular classes. If the specified schema name or
             a class name does not exist, this method will throw an exception.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for the feature source.
            </param>
            <param name="schemaName">
             (String/string) The name of the schema definition to retrieve. If this string is empty, execution of the command will describe requested classes using the qualified class name. If the class name is not qualified, the requested class from all schemas will be described.
            </param>
            <param name="classNames">
             (<see cref="T:OSGeo.MapGuide.MgStringCollection" />) A collection of strings identifying the feature classes for which to retrieve schema information. If this collection is null or empty, execution of the command will describe all classes. If the class name is not qualified, and the schema name is not specified, the requested class from all schemas will be described. The class names specified serve only as a hint. Use of the hint during command execution is provider dependent. Providers that will not use the hint will describe the schema for all classes.
            </param>
            <returns> Returns a string containing the FDO schema in XML format.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.DescribeSchemaAsXml(OSGeo.MapGuide.MgResourceIdentifier,System.String)">
            <summary>
             Gets the definition in XML format of a schema contained in
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) The resource identifier for the feature source
            </param>
            <param name="schemaName">
             (String/string) The name of the schema definition to retrieve or an empty string to retrieve all available schema definitions.
            </param>
            <returns> Returns a string containing the FDO schema in XML format.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.SchemaToXml(OSGeo.MapGuide.MgFeatureSchemaCollection)">
            <summary>
             Translates the FDO schema information in the provided
             <see cref="T:OSGeo.MapGuide.MgFeatureSchemaCollection" /> object into a string containing an
             XML representation of the schema definitions in the feature
            </summary>
            <param name="schema">
             (<see cref="T:OSGeo.MapGuide.MgFeatureSchemaCollection" />) A FeatureSchemaCollection object.
            </param>
            <returns> Returns a string containiing a set of FDO schema definitions
              in XML format.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgNullArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.XmlToSchema(System.String)">
            <summary>
             Creates an <see cref="T:OSGeo.MapGuide.MgFeatureSchemaCollection" /> object using the XML
             schema provided
            </summary>
            <param name="xml">
             (String/string) A string containing schema definitions in XML format.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgFeatureSchemaCollection" /> object.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgNullArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.SelectFeatures(OSGeo.MapGuide.MgResourceIdentifier,System.String,OSGeo.MapGuide.MgFeatureQueryOptions)">
            <summary>
             Selects features from a feature source according to the
             criteria set in the <see cref="T:OSGeo.MapGuide.MgFeatureQueryOptions" /> argument The
             criteria are applied to all of the features in the feature
             source. If you want to apply the criteria to a subset of the
             features, use <see cref="T:OSGeo.MapGuide.MgFeatureService" />::SelectAggregate.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for the feature source.
            </param>
            <param name="className">
             (String/string) The name of the feature class from which the properties of interest are selected.
            </param>
            <param name="options">
             (<see cref="T:OSGeo.MapGuide.MgFeatureQueryOptions" />) <see cref="T:OSGeo.MapGuide.MgFeatureQueryOptions" /> instance containing all required filters for this select operation.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgFeatureReader" /> containing the set of selected
              features.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.SelectFeatures(OSGeo.MapGuide.MgResourceIdentifier,System.String,OSGeo.MapGuide.MgFeatureQueryOptions,System.String)">
            <summary>
             Selects features from a feature source according to the
             criteria set in the <see cref="T:OSGeo.MapGuide.MgFeatureQueryOptions" /> argument The
             criteria are applied to all of the features in the feature
             source. Use the coordinateSystem argument to set the target
             coordinate system if you want to transform.
             If you want to apply the criteria to a subset of the
             features, use <see cref="T:OSGeo.MapGuide.MgFeatureService" />::SelectAggregate.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for the feature source.
            </param>
            <param name="className">
             (String/string) The name of the feature class from which the properties of interest are selected.
            </param>
            <param name="options">
             (<see cref="T:OSGeo.MapGuide.MgFeatureQueryOptions" />) <see cref="T:OSGeo.MapGuide.MgFeatureQueryOptions" /> instance containing all required filters for this select operation.
            </param>
            <param name="coordinateSystem">
             (String/string) The name of the coordinate system to transform to.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgFeatureReader" /> containing the set of selected
              features.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.SelectAggregate(OSGeo.MapGuide.MgResourceIdentifier,System.String,OSGeo.MapGuide.MgFeatureAggregateOptions)">
            <summary>
             Selects groups of features from a feature source and applies
             filters to each of the groups according to the criteria set
             in the <see cref="T:OSGeo.MapGuide.MgFeatureAggregateOptions" /> argument. If you want to
             apply the criteria to all features without grouping them, use
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for the feature source.
            </param>
            <param name="className">
             (String/string) The name of the feature class on which the select operation is performed.
            </param>
            <param name="options">
             (<see cref="T:OSGeo.MapGuide.MgFeatureAggregateOptions" />) An <see cref="T:OSGeo.MapGuide.MgFeatureAggregateOptions" /> instance containing all the criteria and filters required for this select operation.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgDataReader" /> containing the group values.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.UpdateFeatures(OSGeo.MapGuide.MgResourceIdentifier,OSGeo.MapGuide.MgFeatureCommandCollection,System.Boolean)">
            <summary>
             Executes the <see cref="T:OSGeo.MapGuide.MgDeleteFeatures" />, <see cref="T:OSGeo.MapGuide.MgInsertFeatures" />,
             <see cref="T:OSGeo.MapGuide.MgUpdateFeatures" />, <see cref="!:OSGeo.MapGuide.MgLockFeatures" /> or <see cref="!:OSGeo.MapGuide.MgUnlockFeatures" /> commands
             contained in the given <see cref="T:OSGeo.MapGuide.MgFeatureCommandCollection" /> object.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for the feature source.
            </param>
            <param name="commands">
             (<see cref="T:OSGeo.MapGuide.MgFeatureCommandCollection" />) A collection of feature commands to be executed.
            </param>
            <param name="useTransaction">
             (boolean/bool) If true and transactions are supported by the Fdo provider, execute all commands inside a transaction. If false, do not use a transaction.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgPropertyCollection" /> object. Each property in the
              collection corresponds to a command in the
              <see cref="T:OSGeo.MapGuide.MgFeatureCommandCollection" /> argument. The property name is the
              index of the command in the feature command collection.
              &lt;ul&gt;
                &lt;li&gt;If the command is of type <see cref="T:OSGeo.MapGuide.MgDeleteFeatures" />, the property
                  type is an <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Int32, and its value is the number
                  of features deleted.&lt;/li&gt;
                &lt;li&gt;If the command is of type <see cref="T:OSGeo.MapGuide.MgInsertFeatures" />, the property
                  type is an <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Feature, and its value is a
                  <see cref="T:OSGeo.MapGuide.MgFeatureReader" /> object. The feature reader object contains
                  the set of properties inserted into the datastore by the
                  insert command.&lt;/li&gt;
                &lt;li&gt;If the command is of type <see cref="T:OSGeo.MapGuide.MgUpdateFeatures" />, the property
                  type is <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Int32, and its value is the number of
                  features updated.&lt;/li&gt;
                &lt;li&gt;If the command is of type <see cref="!:OSGeo.MapGuide.MgLockFeatures" />, the property
                  type is <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Feature, and its value is the number
                  of features locked.&lt;/li&gt;
                &lt;li&gt;If the command is of type <see cref="!:OSGeo.MapGuide.MgUnlockFeatures" />, the property
                  type is <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Int32, and its value is the number of
                  features unlocked.&lt;/li&gt;
                &lt;li&gt;For any of the above commands, if the property type is
                  <see cref="T:OSGeo.MapGuide.MgPropertyType" />::String, it indicates an exception had occurred
                  for that particular command, and its value is the exception message.
                  This only applies when the operation is not using a transaction&lt;/li&gt;
              &lt;/ul&gt;
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.UpdateFeatures(OSGeo.MapGuide.MgResourceIdentifier,OSGeo.MapGuide.MgFeatureCommandCollection,OSGeo.MapGuide.MgTransaction)">
            <summary>
             Executes the <see cref="T:OSGeo.MapGuide.MgDeleteFeatures" />, <see cref="T:OSGeo.MapGuide.MgInsertFeatures" />,
             <see cref="T:OSGeo.MapGuide.MgUpdateFeatures" />, <see cref="!:OSGeo.MapGuide.MgLockFeatures" /> or <see cref="!:OSGeo.MapGuide.MgUnlockFeatures" /> commands
             contained in the given <see cref="T:OSGeo.MapGuide.MgFeatureCommandCollection" /> object within
             the given transaction.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for the feature source.
            </param>
            <param name="commands">
             (<see cref="T:OSGeo.MapGuide.MgFeatureCommandCollection" />) A collection of feature commands to be executed.
            </param>
            <param name="transaction">
             (<see cref="T:OSGeo.MapGuide.MgTransaction" />) The <see cref="T:OSGeo.MapGuide.MgTransaction" /> instance on which the commands will be executed.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgPropertyCollection" /> object. Each property in the
              collection corresponds to a command in the
              <see cref="T:OSGeo.MapGuide.MgFeatureCommandCollection" /> argument. The property name is the
              index of the command in the feature command collection.
              &lt;ul&gt;
                &lt;li&gt;If the command is of type <see cref="T:OSGeo.MapGuide.MgDeleteFeatures" />, the property
                  type is an <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Int32, and its value is the number
                  of features deleted.&lt;/li&gt;
                &lt;li&gt;If the command is of type <see cref="T:OSGeo.MapGuide.MgInsertFeatures" />, the property
                  type is an <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Feature, and its value is a
                  <see cref="T:OSGeo.MapGuide.MgFeatureReader" /> object. The feature reader object contains
                  the set of properties inserted into the datastore by the
                  insert command.&lt;/li&gt;
                &lt;li&gt;If the command is of type <see cref="T:OSGeo.MapGuide.MgUpdateFeatures" />, the property
                  type is <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Int32, and its value is the number of
                  features updated.&lt;/li&gt;
                &lt;li&gt;If the command is of type <see cref="!:OSGeo.MapGuide.MgLockFeatures" />, the property
                  type is <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Feature, and its value is the number
                  of features locked.&lt;/li&gt;
                &lt;li&gt;If the command is of type <see cref="!:OSGeo.MapGuide.MgUnlockFeatures" />, the property
                  type is <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Int32, and its value is the number of
                  features unlocked.&lt;/li&gt;
                &lt;li&gt;For any of the above commands, if the property type is
                  <see cref="T:OSGeo.MapGuide.MgPropertyType" />::String, it indicates an exception had occurred
                  for that particular command, and its value is the exception message.
                  This only applies when the operation is not using a transaction&lt;/li&gt;
              &lt;/ul&gt;
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.InsertFeatures(OSGeo.MapGuide.MgResourceIdentifier,System.String,OSGeo.MapGuide.MgPropertyCollection)">
            <summary>
             Inserts a new feature into the specified feature class of the specified Feature Source
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for the feature source.
            </param>
            <param name="className">
             (String/string) The name of the feature class on which the insert operation is performed.
            </param>
            <param name="propertyValues">
             (<see cref="T:OSGeo.MapGuide.MgPropertyCollection" />) The collection of property values to insert
            </param>
            <returns> Returns a feature reader object that contains the set of properties
              inserted into the datastore by the insert command.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.InsertFeatures(OSGeo.MapGuide.MgResourceIdentifier,System.String,OSGeo.MapGuide.MgPropertyCollection,OSGeo.MapGuide.MgTransaction)">
            <summary>
             Inserts a new feature into the specified feature class of the specified Feature Source
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for the feature source.
            </param>
            <param name="className">
             (String/string) The name of the feature class on which the insert operation is performed.
            </param>
            <param name="propertyValues">
             (<see cref="T:OSGeo.MapGuide.MgPropertyCollection" />) The collection of property values to insert
            </param>
            <param name="trans">
             (<see cref="T:OSGeo.MapGuide.MgTransaction" />) The transaction to execute this operation under
            </param>
            <returns> Returns a feature reader object that contains the set of properties
              inserted into the datastore by the insert command.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.InsertFeatures(OSGeo.MapGuide.MgResourceIdentifier,System.String,OSGeo.MapGuide.MgBatchPropertyCollection)">
            <summary>
             Inserts a set of new features into the specified feature class of the specified Feature Source
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for the feature source.
            </param>
            <param name="className">
             (String/string) The name of the feature class on which the insert operation is performed.
            </param>
            <param name="batchPropertyValues">
             (<see cref="T:OSGeo.MapGuide.MgBatchPropertyCollection" />) The collection of property values to insert. Each <see cref="T:OSGeo.MapGuide.MgPropertyCollection" /> within this collection represents property values for a single feature to insert
            </param>
            <returns> Returns a feature reader object that contains the set of properties
              inserted into the datastore by the insert command.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.InsertFeatures(OSGeo.MapGuide.MgResourceIdentifier,System.String,OSGeo.MapGuide.MgBatchPropertyCollection,OSGeo.MapGuide.MgTransaction)">
            <summary>
             Inserts a set of new features into the specified feature class of the specified Feature Source
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for the feature source.
            </param>
            <param name="className">
             (String/string) The name of the feature class on which the insert operation is performed.
            </param>
            <param name="batchPropertyValues">
             (<see cref="T:OSGeo.MapGuide.MgBatchPropertyCollection" />) The collection of property values to insert. Each <see cref="T:OSGeo.MapGuide.MgPropertyCollection" /> within this collection represents property values for a single feature to insert
            </param>
            <param name="trans">
             (<see cref="T:OSGeo.MapGuide.MgTransaction" />) The transaction to execute this operation under
            </param>
            <returns> Returns a feature reader object that contains the set of properties
              inserted into the datastore by the insert command.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.UpdateMatchingFeatures(OSGeo.MapGuide.MgResourceIdentifier,System.String,OSGeo.MapGuide.MgPropertyCollection,System.String)">
            <summary>
             Updates all features that match the given filter with the specified property values
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for the feature source.
            </param>
            <param name="className">
             (String/string) The name of the feature class on which the update operation is performed.
            </param>
            <param name="properties">
             (<see cref="T:OSGeo.MapGuide.MgBatchPropertyCollection" />) The property values to update matching features with
            </param>
            <param name="filter">
             (String/string) The FDO filter string that detemines what features will be updated
            </param>
            <returns> Returns the number of features updated by this operation
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.UpdateMatchingFeatures(OSGeo.MapGuide.MgResourceIdentifier,System.String,OSGeo.MapGuide.MgPropertyCollection,System.String,OSGeo.MapGuide.MgTransaction)">
            <summary>
             Updates all features that match the given filter with the specified property values
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for the feature source.
            </param>
            <param name="className">
             (String/string) The name of the feature class on which the update operation is performed.
            </param>
            <param name="properties">
             (<see cref="T:OSGeo.MapGuide.MgBatchPropertyCollection" />) The property values to update matching features with
            </param>
            <param name="filter">
             (String/string) The FDO filter string that detemines what features will be updated
            </param>
            <param name="trans">
             (<see cref="T:OSGeo.MapGuide.MgTransaction" />) The transaction to execute this operation under
            </param>
            <returns> Returns the number of features updated by this operation
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.DeleteFeatures(OSGeo.MapGuide.MgResourceIdentifier,System.String,System.String)">
            <summary>
             Deletes all features that match the given filter
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for the feature source.
            </param>
            <param name="className">
             (String/string) The name of the feature class on which the delete operation is performed.
            </param>
            <param name="filter">
             (String/string) The FDO filter string that detemines what features will be deleted
            </param>
            <returns> Returns the number of features deleted by this operation
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.DeleteFeatures(OSGeo.MapGuide.MgResourceIdentifier,System.String,System.String,OSGeo.MapGuide.MgTransaction)">
            <summary>
             Deletes all features that match the given filter
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for the feature source.
            </param>
            <param name="className">
             (String/string) The name of the feature class on which the delete operation is performed.
            </param>
            <param name="filter">
             (String/string) The FDO filter string that detemines what features will be deleted
            </param>
            <param name="trans">
             (<see cref="T:OSGeo.MapGuide.MgTransaction" />) The transaction to execute this operation under
            </param>
            <returns> Returns the number of features deleted by this operation
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.GetLockedFeatures(OSGeo.MapGuide.MgResourceIdentifier,System.String,OSGeo.MapGuide.MgFeatureQueryOptions)">
            <summary>
             Gets the locked features
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for the feature source.
            </param>
            <param name="className">
             (String/string) The name of the feature class on which the select operation is performed.
            </param>
            <param name="options">
             (<see cref="T:OSGeo.MapGuide.MgFeatureAggregateOptions" />) An <see cref="T:OSGeo.MapGuide.MgFeatureAggregateOptions" /> instance containing all the criteria and filters required for this select operation.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgFeatureReader" /> containing the locked features.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.BeginTransaction(OSGeo.MapGuide.MgResourceIdentifier)">
            <summary>
             Starts a transaction on the specified feature source
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier referring to a feature source.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgTransaction" /> instance (or NULL).
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.ExecuteSqlQuery(OSGeo.MapGuide.MgResourceIdentifier,System.String)">
            <summary>
             Executes the SQL SELECT statement on the specified feature
             source.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier referring to a feature source.
            </param>
            <param name="sqlStatement">
             (String/string) The SQL SELECT statement.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgSqlDataReader" /> instance (or NULL).
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.ExecuteSqlQuery(OSGeo.MapGuide.MgResourceIdentifier,System.String,OSGeo.MapGuide.MgParameterCollection,OSGeo.MapGuide.MgTransaction)">
            <summary>
             Executes the SQL SELECT statement on the specified feature
             source within the given transaction.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier referring to a feature source.
            </param>
            <param name="sqlStatement">
             (String/string) The SQL SELECT statement.
            </param>
            <param name="parameters">
             (<see cref="T:OSGeo.MapGuide.MgParameterCollection" />) Parameters binded to the SQL statement.
            </param>
            <param name="transaction">
             (<see cref="T:OSGeo.MapGuide.MgTransaction" />) The <see cref="T:OSGeo.MapGuide.MgTransaction" /> instance on which the sql statement will be executed.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgSqlDataReader" /> instance (or NULL).
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.ExecuteSqlNonQuery(OSGeo.MapGuide.MgResourceIdentifier,System.String)">
            <summary>
             Executes SQL statements NOT including SELECT statements.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for a feature source.
            </param>
            <param name="sqlNonSelectStatement">
             (String/string) The SQL statement that is NOT a SELECT statement.
            </param>
            <returns> Returns a positive integer value indicating how many
              instances (rows) have been affected.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.ExecuteSqlNonQuery(OSGeo.MapGuide.MgResourceIdentifier,System.String,OSGeo.MapGuide.MgParameterCollection,OSGeo.MapGuide.MgTransaction)">
            <summary>
             Executes SQL statements NOT including SELECT statements
             within the given transaction.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for a feature source.
            </param>
            <param name="sqlNonSelectStatement">
             (String/string) The SQL statement that is NOT a SELECT statement.
            </param>
            <param name="parameters">
             (<see cref="T:OSGeo.MapGuide.MgParameterCollection" />) Parameters binded to the SQL statement.
            </param>
            <param name="transaction">
             (<see cref="T:OSGeo.MapGuide.MgTransaction" />) The <see cref="T:OSGeo.MapGuide.MgTransaction" /> instance on which the sql statement will be executed.
            </param>
            <returns> Returns a positive integer value indicating how many
              instances (rows) have been affected.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.GetSpatialContexts(OSGeo.MapGuide.MgResourceIdentifier,System.Boolean)">
            <summary>
             Gets all of the spatial contexts available in the feature
             source or just the active one.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier identifying a feature source in the repository.
            </param>
            <param name="bActiveOnly">
             (boolean/bool) This flag is obsolete and no longer used.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgSpatialContextReader" /> object.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.GetLongTransactions(OSGeo.MapGuide.MgResourceIdentifier,System.Boolean)">
            <summary>
             Gets all available long transactions for the provider.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for feature source.
            </param>
            <param name="bActiveOnly">
             (boolean/bool) If true, returns the active long transaction; otherwise returns all long transactions.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgLongTransactionReader" /> instance or NULL.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.SetLongTransaction(OSGeo.MapGuide.MgResourceIdentifier,System.String)">
            <summary>
             Set the active long transaction name for a feature source.
            </summary>
            <param name="featureSourceId">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier identifying a feature source in the repository.
            </param>
            <param name="longTransactionName">
             (String/string) The long transaction name to set.
            </param>
            <returns> Returns true if the name was successfully set; otherwise
              returns false.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgNullArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
            <exception cref="!:OSGeo.MapGuide.MgSessionNotFoundException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.GetSchemas(OSGeo.MapGuide.MgResourceIdentifier)">
            <summary>
             Gets a list of the names of all of the schemas available in
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for the feature source,
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgStringCollection" /> object listing the schema
              names.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OSGeo.MapGuide.MgFeatureService.GetClasses(OSGeo.MapGuide.MgResourceIdentifier,System.String)" -->
        <member name="M:OSGeo.MapGuide.MgFeatureService.GetClassDefinition(OSGeo.MapGuide.MgResourceIdentifier,System.String,System.String)">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) A resource identifier for the feature source.
            </param>
            <param name="schemaName">
             (String/string) A schema name.
            </param>
            <param name="className">
             (String/string) A class name.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgClassDefinition" /> instance for the specified
              class name.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.CreateFeatureSource(OSGeo.MapGuide.MgResourceIdentifier,OSGeo.MapGuide.MgFeatureSourceParams)">
            <summary>
             Creates a feature source in the repository identified by the
             specified resource identifier, using the given feature source
             parameters.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) The resource identifier defining the location of the new feature source in the repository.
            </param>
            <param name="sourceParams">
             (<see cref="T:OSGeo.MapGuide.MgFeatureSourceParams" />) The feature source parameters (feature schema and spatial context definitions).
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.DescribeWfsFeatureType(OSGeo.MapGuide.MgResourceIdentifier,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             Retrieves schema information about a set of feature classes for a given feature source.
            </summary>
            <param name="featureSourceId">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) The resource identifier defining the location of the feature source in the repository.
            </param>
            <param name="featureClasses">
             (<see cref="T:OSGeo.MapGuide.MgStringCollection" />) A collection of strings identifying the feature classes for which to retrieve schema information. If this collection is null or empty, information is returned for all feature classes.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> containing the XML schema.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.DescribeWfsFeatureType(OSGeo.MapGuide.MgResourceIdentifier,OSGeo.MapGuide.MgStringCollection,System.String,System.String)">
            <summary>
             Retrieves schema informationabout a set of feature classes for a given feature source  with specified namespace prefix and url.
            </summary>
            <param name="featureSourceId">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) The resource identifier defining the location of the feature source in the repository.
            </param>
            <param name="featureClasses">
             (<see cref="T:OSGeo.MapGuide.MgStringCollection" />) A collection of strings identifying the feature classes for which to retrieve schema information. If this collection is null or empty, information is returned for all feature classes.
            </param>
            <param name="namespacePrefix">
             (String/string) A string identifying the namespace prefix in the output xml
            </param>
            <param name="namespaceUrl">
             (String/string) A string idenyifying the namespace url in the output xml
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> containing the XML schema.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.GetWfsFeature(OSGeo.MapGuide.MgResourceIdentifier,System.String,OSGeo.MapGuide.MgStringCollection,System.String,System.String,System.Int32)">
            <summary>
             Retrieves feature information based on the supplied criteria.
            </summary>
            <param name="featureSourceId">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) The resource identifier defining the location of the feature source in the repository.
            </param>
            <param name="featureClass">
             (String/string) The feature class containing the features to retrieve.
            </param>
            <param name="requiredProperties">
             (<see cref="T:OSGeo.MapGuide.MgStringCollection" />) The collection of properties to retrieve for each feature. If the collection is null or empty, all properties will be retrieved.
            </param>
            <param name="srs">
             (String/string) The spatial reference system in which to return feature geometries
            </param>
            <param name="filter">
             (String/string) An XML string containing the definition for an OGC filter
            </param>
            <param name="maxFeatures">
             (int) The maximum number of features to retrieve. If the value is less than or equal to zero, all features will be retrieved.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> containing the requested feature information.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.GetWfsFeature(OSGeo.MapGuide.MgResourceIdentifier,System.String,OSGeo.MapGuide.MgStringCollection,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Retrieves feature information based on the supplied criteria with specified format.
            </summary>
            <param name="featureSourceId">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) The resource identifier defining the location of the feature source in the repository.
            </param>
            <param name="featureClass">
             (String/string) The feature class containing the features to retrieve.
            </param>
            <param name="requiredProperties">
             (<see cref="T:OSGeo.MapGuide.MgStringCollection" />) The collection of properties to retrieve for each feature. If the collection is null or empty, all properties will be retrieved.
            </param>
            <param name="srs">
             (String/string) The spatial reference system in which to return feature geometries
            </param>
            <param name="filter">
             (String/string) An XML string containing the definition for an OGC filter
            </param>
            <param name="maxFeatures">
             (int) The maximum number of features to retrieve. If the value is less than or equal to zero, all features will be retrieved.
            </param>
            <param name="wfsVersion">
             (String/string) A string identifying the wfs version
            </param>
            <param name="outputFormat">
             (String/string) A string identifying the output format of the retrieved feature information. The supported values of output format are specified in OpenGIS Web Feature Service (WFS) Implementation Specification - section 9.2 http://portal.opengeospatial.org/files/?artifact_id=8339
            </param>
            <param name="sortCriteria">
             (String/string) A string identifying the sort criteria
            </param>
            <param name="namespacePrefix">
             (String/string) A string identifying the namespace prefix in the output xml
            </param>
            <param name="namespaceUrl">
             (String/string) A string idenyifying the namespace url in the output xml
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> containing the requested feature information.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.GetWfsReader(OSGeo.MapGuide.MgResourceIdentifier,System.String,OSGeo.MapGuide.MgStringCollection,System.String,System.String,System.String)">
            <summary>
             Retrieves feature information based on the supplied criteria.
            </summary>
            <param name="featureSourceId">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) The resource identifier defining the location of the feature source in the repository.
            </param>
            <param name="featureClass">
             (String/string) The feature class containing the features to retrieve.
            </param>
            <param name="requiredProperties">
             (<see cref="T:OSGeo.MapGuide.MgStringCollection" />) The collection of properties to retrieve for each feature. If the collection is null or empty, all properties will be retrieved.
            </param>
            <param name="srs">
             (String/string) The spatial reference system in which to return feature geometries
            </param>
            <param name="filter">
             (String/string) An XML string containing the definition for an OGC filter
            </param>
            <param name="sortCriteria">
             (String/string) A string identifying the sort criteria
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> containing the requested feature information.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.EnumerateDataStores(System.String,System.String)">
            <summary>
             This method enumerates all the providers and if they are FDO enabled for
             the specified provider and partial connection string.
            </summary>
            <param name="providerName">
             (String/string) The name of the Fdo feature provider.
            </param>
            <param name="partialConnString">
             (String/string) The partial connection string to the Fdo provider.
            </param>
            <returns> Returns the list of data stores.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureService.GetSchemaMapping(System.String,System.String)">
            <summary>
             This method returns all of the logical to physical schema mappings for
             the specified provider and partial connection string.
            </summary>
            <param name="providerName">
             (String/string) The name of the Fdo feature provider.
            </param>
            <param name="partialConnString">
             (String/string) The partial connection string to the Fdo provider.
            </param>
            <returns> Returns the schema mapping.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgFeatureServiceException">
            <summary>
             Thrown when FeatureService encounters a problem.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgFeatureServiceException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgFeatureServiceException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgFeatureSourceParams">
            <summary>
             Is a virtual base class for feature source parameters used
             with <see cref="!:OSGeo.MapGuide.MgFeatureSource" />::CreateFeatureSource. This class cannot
             be instantiated directly.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgFileFeatureSourceParams">
            <summary>
             Contains the parameters used to create a file-based
             feature source.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgFileFeatureSourceParams.#ctor">
            <summary>
             Constructs an empty <see cref="T:OSGeo.MapGuide.MgFileFeatureSourceParams" /> object.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgFileFeatureSourceParams.#ctor(System.String)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgFileFeatureSourceParams" /> object
             with the specified FDO provider name.
            </summary>
            <param name="providerName">
             (String/string) The FDO provider name of the feature source without version number. For example, OSGeo.SDF.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgFileFeatureSourceParams.#ctor(System.String,System.String,System.String,OSGeo.MapGuide.MgFeatureSchema)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgFileFeatureSourceParams" /> object
             with the supplied parameters.
            </summary>
            <param name="providerName">
             (String/string) The FDO provider name of the feature source without version number. For example, OSGeo.SDF.
            </param>
            <param name="spatialContextName">
             (String/string) The name of the spatial context. This is a user defined spatial context for the feature source. Only one spatial context is supported.
            </param>
            <param name="srsWkt">
             (String/string) An OGC WKT string representing the coordinate system for the feature source.
            </param>
            <param name="featureSchema">
             (<see cref="T:OSGeo.MapGuide.MgFeatureSchema" />) The schema definition for the feature source.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFileFeatureSourceParams.GetProviderName">
            <summary>
             Gets the FDO provider name of the feature source.
            </summary>
            <returns> Returns the FDO provider name of the feature source.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFileFeatureSourceParams.SetProviderName(System.String)">
            <summary>
             Sets the FDO provider name of the feature source.
            </summary>
            <param name="name">
             (String/string) The FDO provider name of the feature source without version number. For example, OSGeo.SDF.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFileFeatureSourceParams.GetFileName">
            <summary>
             Gets the file name to be created. For SHP FDO provider,
             it is used to get path name because multiple files will
             be created if there are multiple feature classes in
             the specified featue schame.
            </summary>
            <returns> Returns the file name to be created.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFileFeatureSourceParams.SetFileName(System.String)">
            <summary>
             Sets the file name to be created. For SHP FDO provider,
             it is used to set path name because multiple files will
             be created if there are multiple feature classes in
             the specified featue schame.
            </summary>
            <param name="name">
             (String/string) The file name to be created.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFileFeatureSourceParams.GetSpatialContextName">
            <summary>
             Gets the user-defined spatial context name.
            </summary>
            <returns> Returns the name of the spatial context.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFileFeatureSourceParams.SetSpatialContextName(System.String)">
            <summary>
             Sets the user-defined spatial context name.
            </summary>
            <param name="name">
             (String/string) The name of the spatial context
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFileFeatureSourceParams.GetSpatialContextDescription">
            <summary>
             Gets the spatial context description.
            </summary>
            <returns> Returns the spatial context description.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFileFeatureSourceParams.SetSpatialContextDescription(System.String)">
            <summary>
             Sets the spatial context description.
            </summary>
            <param name="description">
             (String/string) The description of the spatial context.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFileFeatureSourceParams.GetCoordinateSystemWkt">
            <summary>
             Gets the well-known text description of the coordinate system.
            </summary>
            <returns> Returns the OGC WKT description of the coordinate system.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFileFeatureSourceParams.SetCoordinateSystemWkt(System.String)">
            <summary>
             Sets the well-know text string representing the coordinate system.
            </summary>
            <param name="srsWkt">
             (String/string) The OGC WKT string representing the coordinate system.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFileFeatureSourceParams.GetXYTolerance">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <returns> Returns the tolerance used for the X and Y ordinates.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFileFeatureSourceParams.SetXYTolerance(System.Double)">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <param name="tolerance">
             (double) The tolerance for the X and Y ordinates.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFileFeatureSourceParams.GetZTolerance">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <returns> Returns the tolerance for the Z ordinate.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFileFeatureSourceParams.SetZTolerance(System.Double)">
            <summary>
             Sets the tolerance for the Z ordinate.
            </summary>
            <param name="tolerance">
             (double) The tolerance for the Z ordinate.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFileFeatureSourceParams.GetFeatureSchema">
            <summary>
             Gets the feature schema definition.
            </summary>
            <returns> Returns a feature schema definition object.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgFileFeatureSourceParams.SetFeatureSchema(OSGeo.MapGuide.MgFeatureSchema)">
            <summary>
             Sets the feature schema definition.
            </summary>
            <param name="featureSchema">
             (<see cref="T:OSGeo.MapGuide.MgFeatureSchema" />) The feature schema definition.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgGeoJsonWriter">
            <summary>
             A helper class to output GeoJSON from feature readers
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeoJsonWriter.#ctor">
            <summary>
             Constructs a <see cref="T:OSGeo.MapGuide.MgGeoJsonWriter" /> object
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeoJsonWriter.FeatureToGeoJson(OSGeo.MapGuide.MgFeatureReader,OSGeo.MapGuide.MgTransform)">
            <summary>
             Converts the current feature in the given feature reader to GeoJSON
            </summary>
            <param name="featureReader">
             (<see cref="T:OSGeo.MapGuide.MgFeatureReader" />) The feature reader
            </param>
            <param name="transform">
             (<see cref="T:OSGeo.MapGuide.MgTransform" />) An optional transform
            </param>
            <returns> Returns the GeoJSON output as a string.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeoJsonWriter.FeatureToGeoJson(OSGeo.MapGuide.MgReader,OSGeo.MapGuide.MgTransform,System.String,System.String)">
            <summary>
             Converts the current feature in the given feature reader to GeoJSON
            </summary>
            <param name="featureReader">
             (<see cref="T:OSGeo.MapGuide.MgFeatureReader" />) The feature reader
            </param>
            <param name="transform">
             (<see cref="T:OSGeo.MapGuide.MgTransform" />) An optional transform
            </param>
            <param name="idPropertyName">
             (String/string) The name of the id property. The value of the property specified will be written to the top-level &amp;quot;id&quot; property of the GeoJSON
            </param>
            <param name="geomPropName">
             (String/string) The name of the geometry property. The value of the property specified will be written to the top-level &amp;quot;geometry&quot; property of the GeoJSON. If this property is not specified, no geometry is written.
            </param>
            <returns> Returns the GeoJSON output as a string.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeoJsonWriter.SetPrecision(System.Int32)">
            <summary>
             Sets the decimal precision to use when writing out coordinates. If you do not call this method, the default precision used is 7 decimal places.
             Precision must be enabled in order for this setting to have any effect
            </summary>
            <param name="precision">
             (int) The decimal precision to write out coordinates
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeoJsonWriter.GetPrecision">
            <summary>
             Gets the decimal precision to use when writing out coordinates
            </summary>
            <returns> Returns the current precision
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeoJsonWriter.SetPrecisionEnabled(System.Boolean)">
            <summary>
             Sets whether to apply coordinate precision when writing out GeoJSON coordinates
            </summary>
            <param name="enabled">
             (bool) If true, enables coordinate precision. Otherwise disables it
            </param>
            <returns> Returns the GeoJSON output as a string.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeoJsonWriter.IsPrecisionEnabled">
            <summary>
             Gets whether coordinate precision is enabled
            </summary>
            <returns> True if coordinate precision is enabled. False otherwise
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgGeometricPropertyDefinition">
            <summary>
             Defines a geometric property belonging to a feature class.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometricPropertyDefinition.#ctor(System.String)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgGeometricPropertyDefinition" /> object
            </summary>
            <param name="name">
             (String/string) The name of the property.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometricPropertyDefinition.GetGeometryTypes">
            <summary>
             Gets the <see cref="T:OSGeo.MapGuide.MgFeatureGeometricType" /> types which specify the
             categories of the geometries (point, line, surface, solid)
             that can be stored in this geometric property.
            </summary>
            <returns> Returns the bit-wise OR combination of one or more of the
              <see cref="T:OSGeo.MapGuide.MgFeatureGeometricType" /> constants.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometricPropertyDefinition.GetSpecificGeometryTypes">
            <summary>
             Gets the specific geometry types that can be stored in this geometric
             property. The returned value is a list of geometry types that are
             supported.  The caller does NOT own the array of types and should not free its memory.
            </summary>
            <returns> Returns a list of geometry types that are supported.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometricPropertyDefinition.GetReadOnly">
            <summary>
             Gets a Boolean value that indicates whether this geometric
             property is read-only.
            </summary>
            <returns> Returns a Boolean value that indicates whether this
              geometric property is read-only.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometricPropertyDefinition.GetHasElevation">
            <summary>
             Gets a Boolean value that indicates whether the points in the
             geometry contained in this property include elevation
             (Z-coordinate) values.
            </summary>
            <returns> Returns a Boolean value that indicates whether the points in
              the geometry contained in this property includes elevation
              (Z-coordinate) values
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometricPropertyDefinition.GetHasMeasure">
            <summary>
             Gets a Boolean value that indicates whether the points in the
             geometry contained in this property includes measurement
             values (M-ordinates).
            </summary>
            <returns> Returns true if the points in the geometry contained in this
              property include measurement values (M-ordinates); otherwise
              returns false.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometricPropertyDefinition.GetSpatialContextAssociation">
            <summary>
             Gets the Spatial Context name associated with this geometric
             property.
            </summary>
            <returns> Returns a String value representing the Spatial Context
              name. If the value is empty then the geometric property is
              associated with all the spatial contexts in the datastore.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometricPropertyDefinition.SetGeometryTypes(System.Int32)">
            <summary>
             Sets the categories of geometries (point, line, surface,
             solid) that can be stored in this geometric property.
            </summary>
            <param name="types">
             (int) One or more of the <see cref="T:OSGeo.MapGuide.MgFeatureGeometricType" /> constants combined by a bit-wise OR operation.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometricPropertyDefinition.SetSpecificGeometryTypes(OSGeo.MapGuide.MgGeometryTypeInfo)">
            <summary>
             Sets the specific list of geometry types that can be stored in this
             geometric property. The provided value is a list of geometry types
             that are supported.
            </summary>
            <param name="typeInfo">
             (<see cref="T:OSGeo.MapGuide.MgGeometryTypeInfo" />) The specific set of geometry types that can be stored in this geometric property.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometricPropertyDefinition.SetReadOnly(System.Boolean)">
            <summary>
             Determines whether this geometric property is read-only.
            </summary>
            <param name="value">
             (boolean/bool) True configures the property to be read-only and false configures it to be user settable.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometricPropertyDefinition.SetHasElevation(System.Boolean)">
            <summary>
             Determines whether the geometry contained in this property
             can include elevation values, that is, whether the
             coordinates in the geometry contain Z-ordinates.
            </summary>
            <param name="hasElevation">
             (boolean/bool) True configures this property so that it can contain a geometry whose coordinates have elevation values (Z-ordinates), and false configures it so that the points in the geometry cannot take an elevation value.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometricPropertyDefinition.SetHasMeasure(System.Boolean)">
            <summary>
             Determines whether the points in the geometry contained in
             this property can include a measurement value (M-ordinate).
            </summary>
            <param name="hasMeasure">
             (boolean/bool) True configures the property to take geometries whose coordinates have an M-ordinate and false configures it so that M-ordinates are not permissible.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometricPropertyDefinition.SetSpatialContextAssociation(System.String)">
            <summary>
             Sets a Spatial Context association for this geometric
             property.
            </summary>
            <param name="spatialContextName">
             (String/string) The Spatial Context name to be set.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgGeometryProperty">
            <summary>
             Stores <see cref="T:OSGeo.MapGuide.MgByteReader" /> data with an associated key name.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometryProperty.#ctor(System.String,OSGeo.MapGuide.MgByteReader)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgGeometryProperty" /> object.
            </summary>
            <param name="name">
             (String/string) The name of the property.
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgByteReader" />) The value of the property.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometryProperty.GetValue">
            <summary>
             Gets the property value.
            </summary>
            <returns> Returns the property value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometryProperty.GetPropertyType">
            <summary>
             Gets the property type.
            </summary>
            <returns> Returns the property type <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Geometry.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometryProperty.SetValue(OSGeo.MapGuide.MgByteReader)">
            <summary>
             Sets the property value.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgByteReader" />) The value of the property.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgGeometryTypeInfo">
            <summary>
             Defines a list of geometric types.  This is typically used for geometric property description.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometryTypeInfo.#ctor">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgGeometryTypeInfo" /> object
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometryTypeInfo.GetType(System.Int32)">
            <summary>
             Gets the <see cref="T:OSGeo.MapGuide.MgGeometryType" /> value which specifies one of the
             types of FGF geometry (Point, LineString, CurveString, ...)
            </summary>
            <param name="index">
             (int) The index value of the type to get. This must be in the range of zero to <see cref="T:OSGeo.MapGuide.MgGeometryTypeInfo" />::GetCount()-1.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometryTypeInfo.GetCount">
            <summary>
             Gets the count of geometry types in the list.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgGeometryTypeInfo.SetTypes(OSGeo.MapGuide.MgIntCollection)">
            <summary>
             Sets the geometry type value list.  Elements must be integers
             as defined by <see cref="T:OSGeo.MapGuide.MgGeometryType" />.
            </summary>
            <param name="types">
             (<see cref="T:OSGeo.MapGuide.MgIntCollection" />*) The collection of types. There must be no more than MG_MAX_GEOMETRY_TYPE_SIZE elements.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgGwsFeatureReader">
            <summary>
             Provides a forward-only, read-only iterator for reading data
             returned by a call to GwsQueryEngine.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgInsertFeatures">
            <summary>
             Creates an insert feature data command. You must add this
             command to an <see cref="T:OSGeo.MapGuide.MgFeatureCommandCollection" /> object and pass the
             latter in a call to <see cref="T:OSGeo.MapGuide.MgFeatureService" />::UpdateFeatures.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgInsertFeatures.#ctor(System.String,OSGeo.MapGuide.MgPropertyCollection)">
            <summary>
             Constructs an insert command containing one feature.
            </summary>
            <param name="className">
             (String/string) The name of the class in the feature source into which the collection of property values is to be inserted.
            </param>
            <param name="propertyValues">
             (<see cref="T:OSGeo.MapGuide.MgPropertyCollection" />) The collection of property values to be inserted into the feature source. &amp;lt;!-- Example (PHP) --&amp;gt;
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgInsertFeatures.#ctor(System.String,OSGeo.MapGuide.MgBatchPropertyCollection)">
            <summary>
             Constructs an insert command containing many features.
            </summary>
            <param name="className">
             (String/string) The name of the class in the schema definition in the feature source used to create the feature instances to be inserted.
            </param>
            <param name="propertyValueCollection">
             (<see cref="T:OSGeo.MapGuide.MgBatchPropertyCollection" />) The collection of property collections to be inserted into the feature source. Each collection contains the property values for one feature. &amp;lt;!-- Example (PHP) --&amp;gt;
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgInsertFeatures.GetCommandType">
            <summary>
             Gets the type of the command, that is,
             <see cref="T:OSGeo.MapGuide.MgFeatureCommandType" />::InsertFeatures.
            </summary>
            <returns> Returns <see cref="T:OSGeo.MapGuide.MgFeatureCommandType" />::InsertFeatures.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgInsertFeatures.GetPropertyValues">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <returns> Returns the collection of property values to be inserted.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgInsertFeatures.GetFeatureClassName">
            <summary>
             Gets the feature class name specified in the constructor.
            </summary>
            <returns> Returns the feature class name specified in the constructor.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgInt16Property">
            <summary>
             Stores Int16 data with an associated key name.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgInt16Property.#ctor(System.String,System.Int16)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgInt16Property" /> object.
            </summary>
            <param name="name">
             (String/string) The name of the property.
            </param>
            <param name="value">
             (short/int) The value of the property.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgInt16Property.GetValue">
            <summary>
             Gets the property value.
            </summary>
            <returns> Returns the property value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgInt16Property.GetPropertyType">
            <summary>
             Gets the property type.
            </summary>
            <returns> Returns the property type <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Int16.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgInt16Property.SetValue(System.Int16)">
            <summary>
             Sets the property value.
            </summary>
            <param name="value">
             (short/int) The value of the property.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgInt32Property">
            <summary>
             Stores Int32 data with an associated key name.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgInt32Property.#ctor(System.String,System.Int32)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgInt32Property" /> object.
            </summary>
            <param name="name">
             (String/string) The name of the property.
            </param>
            <param name="value">
             (int) The value of the property.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgInt32Property.GetValue">
            <summary>
             Gets the property value.
            </summary>
            <returns> Returns the property value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgInt32Property.GetPropertyType">
            <summary>
             Gets the property type.
            </summary>
            <returns> Returns the property type <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Int32.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgInt32Property.SetValue(System.Int32)">
            <summary>
             Sets the property value.
            </summary>
            <param name="value">
             (int) The value of the property.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgInt64Property">
            <summary>
             Stores Int64 data with an associated key name.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgInt64Property.#ctor(System.String,System.Int64)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgInt64Property" /> object.
            </summary>
            <param name="name">
             (String/string) The name of the property.
            </param>
            <param name="value">
             (long/string) The value of the property.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgInt64Property.GetValue">
            <summary>
             Gets the property value.
            </summary>
            <returns> Returns the property value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgInt64Property.GetPropertyType">
            <summary>
             Gets the property type.
            </summary>
            <returns> Returns the property type <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Int64.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgInt64Property.SetValue(System.Int64)">
            <summary>
             Sets the property value.
            </summary>
            <param name="value">
             (long/string) The value of the property.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgIntCollection">
            <summary>
             This class represents a collection of integers.  The integers are owned and managed by the collection.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgIntCollection.#ctor">
            <summary>
             Constructs a StringCollection.  Collection is initially empty.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgIntCollection.GetCount">
            <summary>
             Gets the number of items in the collection.
            </summary>
            <returns> Returns number of items in the collection.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgIntCollection.GetItem(System.Int32)">
            <summary>
             Gets the item in the collection at the specified index.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <returns> Returns the item in the collection at the specified index
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if index is out of range</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgIntCollection.SetItem(System.Int32,System.Int32)">
            <summary>
             Sets the item in the collection at the specified index to the specified value.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <param name="value">
             (int) Input value
            </param>
            <returns> Returns nothing
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if index is out of range</exception>
            <exception cref="T:OSGeo.MapGuide.MgDuplicateObjectException"> if it is duplicate</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgIntCollection.Add(System.Int32)">
            <summary>
             Adds the specified item to the end of the collection.
            </summary>
            <param name="value">
             (int) Input value
            </param>
            <returns> Returns nothing
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgDuplicateObjectException"> if it is duplicate</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgIntCollection.Insert(System.Int32,System.Int32)">
            <summary>
             Inserts the specified item at the specified index within the collection.
             Items following the insertion point are moved down to accommodate the new item.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <param name="value">
             (int) Input value
            </param>
            <returns> Returns nothing
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if index is out of range</exception>
            <exception cref="T:OSGeo.MapGuide.MgDuplicateObjectException"> if it is duplicate</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgIntCollection.Clear">
            <summary>
             Removes all items from the collection.
            </summary>
            <returns> Returns nothing
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgIntCollection.Remove(System.Int32)">
            <summary>
             Removes the specified item from the collection.
            </summary>
            <param name="value">
             (int) Input value
            </param>
            <returns> Returns true if removal was successful
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgIntCollection.RemoveAt(System.Int32)">
            <summary>
             Removes the specified item from the collection.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <returns> Returns nothing
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if index is out of range</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgIntCollection.Contains(System.Int32)">
            <summary>
             Returns true if the collection contains the specified item, false otherwise.
            </summary>
            <param name="value">
             (int) Input value
            </param>
            <returns> Returns true if the collection contains the specified item, false otherwise
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgIntCollection.IndexOf(System.Int32)">
            <summary>
             Returns the index of the specified item in the collection or -1 if the item does not exist.
            </summary>
            <param name="value">
             (int) Input value
            </param>
            <returns> Returns the index of the specified item in the collection or -1 if the item does not exist
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgIntCollection.ToXml">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Creates an XML document representing the collection.
             Order of properties in XML would be same as order of properties in collection.
             It starts with item zero to length of collection.
             TODO: Add a snippet of XML here?
            </summary>
            <returns> Pointer to an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgInvalidMapDefinitionException">
            <summary>
             Thrown when a map definition resource is invalid.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgInvalidMapDefinitionException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgInvalidMapDefinitionException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgInvalidRepositoryNameException">
            <summary>
             Thrown when a repository name is invalid.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgInvalidRepositoryNameException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgInvalidRepositoryNameException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException">
            <summary>
             Thrown when a repository type is invalid.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgInvalidRepositoryTypeException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgInvalidResourceDataNameException">
            <summary>
             Thrown when a resource data name is invalid.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgInvalidResourceDataNameException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgInvalidResourceDataNameException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgInvalidResourceDataTypeException">
            <summary>
             Thrown when a resource data type is invalid.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgInvalidResourceDataTypeException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgInvalidResourceDataTypeException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgInvalidResourceNameException">
            <summary>
             Thrown when a resource name is invalid.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgInvalidResourceNameException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgInvalidResourceNameException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgInvalidResourcePathException">
            <summary>
             Thrown when a resource path is invalid.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgInvalidResourcePathException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgInvalidResourcePathException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgInvalidResourcePreProcessingTypeException">
            <summary>
             Thrown when a resource pre-processing type is invalid.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgInvalidResourcePreProcessingTypeException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgInvalidResourcePreProcessingTypeException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgInvalidResourceTypeException">
            <summary>
             Thrown when a resource type is invalid.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgInvalidResourceTypeException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgLayerBase">
            <summary>
             Gets and sets properties of a layer.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.#ctor(OSGeo.MapGuide.MgResourceIdentifier,OSGeo.MapGuide.MgResourceService)">
            <summary>
             Creates an <see cref="T:OSGeo.MapGuide.MgLayerBase" /> object from a layer definition.
            </summary>
            <param name="layerDefinition">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Identifier of the layer definition in a repository.
            </param>
            <param name="resourceService">
             (<see cref="T:OSGeo.MapGuide.MgResourceService" />) An <see cref="T:OSGeo.MapGuide.MgResourceService" /> that can be used to retrieve the layer definition.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.GetName">
            <summary>
             Gets the name of the layer.
            </summary>
            <returns> Returns the name of the layer as a string.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.SetName(System.String)">
            <summary>
             Sets the name of the layer.
            </summary>
            <param name="name">
             (String/string) Layer name.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.GetObjectId">
            <summary>
             Gets a unique identifier for this layer.
            </summary>
            <returns> Returns the unique identifier of this map as a string.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.GetLayerType">
            <summary>
             Gets the type of the layer.
            </summary>
            <returns> Returns the type of the layer.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.GetGroup">
            <summary>
             Gets the group this layer is organized within.
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgLayerGroup" /> representing the parent group, or
              NULL if the layer does not belong to a group.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.SetGroup(OSGeo.MapGuide.MgLayerGroup)">
            <summary>
             Specifies which group this layer is organized within.
            </summary>
            <param name="group">
             (<see cref="T:OSGeo.MapGuide.MgLayerGroup" />) Group this layer is organized within, or NULL to have the layer not belong to any group.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.NeedsRefresh">
            <summary>
             Determines whether the data for this layer will be refreshed
             during the next map update.
            </summary>
            <returns> Returns true if the layer will be refreshed, or false
              otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.ForceRefresh">
            <summary>
             Forces the data for this layer to be refreshed during the
             next map update.
            </summary>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.GetVisible">
            <summary>
             Determines whether the layer is potentially visible.
            </summary>
            <returns> Returns true if the layer is potentially visible, or false
              otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.SetVisible(System.Boolean)">
            <summary>
             Sets the layer&apos;s potential visibility.
            </summary>
            <param name="visible">
             (boolean/bool) True if the layer should be visible, false otherwise.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.IsVisible">
            <summary>
             Returns the actual visibility of the layer.
            </summary>
            <returns> Returns true if the layer is actually visible, or false
              otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.GetSelectable">
            <summary>
             Determines whether features on the layer are selectable.
            </summary>
            <returns> Returns true if features are selectable on this layer, or
              false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.SetSelectable(System.Boolean)">
            <summary>
             Specifies whether features on the layer are selectable.
            </summary>
            <param name="selectable">
             (boolean/bool) True if features should be selectable on this layer, false otherwise.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.GetLayerDefinition">
            <summary>
             Gets the layer&apos;s definition.
            </summary>
            <returns> Returns the resource identifier of the layer&apos;s definition.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.SetLayerDefinition(OSGeo.MapGuide.MgResourceIdentifier,OSGeo.MapGuide.MgResourceService)">
            <summary>
             Sets the the layer definition for this layer.
            </summary>
            <param name="layerDefinition">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Identifier of the layer definition in a resource repository
            </param>
            <param name="resourceService">
             (<see cref="T:OSGeo.MapGuide.MgResourceService" />) An <see cref="T:OSGeo.MapGuide.MgResourceService" /> that can be used to retrieve the layer definition.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.GetDisplayInLegend">
            <summary>
             Determines whether an entry for the layer should appear in
             the legend.
            </summary>
            <returns> Returns true if the layer should appear in the legend, or
              false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.SetDisplayInLegend(System.Boolean)">
            <summary>
             Specifies whether an entry for the layer should appear in the
             legend.
            </summary>
            <param name="displayInLegend">
             (boolean/bool) True if the layer should appear in the legend, false otherwise.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.GetExpandInLegend">
            <summary>
             Determines whether the entry for the layer should initially
             be expanded in the legend, if possible.
            </summary>
            <returns> Returns true if the layer should initially be expanded in the legend, or
              false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.GetLegendLabel">
            <summary>
             Gets the label to be displayed for the layer in the legend.
            </summary>
            <returns> Returns the legend label as a string.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.SetLegendLabel(System.String)">
            <summary>
             Sets the label to be displayed for the layer in the legend.
            </summary>
            <param name="legendLabel">
             (String/string) Legend label string.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.GetFeatureSourceId">
            <summary>
             Gets the feature source associated with this layer
            </summary>
            <returns> Returns the feature source or an empty string if this layer is not a feature layer
              false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.GetFeatureClassName">
            <summary>
             Gets the feature class name associated with this layer
            </summary>
            <returns> Returns the feature class name or an empty string if this layer is not a feature layer
              false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.GetFilter">
            <summary>
             Gets the filter associated with this layer
            </summary>
            <returns> Returns the filter or an empty string if this layer is not a feature layer or doesn&apos;t have filter.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.GetFeatureGeometryName">
            <summary>
             Gets the geometry name associated with this layer which is part of
             class definition
            </summary>
            <returns> Returns the feature geometry name or an empty string if this layer is not a feature layer
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.GetClassDefinition">
            <summary>
             Gets the class definition for the feature class of the layer.  If the
             feature class of the layer is extended with properties from other feature
             classes, then all those properties are also contained in the returned
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgClassDefinition" /> instance for the feature class of the layer.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.SelectFeatures(OSGeo.MapGuide.MgFeatureQueryOptions)">
            <summary>
             Selects features from a feature source according to the
             criteria set in the <see cref="T:OSGeo.MapGuide.MgFeatureQueryOptions" /> argument The
             criteria are applied to all of the features in the feature
             source. If you want to apply the criteria to a subset of the
            </summary>
            <param name="options">
             (<see cref="T:OSGeo.MapGuide.MgFeatureQueryOptions" />) <see cref="T:OSGeo.MapGuide.MgFeatureQueryOptions" /> instance containing all required filters for this select operation.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgFeatureReader" /> containing the set of selected
              features.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.SelectFeatures(OSGeo.MapGuide.MgFeatureQueryOptions,System.String)">
            <summary>
             Selects features from a feature source according to the
             criteria set in the <see cref="T:OSGeo.MapGuide.MgFeatureQueryOptions" /> argument The
             criteria are applied to all of the features in the feature
             source. If you want to apply the criteria to a subset of the
            </summary>
            <param name="options">
             (<see cref="T:OSGeo.MapGuide.MgFeatureQueryOptions" />) <see cref="T:OSGeo.MapGuide.MgFeatureQueryOptions" /> instance containing all required filters for this select operation.
            </param>
            <param name="coordinateSystem">
             (String/string) The WKT string of the coordinate system to transform features to
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgFeatureReader" /> containing the set of selected
              features.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.SelectAggregate(OSGeo.MapGuide.MgFeatureAggregateOptions)">
            <summary>
             Selects groups of features from a feature source and applies
             filters to each of the groups according to the criteria set
             in the <see cref="T:OSGeo.MapGuide.MgFeatureAggregateOptions" /> argument. If you want to
             apply the criteria to all features without grouping them, use
            </summary>
            <param name="options">
             (<see cref="T:OSGeo.MapGuide.MgFeatureAggregateOptions" />) An <see cref="T:OSGeo.MapGuide.MgFeatureAggregateOptions" /> instance containing all the criteria and filters required for this select operation.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgDataReader" /> containing the group values.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.UpdateFeatures(OSGeo.MapGuide.MgFeatureCommandCollection)">
            <summary>
             Executes the <see cref="T:OSGeo.MapGuide.MgDeleteFeatures" />, <see cref="T:OSGeo.MapGuide.MgInsertFeatures" />,
             <see cref="T:OSGeo.MapGuide.MgUpdateFeatures" />, <see cref="!:OSGeo.MapGuide.MgLockFeatures" /> or <see cref="!:OSGeo.MapGuide.MgUnlockFeatures" /> commands
             contained in the given <see cref="T:OSGeo.MapGuide.MgFeatureCommandCollection" /> object.
            </summary>
            <param name="commands">
             (<see cref="T:OSGeo.MapGuide.MgFeatureCommandCollection" />) A collection of feature commands to be executed.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgPropertyCollection" /> object. Each property in the
              collection corresponds to a command in the
              <see cref="T:OSGeo.MapGuide.MgFeatureCommandCollection" /> argument. The property name is the
              index of the command in the feature command collection.
              &lt;ul&gt;
                &lt;li&gt;If the command is of type <see cref="T:OSGeo.MapGuide.MgDeleteFeatures" />, the property
                  type is an <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Int32, and its value is the number
                  of features deleted.&lt;/li&gt;
                &lt;li&gt;If the command is of type <see cref="T:OSGeo.MapGuide.MgInsertFeatures" />, the property
                  type is an <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Feature, and its value is a
                  <see cref="T:OSGeo.MapGuide.MgFeatureReader" /> object. The feature reader object contains
                  the set of properties inserted into the datastore by the
                  insert command.&lt;/li&gt;
                &lt;li&gt;If the command is of type <see cref="T:OSGeo.MapGuide.MgUpdateFeatures" />, the property
                  type is <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Int32, and its value is the number of
                  features updated.&lt;/li&gt;
                &lt;li&gt;If the command is of type <see cref="!:OSGeo.MapGuide.MgLockFeatures" />, the property
                  type is <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Feature, and its value is the number
                  of features locked.&lt;/li&gt;
                &lt;li&gt;If the command is of type <see cref="!:OSGeo.MapGuide.MgUnLockFeatures" />, the property
                  type is <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Int32, and its value is the number of
                  features unlocked.&lt;/li&gt;
              &lt;/ul&gt;
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.BeginTransaction">
            <summary>
             Starts a transaction on the this layer. The FDO provider indicated by the layer&apos;s
             Feature Source must support transactions.
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgTransaction" /> instance (or NULL).
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.UpdateFeatures(OSGeo.MapGuide.MgFeatureCommandCollection,OSGeo.MapGuide.MgTransaction)">
            <summary>
             Executes the <see cref="T:OSGeo.MapGuide.MgDeleteFeatures" />, <see cref="T:OSGeo.MapGuide.MgInsertFeatures" />,
             <see cref="T:OSGeo.MapGuide.MgUpdateFeatures" />, <see cref="!:OSGeo.MapGuide.MgLockFeatures" /> or <see cref="!:OSGeo.MapGuide.MgUnlockFeatures" /> commands
             contained in the given <see cref="T:OSGeo.MapGuide.MgFeatureCommandCollection" /> object.
            </summary>
            <param name="commands">
             (<see cref="T:OSGeo.MapGuide.MgFeatureCommandCollection" />) A collection of feature commands to be executed.
            </param>
            <param name="transaction">
             (<see cref="T:OSGeo.MapGuide.MgTransaction" />) An optional transaction to execute this operation under
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgPropertyCollection" /> object. Each property in the
              collection corresponds to a command in the
              <see cref="T:OSGeo.MapGuide.MgFeatureCommandCollection" /> argument. The property name is the
              index of the command in the feature command collection.
              &lt;ul&gt;
                &lt;li&gt;If the command is of type <see cref="T:OSGeo.MapGuide.MgDeleteFeatures" />, the property
                  type is an <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Int32, and its value is the number
                  of features deleted.&lt;/li&gt;
                &lt;li&gt;If the command is of type <see cref="T:OSGeo.MapGuide.MgInsertFeatures" />, the property
                  type is an <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Feature, and its value is a
                  <see cref="T:OSGeo.MapGuide.MgFeatureReader" /> object. The feature reader object contains
                  the set of properties inserted into the datastore by the
                  insert command.&lt;/li&gt;
                &lt;li&gt;If the command is of type <see cref="T:OSGeo.MapGuide.MgUpdateFeatures" />, the property
                  type is <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Int32, and its value is the number of
                  features updated.&lt;/li&gt;
                &lt;li&gt;If the command is of type <see cref="!:OSGeo.MapGuide.MgLockFeatures" />, the property
                  type is <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Feature, and its value is the number
                  of features locked.&lt;/li&gt;
                &lt;li&gt;If the command is of type <see cref="!:OSGeo.MapGuide.MgUnLockFeatures" />, the property
                  type is <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Int32, and its value is the number of
                  features unlocked.&lt;/li&gt;
              &lt;/ul&gt;
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.InsertFeatures(OSGeo.MapGuide.MgPropertyCollection,OSGeo.MapGuide.MgTransaction)">
            <summary>
             Inserts a new feature into the specified feature class of the specified Feature Source
            </summary>
            <param name="properties">
             (<see cref="T:OSGeo.MapGuide.MgPropertyCollection" />) The collection of property values to insert
            </param>
            <param name="transaction">
             (<see cref="T:OSGeo.MapGuide.MgTransaction" />) An optional transaction to execute this operation under
            </param>
            <returns> Returns a feature reader object that contains the set of properties
              inserted into the datastore by the insert command.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.InsertFeatures(OSGeo.MapGuide.MgBatchPropertyCollection,OSGeo.MapGuide.MgTransaction)">
            <summary>
             Inserts a set of new features into the specified feature class of the specified Feature Source
            </summary>
            <param name="properties">
             (<see cref="T:OSGeo.MapGuide.MgBatchPropertyCollection" />) The collection of property values to insert. Each <see cref="T:OSGeo.MapGuide.MgPropertyCollection" /> within this collection represents property values for a single feature to insert
            </param>
            <param name="transaction">
             (<see cref="T:OSGeo.MapGuide.MgTransaction" />) An optional transaction to execute this operation under
            </param>
            <returns> Returns a feature reader object that contains the set of properties
              inserted into the datastore by the insert command.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.UpdateMatchingFeatures(OSGeo.MapGuide.MgPropertyCollection,System.String,OSGeo.MapGuide.MgTransaction)">
            <summary>
             Updates all features that match the given filter with the specified property values
            </summary>
            <param name="properties">
             (<see cref="T:OSGeo.MapGuide.MgBatchPropertyCollection" />) The property values to update matching features with
            </param>
            <param name="filter">
             (String/string) The FDO filter string that detemines what features will be updated
            </param>
            <param name="transaction">
             (<see cref="T:OSGeo.MapGuide.MgTransaction" />) An optional transaction to execute this operation under
            </param>
            <returns> Returns the number of features updated by this operation
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.DeleteFeatures(System.String,OSGeo.MapGuide.MgTransaction)">
            <summary>
             Deletes all features that match the given filter
            </summary>
            <param name="filter">
             (String/string) The FDO filter string that detemines what features will be deleted
            </param>
            <param name="transaction">
             (<see cref="T:OSGeo.MapGuide.MgTransaction" />) An optional transaction to execute this operation under
            </param>
            <returns> Returns the number of features deleted by this operation
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerBase.GetSpatialContexts(System.Boolean)">
            <summary>
             Gets all of the spatial contexts available in the layer or just the active one
            </summary>
            <param name="bActiveOnly">
             (boolean/bool) This flag is obsolete and no longer used.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgSpatialContextReader" /> object.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgFeatureServiceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidOperationException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"></exception>
        </member>
        <member name="T:OSGeo.MapGuide.MgLayerCollection">
            <summary>
             Manipulates collections of <see cref="T:OSGeo.MapGuide.MgLayerBase" /> objects.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerCollection.GetCount">
            <summary>
             Gets the number of layers in the collection.
            </summary>
            <returns> Returns the number of layers.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerCollection.GetItem(System.Int32)">
            <summary>
             Gets the layer at the specified index.
            </summary>
            <param name="index">
             (int) Index of the layer to get.
            </param>
            <returns> Returns the layer.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the specified index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerCollection.GetItem(System.String)">
            <summary>
             Returns the layer with the specified name.
            </summary>
            <param name="name">
             (String/string) Name of the layer to get.
            </param>
            <returns> Returns the layer.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgObjectNotFoundException"> if the name does not exist.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerCollection.SetItem(System.Int32,OSGeo.MapGuide.MgLayerBase)">
            <summary>
             Sets the layer in the collection at the specified index to
             the specified value.
            </summary>
            <param name="index">
             (int) Position in the collection to set the layer.
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgLayerBase" />) <see cref="T:OSGeo.MapGuide.MgLayerBase" /> to be set in the collection.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the specified index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerCollection.Add(OSGeo.MapGuide.MgLayerBase)">
            <summary>
             Adds a layer to the end of the collection.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgLayerBase" />) Layer to be added.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerCollection.Insert(System.Int32,OSGeo.MapGuide.MgLayerBase)">
            <summary>
             Inserts a layer at a specified location in the collection.
            </summary>
            <param name="index">
             (int) Position in the collection to insert the layer.
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgLayerBase" />) Layer to be inserted in the collection.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the specified index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerCollection.Clear">
            <summary>
             Removes all layers from the collection.
            </summary>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerCollection.Remove(OSGeo.MapGuide.MgLayerBase)">
            <summary>
             Removes a layer from the collection.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgLayerBase" />) Layer to be removed.
            </param>
            <returns> Returns true if removal was successful.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerCollection.RemoveAt(System.Int32)">
            <summary>
             Removes a layer from the collection at the specified index.
            </summary>
            <param name="index">
             (int) Index of the layer to be removed.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the specified index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerCollection.Contains(System.String)">
            <summary>
             Determines if the collection contains the specified layer.
            </summary>
            <param name="name">
             (String/string) Name of the layer to search for.
            </param>
            <returns> Returns true if the collection contains the specified item,
              or false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerCollection.Contains(OSGeo.MapGuide.MgLayerBase)">
            <summary>
             Determines if the collection contains the specified layer.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgLayerBase" />) <see cref="T:OSGeo.MapGuide.MgLayerBase" /> to search for.
            </param>
            <returns> Returns true if the collection contains the specified item,
              or false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerCollection.IndexOf(System.String)">
            <summary>
             Gets the index of the specified layer in the collection.
            </summary>
            <param name="name">
             (String/string) Name of the layer to search for.
            </param>
            <returns> Returns the layer&apos;s index if the collection contains the
              specified layer, or false (-1) otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerCollection.IndexOf(OSGeo.MapGuide.MgLayerBase)">
            <summary>
             Gets the index of the specified layer in the collection.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgLayerBase" />) <see cref="T:OSGeo.MapGuide.MgLayerBase" /> to search for.
            </param>
            <returns> Returns the layer&apos;s index if the collection contains the
              specified layer, or false (-1) otherwise.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgLayerGroup">
            <summary>
             Manipulates the properties of a layer group.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroup.#ctor(System.String)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgLayerGroup" /> object with the specified name.
            </summary>
            <param name="name">
             (String/string) Name of the group
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroup.GetName">
            <summary>
             Gets the group name.
            </summary>
            <returns> Returns the group name as a string.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroup.GetObjectId">
            <summary>
             Gets a unique identifier for this layer group.
            </summary>
            <returns> Returns the unique identifier as a string.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroup.GetLayerGroupType">
            <summary>
             Gets the type of the layer group.
            </summary>
            <returns> Returns the type of the layer group.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroup.GetGroup">
            <summary>
             Gets the group this group is organized within.
            </summary>
            <returns> Returns the parent group, or NULL if the group is at the top
              level of the hierarchy.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroup.SetGroup(OSGeo.MapGuide.MgLayerGroup)">
            <summary>
             Changes the group this group is organized within.
            </summary>
            <param name="group">
             (<see cref="T:OSGeo.MapGuide.MgLayerGroup" />) Group for this group to belong to, or NULL if the group should not belong to any group.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroup.GetVisible">
            <summary>
             Determines if the layer group is potentially visible.
            </summary>
            <returns> Returns true if the layer group is potentially visible, or
              false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroup.SetVisible(System.Boolean)">
            <summary>
             Alters the group potential visibility.
            </summary>
            <param name="visible">
             (boolean/bool) True if the group should be visible, or false otherwise.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroup.IsVisible">
            <summary>
             Determines the actual visibility of the group.
            </summary>
            <returns> Returns true if the layer group is visible, or false
              otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroup.GetDisplayInLegend">
            <summary>
             Determines whether an entry for the group should appear in
             the legend.
            </summary>
            <returns> Returns true if the group should appear in the legend, or
              false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroup.SetDisplayInLegend(System.Boolean)">
            <summary>
             Specifies whether an entry for the group should appear in the
             legend.
            </summary>
            <param name="displayInLegend">
             (boolean/bool) True if the group should appear in the legend, or false otherwise.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroup.GetExpandInLegend">
            <summary>
             Determines whether the entry for the group should initially
             be expanded in the legend, if possible.
            </summary>
            <returns> Returns true if the group should initially be expanded in the legend, or
              false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroup.GetLegendLabel">
            <summary>
             Gets the label to be displayed for the group in the legend.
            </summary>
            <returns> Returns the legend label as a string.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroup.SetLegendLabel(System.String)">
            <summary>
             Sets the label to be displayed for the group in the legend.
            </summary>
            <param name="legendLabel">
             (String/string) Legend label.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroup.SetExpandInLegend(System.Boolean)">
            <summary>
             Specifies whether the entry for the group should initially
             be expanded in the legend, if possible.
            </summary>
            <param name="expandInLegend">
             (boolean/bool) Indicates whether this group is expanded in the legend
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgLayerGroupCollection">
            <summary>
             Manipulates collections of <see cref="T:OSGeo.MapGuide.MgLayerGroup" /> objects.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroupCollection.GetCount">
            <summary>
             Gets the number of layer groups in the collection.
            </summary>
            <returns> Returns the number of layer groups.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroupCollection.GetItem(System.Int32)">
            <summary>
             Gets the layer group at the specified index.
            </summary>
            <param name="index">
             (int) Index of the layer group to get.
            </param>
            <returns> Returns the layer group.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the specified index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroupCollection.GetItem(System.String)">
            <summary>
             Returns the layer group with the specified name.
            </summary>
            <param name="name">
             (String/string) Name of the layer group to get.
            </param>
            <returns> Returns the layer group.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgObjectNotFoundException"> if the name does not exist.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroupCollection.SetItem(System.Int32,OSGeo.MapGuide.MgLayerGroup)">
            <summary>
             Sets the layer group in the collection at the specified index to
             the specified value.
            </summary>
            <param name="index">
             (int) Position in the collection to set the layer group.
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgLayerGroup" />) <see cref="T:OSGeo.MapGuide.MgLayerGroup" /> to be set in the collection.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the specified index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroupCollection.Add(OSGeo.MapGuide.MgLayerGroup)">
            <summary>
             Adds a layer group to the end of the collection.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgLayerGroup" />) Layer group to be added.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroupCollection.Insert(System.Int32,OSGeo.MapGuide.MgLayerGroup)">
            <summary>
             Inserts a layer group at a specified location in the collection.
            </summary>
            <param name="index">
             (int) Position in the collection to insert the layer group.
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgLayerGroup" />) Layer group to be inserted in the collection.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the specified index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroupCollection.Clear">
            <summary>
             Removes all layer groups from the collection.
            </summary>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroupCollection.Remove(OSGeo.MapGuide.MgLayerGroup)">
            <summary>
             Removes a layer group from the collection.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgLayerGroup" />) Layer group to be removed.
            </param>
            <returns> Returns true if removal was successful.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroupCollection.RemoveAt(System.Int32)">
            <summary>
             Removes a layer group from the collection at the specified index.
            </summary>
            <param name="index">
             (int) Index of the layer group to be removed.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the specified index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroupCollection.Contains(System.String)">
            <summary>
             Determines if the collection contains the specified layer group.
            </summary>
            <param name="name">
             (String/string) Name of the layer group to search for.
            </param>
            <returns> Returns true if the collection contains the specified item,
              or false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroupCollection.Contains(OSGeo.MapGuide.MgLayerGroup)">
            <summary>
             Determines if the collection contains the specified layer group.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgLayerGroup" />) <see cref="T:OSGeo.MapGuide.MgLayerGroup" /> to search for.
            </param>
            <returns> Returns true if the collection contains the specified item,
              or false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroupCollection.IndexOf(System.String)">
            <summary>
             Gets the index of the specified layer group in the collection.
            </summary>
            <param name="name">
             (String/string) Name of the layer group to search for.
            </param>
            <returns> Returns the layer group&apos;s index if the collection contains the
              specified layer group, or false (-1) otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerGroupCollection.IndexOf(OSGeo.MapGuide.MgLayerGroup)">
            <summary>
             Gets the index of the specified layer group in the collection.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgLayerBase" />) <see cref="T:OSGeo.MapGuide.MgLayerGroup" /> to search for.
            </param>
            <returns> Returns the layer group&apos;s index if the collection contains the
              specified layer group, or false (-1) otherwise.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgLayerNotFoundException">
            <summary>
             Thrown when a requested layer cannot be found or does not exist.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgLayerNotFoundException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgLayerNotFoundException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgLongTransactionReader">
            <summary>
             Provides forward-only, read-only functionality for describing
             a set of long transactions that exist in the feature source.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgLongTransactionReader.GetName">
            <summary>
             Gets the name of the long transaction currently being read.
            </summary>
            <returns> Returns the name of the long transaction.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLongTransactionReader.GetDescription">
            <summary>
             Gets the description of the long transaction currently being
             read.
            </summary>
            <returns> Returns the description of the long transaction.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLongTransactionReader.GetChildren">
            <summary>
             Provides access to the direct descendant long transactions
             for the long transaction being currently read.
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgLongTransactionReader" /> instance containing the
              direct descendants for the long transaction currently being
              read.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLongTransactionReader.GetParents">
            <summary>
             Provides access to the direct ascendant long transactions for
             the long transaction being currently read.
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgLongTransactionReader" /> instance containing the
              direct ascendants for the long transaction currently being
              read.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLongTransactionReader.GetOwner">
            <summary>
             Gets the owner of the long transaction currently being read.
            </summary>
            <returns> Returns the owner name.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLongTransactionReader.GetCreationDate">
            <summary>
             Gets the creation date of the long transaction currently
             being read.
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgDateTime" /> object containing the date when the
              long transaction was created.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLongTransactionReader.IsActive">
            <summary>
             Specifies whether the long transaction currently being read
             is the active long transaction.
            </summary>
            <returns> Returns true if the long transaction is active; otherwise
              returns false.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLongTransactionReader.IsFrozen">
            <summary>
             Specifies whether the long transaction currently being read
             is frozen.
            </summary>
            <returns> Returns true if the long transaction is frozen; otherwise
              returns false.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLongTransactionReader.ReadNext">
            <summary>
             Advances the reader to the next long transaction.
            </summary>
            <returns> Returns true if there is a next item.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLongTransactionReader.Close">
            <summary>
             Closes the <see cref="T:OSGeo.MapGuide.MgLongTransactionReader" /> object, freeing any
             resources it may be holding.
            </summary>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgLongTransactionReader.ToXml">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Serializes the long transactions in the reader to XML whose structure
             is governed by the FdoLongTransactionList schema.
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object containing the contents of
              the long transaction reader in XML format.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgMapBase">
            <summary>
             Defines the runtime state of a map.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.#ctor">
            <summary>
             Constructs an empty un-initialized <see cref="T:OSGeo.MapGuide.MgMapBase" /> object.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.GetName">
            <summary>
             Gets the name of this map.
            </summary>
            <returns> Returns the name of the map as a string.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.GetSessionId">
            <summary>
             Gets the identifier of the session associated with this map.
            </summary>
            <returns> Returns the session id of the map as a string.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.GetObjectId">
            <summary>
             Gets an identifier that can be used to uniquely identify this
             map.
            </summary>
            <returns> Returns the unique identifier of this map as a string.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.GetMapDefinition">
            <summary>
             Returns the resource identifier that specifies the location
             of the map definition that was used to create this map.
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgResourceIdentifier" /> that specifies the location
              of the map definition. NULL is returned if this map was created
              from a Tile Set Definition
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.GetMapSRS">
            <summary>
             Gets the spatial reference system used to display this map.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.GetMapExtent">
            <summary>
             Returns the the overall extent of the map.
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgEnvelope" /> that defines the overall extent of the
              map.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.GetLayers">
            <summary>
             Returns this map&apos;s layers.
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgLayerCollection" /> that contains the map layers.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.GetLayerGroups">
            <summary>
             Returns this map&apos;s layer groups.
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgLayerGroupCollection" /> that contains the map
              layer groups.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.Create(OSGeo.MapGuide.MgResourceService,OSGeo.MapGuide.MgResourceIdentifier,System.String)">
            <summary>
             Initializes a new <see cref="T:OSGeo.MapGuide.MgMapBase" /> object given a resource service, map
             definition, and a name for the map. This method is used for
             MapGuide Viewers or for offline map production.
            </summary>
            <param name="resourceService">
             An <see cref="T:OSGeo.MapGuide.MgResourceService" /> that can be used to retrieve the map definition.
            </param>
            <param name="mapDefinition">
             An <see cref="T:OSGeo.MapGuide.MgResourceIdentifier" /> that specifies the location of the map definition in a resource repository.
            </param>
            <param name="mapName">
             A string that specifies the name of the map.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.Create(System.String,OSGeo.MapGuide.MgEnvelope,System.String)">
            <summary>
             Initializes a new <see cref="T:OSGeo.MapGuide.MgMapBase" /> object given a spatial reference system,
             spatial extent of the map, and a name for the map. This method
             is used for the WMS service implementation and creates a map
             without any layers.
            </summary>
            <param name="mapSRS">
             A string specifying the spatial reference system in OpenGIS WKT format.
            </param>
            <param name="mapExtent">
             An <see cref="T:OSGeo.MapGuide.MgEnvelope" /> defining the overall extent of the map.
            </param>
            <param name="mapName">
             A string that specifies the name of the map.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.Open(OSGeo.MapGuide.MgResourceService,System.String)">
            <summary>
             Loads the map object from a session repository.
            </summary>
            <param name="resourceService">
             An <see cref="T:OSGeo.MapGuide.MgResourceService" /> that can be used to retrieve the map.
            </param>
            <param name="mapName">
             A string that specifies the name of the map. This
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.GetViewCenter">
            <summary>
             Gets the current center point of the map, in the spatial
             reference system of the map.
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgPoint" /> that specifies the center of the map.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.GetViewScale">
            <summary>
             Gets the current scale of the map.
            </summary>
            <returns> Returns a double that specifies the scale of the map.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.GetDataExtent">
            <summary>
             Returns the extent of the data to be generated for the map
             in the spatial reference system of the map.
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgEnvelope" /> that defines the current data extent.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.GetDisplayDpi">
            <summary>
             Returns the number of dots per inch of the map display.
            </summary>
            <returns> Returns the number of dots per inch of the map display.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.SetDisplayDpi(System.Int32)">
            <summary>
             Sets the number of dots per inch of the map display.
            </summary>
            <param name="dpi">
             (int) Number of dots per inch of the map display
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.GetDisplayWidth">
            <summary>
             Returns the current width of the map display in pixels.
            </summary>
            <returns> Returns the width of the map display in pixels.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.GetDisplayHeight">
            <summary>
             Returns the current height of the map display in pixels.
            </summary>
            <returns> Returns the height of the map display in pixels.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.GetFiniteDisplayScaleCount">
            <summary>
             Gets the number of finite display scales in the map.
            </summary>
            <returns> Returns the number of finite display scales in the map.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.GetFiniteDisplayScaleAt(System.Int32)">
            <summary>
             Gets the finite display scale at the specified index.
            </summary>
            <param name="index">
             Index of the finite display scale to get.
            </param>
            <returns> Returns the finite display scale.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgOutOfRangeException"> if the index is invalid.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapBase.GetBackgroundColor">
            <summary>
             Returns the background color for the map
            </summary>
            <returns> Background color.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgMapCollection">
            <summary>
             Manipulates collections of <see cref="T:OSGeo.MapGuide.MgMapBase" /> objects.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapCollection.GetCount">
            <summary>
             Gets the number of map in the collection.
            </summary>
            <returns> Returns the number of maps.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapCollection.GetItem(System.Int32)">
            <summary>
             Gets the map at the specified index.
            </summary>
            <param name="index">
             (int) Index of the map to get.
            </param>
            <returns> Returns the specified <see cref="T:OSGeo.MapGuide.MgMapBase" /> object.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgOutOfRangeException"> if the index is invalid.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapCollection.GetItem(System.String)">
            <summary>
             Gets the map with the specified name.
            </summary>
            <param name="name">
             (String/string) Name of the map to get.
            </param>
            <returns> Returns the specified <see cref="T:OSGeo.MapGuide.MgMapBase" /> object.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"> if the name does not exist in</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapCollection.SetItem(System.Int32,OSGeo.MapGuide.MgMapBase)">
            <summary>
             Sets the map in the collection at the specified index to a
             specified value.
            </summary>
            <param name="index">
             (int) Position in the collection to set the <see cref="T:OSGeo.MapGuide.MgMapBase" />.
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgMapBase" />) <see cref="T:OSGeo.MapGuide.MgMapBase" /> to be set in the collection.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgOutOfRangeException"> if the index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapCollection.Add(OSGeo.MapGuide.MgMapBase)">
            <summary>
             Adds the specified map to the end of the collection.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgMapBase" />) <see cref="T:OSGeo.MapGuide.MgMapBase" /> to be added to the collection.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapCollection.Insert(System.Int32,OSGeo.MapGuide.MgMapBase)">
            <summary>
             Inserts a map at a specified index within the collection.
            </summary>
            <param name="index">
             (int) Position in the collection to insert the <see cref="T:OSGeo.MapGuide.MgMapBase" />.
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgMapBase" />) <see cref="T:OSGeo.MapGuide.MgMapBase" /> to be inserted in the collection.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgOutOfRangeException"> if the specified index is out of</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapCollection.Clear">
            <summary>
             Removes all maps from the collection.
            </summary>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapCollection.Remove(OSGeo.MapGuide.MgMapBase)">
            <summary>
             Removes a map from the collection.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgMapBase" />) <see cref="T:OSGeo.MapGuide.MgMapBase" /> to be removed
            </param>
            <returns> Returns true if removal was successful.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapCollection.RemoveAt(System.Int32)">
            <summary>
             Removes a map from the collection at the specified index.
            </summary>
            <param name="index">
             (int) Index of the map to be removed.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgOutOfRangeException"> if the map does not exist in the</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapCollection.Contains(System.String)">
            <summary>
             Determines if the collection contains the specified map.
            </summary>
            <param name="name">
             (String/string) Name of the map.
            </param>
            <returns> Returns true if the collection contains the specified map,
              or false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapCollection.Contains(OSGeo.MapGuide.MgMapBase)">
            <summary>
             Determines if the collection contains the specified map.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgMapBase" />) The <see cref="T:OSGeo.MapGuide.MgMapBase" /> to look for.
            </param>
            <returns> Returns true if the collection contains the specified map,
              or false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapCollection.IndexOf(System.String)">
            <summary>
             Gets the index of the specified map in the collection.
            </summary>
            <param name="name">
             (String/string) Name of the map to get the index of.
            </param>
            <returns> Returns the map&apos;s index if the collection contains the
              specified map, or false (-1) otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapCollection.IndexOf(OSGeo.MapGuide.MgMapBase)">
            <summary>
             Gets the index of the specified map in the collection.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgMapBase" />) Value of the item to get the index of.
            </param>
            <returns> Returns the map&apos;s index if the collection contains the
              specified map, or false (-1) otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgMapCollection.#ctor">
            <summary>
             Constructs an empty <see cref="T:OSGeo.MapGuide.MgMapCollection" /> object.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgObjectPropertyDefinition">
            <summary>
             Defines a feature property which contains one or more objects
             whose type is a feature class. If there is more than one
             object, an identity property is defined that is used to
             select an object from the collection.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgObjectPropertyDefinition.#ctor(System.String)">
            <summary>
             Constructs a <see cref="T:OSGeo.MapGuide.MgObjectPropertyDefinition" /> object.
            </summary>
            <param name="name">
             (String/string) The name of the property.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgObjectPropertyDefinition.GetClassDefinition">
            <summary>
             Gets an <see cref="T:OSGeo.MapGuide.MgClassDefinition" /> object that defines the type of
             this property.
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgClassDefinition" /> object.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgObjectPropertyDefinition.GetObjectType">
            <summary>
             Gets the type of this object property (value, collection, or
             ordered collection).
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgObjectPropertyType" /> value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgObjectPropertyDefinition.GetOrderType">
            <summary>
             Gets the <see cref="T:OSGeo.MapGuide.MgOrderingOption" /> value (ascending or descending) for
             this object property.
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgOrderingOption" /> value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgObjectPropertyDefinition.GetIdentityProperty">
            <summary>
             Gets an <see cref="T:OSGeo.MapGuide.MgDataPropertyDefinition" /> object that defines the
             property used to identify an object property uniquely.
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgDataPropertyDefinition" /> object if the type of
              the object property is <see cref="T:OSGeo.MapGuide.MgObjectPropertyType" />::Collection or
              <see cref="T:OSGeo.MapGuide.MgObjectPropertyType" />::OrderedCollection.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgObjectPropertyDefinition.SetClassDefinition(OSGeo.MapGuide.MgClassDefinition)">
            <summary>
             Sets a reference to the <see cref="T:OSGeo.MapGuide.MgClassDefinition" /> that defines the
             type of this property.
            </summary>
            <param name="classDef">
             (<see cref="T:OSGeo.MapGuide.MgClassDefinition" />) The class definition used to create the object or objects that constitute the property.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgObjectPropertyDefinition.SetObjectType(System.Int32)">
            <summary>
             Sets the <see cref="T:OSGeo.MapGuide.MgObjectPropertyType" /> type (either value, collection,
             or ordered collection) of this object property.
            </summary>
            <param name="objType">
             (int) The <see cref="T:OSGeo.MapGuide.MgObjectPropertyType" /> type of this object property.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgObjectPropertyDefinition.SetOrderType(System.Int32)">
            <summary>
             Sets the <see cref="T:OSGeo.MapGuide.MgOrderingOption" /> type (either ascending or
             descending) for this object property.
            </summary>
            <param name="orderType">
             (int) The ordering option type of this object property.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgObjectPropertyDefinition.SetIdentityProperty(OSGeo.MapGuide.MgDataPropertyDefinition)">
            <summary>
             Sets a reference to an <see cref="T:OSGeo.MapGuide.MgDataPropertyDefinition" /> used to
             create the identity properties that uniquely identify the
             objects that constitute the object property.
            </summary>
            <param name="propDef">
             (<see cref="T:OSGeo.MapGuide.MgDataPropertyDefinition" />) The data property definition used to create the identity properties for the object collection in this object property.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgParameter">
            <summary>
             The <see cref="T:OSGeo.MapGuide.MgParameter" /> class specifies a value for a particular parameter.
             Instances of this class are used to specify a value to bind to a
             parameter when a command is executed. Typically, it is used to bind
             parameters to the SQL command.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameter.#ctor(OSGeo.MapGuide.MgNullableProperty)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgParameter" /> object. The default parameter direction
             is input.
            </summary>
            <param name="prop">
             (<see cref="T:OSGeo.MapGuide.MgNullableProperty" />) An <see cref="T:OSGeo.MapGuide.MgNullableProperty" /> instance which contains the name and value of the parameter.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameter.#ctor(OSGeo.MapGuide.MgNullableProperty,System.Int32)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgParameter" /> object with the specified parameter
             name, value, and direction.
            </summary>
            <param name="prop">
             (<see cref="T:OSGeo.MapGuide.MgNullableProperty" />) An <see cref="T:OSGeo.MapGuide.MgNullableProperty" /> instance which contains the name and value of the parameter.
            </param>
            <param name="direction">
             (int) The function direction of the parameter value.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameter.SetProperty(OSGeo.MapGuide.MgNullableProperty)">
            <summary>
             Sets the name and value of the parameter.
            </summary>
            <param name="prop">
             (<see cref="T:OSGeo.MapGuide.MgNullableProperty" />) Input an <see cref="T:OSGeo.MapGuide.MgNullableProperty" /> instance which contains the name and value of the parameter.
            </param>
            <returns> Returns nothing
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameter.GetProperty">
            <summary>
             Gets the name and value of the parameter.
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgNullableProperty" /> instance which contains
              the name and value of the parameter.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameter.SetDirection(System.Int32)">
            <summary>
             Sets the function direction of the parameter value, which
             is defined in <see cref="T:OSGeo.MapGuide.MgParameterDirection" />.
            </summary>
            <param name="value">
             Input the direction value.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameter.GetDirection">
            <summary>
             Gets the function direction value of the the command parameter, which
             is defined in <see cref="T:OSGeo.MapGuide.MgParameterDirection" />.
            </summary>
            <returns> Returns the direction value defined in <see cref="T:OSGeo.MapGuide.MgParameterDirection" />.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameter.GetName">
            <summary>
             Gets the parameter name.
            </summary>
            <returns> Returns the parameter name.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameter.SetName(System.String)">
            <summary>
             Sets the parameter name.
            </summary>
            <param name="name">
             (String/string) The name of parameter.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgParameterCollection">
            <summary>
             <see cref="T:OSGeo.MapGuide.MgParameterCollection" /> represents a collection of parameters.
             All parameters contained in an instance of a parameter
             collection are objects whose base class is <see cref="T:OSGeo.MapGuide.MgParameter" />.
             A call to a parameter object&apos;s GetType() method returns one
             of the integer constants defined in class <see cref="T:OSGeo.MapGuide.MgPropertyType" />.
             This collection does not allow duplicate key names.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameterCollection.#ctor">
            <summary>
             Constructs a <see cref="T:OSGeo.MapGuide.MgParameterCollection" />.
             The collection is initially empty.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameterCollection.SetItem(System.Int32,OSGeo.MapGuide.MgParameter)">
            <summary>
             Sets the item in the collection at the specified index to the specified value.
            </summary>
            <param name="index">
             (int) Input index.
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgParameter" />) Input value.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the index is out of range.</exception>
            <exception cref="T:OSGeo.MapGuide.MgDuplicateObjectException"> if it is a duplicate.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameterCollection.Add(OSGeo.MapGuide.MgParameter)">
            <summary>
             Adds the specified item to the end of the collection.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgParameter" />) Input value.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgDuplicateObjectException"> if the index is a duplicate.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameterCollection.Insert(System.Int32,OSGeo.MapGuide.MgParameter)">
            <summary>
             Inserts the specified item at the specified index within the collection.
             Items following the insertion point are moved down to accommodate the new item.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgParameter" />) Input value.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the index is out of range.</exception>
            <exception cref="T:OSGeo.MapGuide.MgDuplicateObjectException"> if it is a duplicate.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameterCollection.Remove(OSGeo.MapGuide.MgParameter)">
            <summary>
             Removes the specified item from the collection.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgParameter" />) Input value.
            </param>
            <returns> Returns true if removal was successful.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameterCollection.GetItem(System.Int32)">
            <summary>
             Gets the item in the collection at the specified index.
            </summary>
            <param name="index">
             (int) Input index.
            </param>
            <returns> Returns the item in the collection at the specified index.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameterCollection.GetCount">
            <summary>
             Gets the number of items in the collection.
            </summary>
            <returns> Returns the number of items in the collection.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameterCollection.Clear">
            <summary>
             Removes all items from the collection.
            </summary>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameterCollection.RemoveAt(System.Int32)">
            <summary>
             Removes the specified item from the collection.
            </summary>
            <param name="index">
             (int) Input index.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameterCollection.Contains(OSGeo.MapGuide.MgParameter)">
            <summary>
             Returns true if the collection contains the specified item, false otherwise.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgParameter" />) Input value.
            </param>
            <returns> Returns true if the collection contains the specified item, false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameterCollection.IndexOf(OSGeo.MapGuide.MgParameter)">
            <summary>
             Returns the index of the specified item in the collection or -1 if the item does not exist.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgParameter" />) Input value.
            </param>
            <returns> Returns the index of the specified item in the collection or -1 if the item does not exist.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgParameterCollection.ToXml">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Creates an XML document representing the collection.
            </summary>
            <returns> A pointer to an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgPropertyDefinitionCollection">
            <summary>
             This class contains property definitions for a feature class and makes up a
             portion of the complete feature class definition.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgPropertyDefinitionCollection.#ctor">
            <summary>
             Constructs a PropertyDefinitionCollection.  Collection is initially empty.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgPropertyDefinitionCollection.SetItem(System.Int32,OSGeo.MapGuide.MgPropertyDefinition)">
            <summary>
             Sets the item in the collection at the specified index to the specified value.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgPropertyDefinition" />) Input value
            </param>
            <returns> Returns nothing
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if index is out of range</exception>
            <exception cref="T:OSGeo.MapGuide.MgDuplicateObjectException"> if it is duplicate</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgPropertyDefinitionCollection.Add(OSGeo.MapGuide.MgPropertyDefinition)">
            <summary>
             Adds the specified item to the end of the collection.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgPropertyDefinition" />) Input value
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgDuplicateObjectException"> if it is duplicate</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgPropertyDefinitionCollection.Insert(System.Int32,OSGeo.MapGuide.MgPropertyDefinition)">
            <summary>
             Inserts the specified item at the specified index within the collection.
             Items following the insertion point are moved down to accommodate the new item.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgPropertyDefinition" />) Input value
            </param>
            <returns> Returns nothing
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if index is out of range</exception>
            <exception cref="T:OSGeo.MapGuide.MgDuplicateObjectException"> if it is duplicate</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgPropertyDefinitionCollection.Remove(OSGeo.MapGuide.MgPropertyDefinition)">
            <summary>
             Removes the specified item from the collection.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgPropertyDefinition" />) Input value
            </param>
            <returns> Returns true if removal was successful
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgPropertyDefinitionCollection.GetItem(System.Int32)">
            <summary>
             Gets the item in the collection at the specified index
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <returns> Returns the item in the collection at the specified index
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if index is out of range</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgPropertyDefinitionCollection.GetItem(System.String)">
            <summary>
             Gets the item in the collection with the specified name
            </summary>
            <param name="name">
             (String/string) Input item name
            </param>
            <returns> Returns the item in the collection with the specified name
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgObjectNotFoundException"> if the item does not exist within the collection.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgPropertyDefinitionCollection.GetCount">
            <summary>
             Gets the number of items in the collection.
            </summary>
            <returns> Returns number of items in the collection
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgPropertyDefinitionCollection.Clear">
            <summary>
             Removes all items from the collection.
            </summary>
            <returns> Returns nothing
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgPropertyDefinitionCollection.RemoveAt(System.Int32)">
            <summary>
             Removes the specified item from the collection.
            </summary>
            <param name="index">
             (int) Input index
            </param>
            <returns> Returns nothing
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgPropertyDefinitionCollection.Contains(OSGeo.MapGuide.MgPropertyDefinition)">
            <summary>
             Returns true if the collection contains the specified item, false otherwise.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgPropertyDefinition" />) Input value
            </param>
            <returns> Returns true if the collection contains the specified item, false otherwise
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgPropertyDefinitionCollection.Contains(System.String)">
            <summary>
             Returns true if the collection contains the specified item, false otherwise.
            </summary>
            <param name="name">
             (String/string) Input the item name
            </param>
            <returns> Returns true if the collection contains the specified item, false otherwise
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgPropertyDefinitionCollection.IndexOf(OSGeo.MapGuide.MgPropertyDefinition)">
            <summary>
             Returns the index of the specified item in the collection or -1 if the item does not exist.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgPropertyDefinition" />) Input value
            </param>
            <returns> Returns the index of the specified item in the collection or -1 if the item does not exist
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgPropertyDefinitionCollection.IndexOf(System.String)">
            <summary>
             Returns the index of the specified item (by name) in the collection or -1 if the item does not exist.
            </summary>
            <param name="name">
             (String/string) Input the item name
            </param>
            <returns> Returns the index of the specified item in the collection or -1 if the item does not exist
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgPropertyDefinitionCollection.ToXml">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Creates an XML document representing the collection.
             Order of properties in XML would be same as order of properties in collection.
             It starts with item zero to length of collection.
             TODO: Add a snippet of XML here?
            </summary>
            <returns> Pointer to an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgRaster">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgRaster.IsNull">
            <summary>
             Returns true if the <see cref="T:OSGeo.MapGuide.MgRaster" /> represents a null value.
            </summary>
            <returns> true  - null value.
              false - non-null
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRaster.SetNull">
            <summary>
             Sets the <see cref="T:OSGeo.MapGuide.MgRaster" /> to a null value.
            </summary>
            <returns> Returns nothing
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRaster.GetBounds">
            <summary>
             Get the minimum bounding box around the image.
             The bounds are transformed to the active spatial context.
            </summary>
            <returns> Returns <see cref="T:OSGeo.MapGuide.MgEnvelope" /> object containing bounds
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRaster.GetImageXSize">
            <summary>
             Gets the size of image file in the horizontal
             direction in pixels (number of columns).
            </summary>
            <returns> Returns the horizontal image size in pixels (number of columns).
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRaster.SetImageXSize(System.Int32)">
            <summary>
             Sets the size of image file in the horizontal
             direction in pixels (number of columns).
             By setting the X and Y image size properties prior to getting
             a reader for the data, the client application can control the
             density of pixels fetched by the provider, which may reduce
             the amount of data shipped by the reader and reduce processing
             time significantly.  For example, a certain query in the
             coordinate system of the raster object class returns a
             <see cref="T:OSGeo.MapGuide.MgRaster" /> object with image size 12091 by 8043.  But the
             image only needs to be displayed in an area 1167 by 776 on
             the users monitor (note that the aspect ratios are the same
             because the query is constructed based on the display area).
             By setting the image size to these lower values the FDO raster
             subsystem may be able to use a previously subsampled image
             where the resolution has been reduced by a factor of 4.
             So instead of transferring 97MB, it can transfer 6MB (a reduction
             by 4 in both dimensions reduces the amount of data by a factor of 16)
             and subsample the image again to the desired resolution in a
             more timely manner (less data to process means less total time),
             with no appreciable difference in display quality to the user.
            </summary>
            <param name="size">
             (int) The desired horizontal image size in pixels (number of columns).
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgRaster.GetImageYSize">
            <summary>
             Gets the size of image file in the vertical
             direction in pixels (number of rows).
            </summary>
            <returns> Returns the vertical image size in pixels (number of rows).
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRaster.SetImageYSize(System.Int32)">
            <summary>
             Sets the size of image file in the vertical
             direction in pixels (number of rows). See SetImageXSize.
            </summary>
            <param name="size">
             (int) The desired vertical image size in pixels (number of rows).
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgRaster.GetStream">
            <summary>
             Get the source of image data.
             Image data is shipped using a paradigm similar to BLOB I/O.
             When fetching a raster image the GetStream() method provides
             a GisIStreamReader from which the client may request the image data.
             The format of the image data expected is determined by the
             DataModel property.  The data type, bit depth, tiling and
             organization specify the meaning of the image data.
             By setting the DataModel property prior to getting a
             reader for the data, the FDO client application can control the
             way data is retrieved from the FDO raster subsystem.
             When a tiled image is fetched, the image data will be tiled by default,
             unless a spatial query is used that covers a portion of a tile,
             in which case the image is converted to monolithic form prior to
             returning to the client.  The client may force a monolithic
             image in the former case by setting the DataModel to monolithic
             prior to getting the stream reader.  Or conversely it can request
             a re-tiling of the remaining sub-image by setting the DataModel
             property to tiled (in this case the tile origin is at the new upper
             left corner of the sub-image).
             Note that altering the DataModel may have significant performance issues.
            </summary>
            <returns> Streamed raster image
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRaster.GetBitsPerPixel">
            <summary>
              Gets the number of bits per pixel.
            </summary>
            <returns>  Returns the number of bits per pixel.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRaster.GetDataModelType">
            <summary>
              Gets the type of data model (RGB, RGBA, Bitonal, etc.)
            </summary>
            <returns>  Returns the type of pixel color data (RGB, RGBA, Bitonal, etc.)
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRaster.GetNumberOfBands">
            <summary>
              Gets the number of bands/channels contained in the raster image.
            </summary>
            <returns>  Returns the numbers of bands/channels contained in the raster image.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRaster.GetCurrentBand">
            <summary>
              Gets the currently active band/channel.
            </summary>
            <returns>  Returns the current active band/channel.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRaster.GetDataType">
            <summary>
              Gets the data type.
            </summary>
            <returns> Returns the data type of the raster.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRaster.GetVerticalUnits">
            <summary>
              Gets the vertical units.
            </summary>
            <returns>  Returns the vertical units.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRaster.GetNullValueType">
            <summary>
             Gets the FDO data type of the NODATA value of the raster.
            </summary>
            <returns> Returns the FDO data type of the null value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRaster.GetNullValue">
            <summary>
             Gets the NODATA value of the raster.
            </summary>
            <returns> Returns the FDO data type of the null value.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgRasterProperty">
            <summary>
             Stores <see cref="T:OSGeo.MapGuide.MgRaster" /> data with an associated key name.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgRasterProperty.#ctor(System.String,OSGeo.MapGuide.MgRaster)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgRasterProperty" /> object.
            </summary>
            <param name="name">
             (String/string) The name of the property.
            </param>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgRaster" />) The value of the property.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgRasterProperty.GetValue">
            <summary>
             Gets the property value.
            </summary>
            <returns> Returns the property value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRasterProperty.GetPropertyType">
            <summary>
             Gets the property type.
            </summary>
            <returns> Returns the property type <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Raster.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRasterProperty.SetValue(OSGeo.MapGuide.MgRaster)">
            <summary>
             Sets the property value.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgRaster" />) The value of the property.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgRasterPropertyDefinition">
            <summary>
             Defines a feature property which contains a raster image.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgRasterPropertyDefinition.#ctor(System.String)">
            <summary>
             Constructs a <see cref="T:OSGeo.MapGuide.MgRasterPropertyDefinition" /> object.
            </summary>
            <param name="name">
             (String/string) The name of the property.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgRasterPropertyDefinition.GetReadOnly">
            <summary>
             Returns a Boolean value that indicates whether this property
             is read-only.
            </summary>
            <returns> Returns true if this property is read-only; otherwise
              returns false.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRasterPropertyDefinition.GetNullable">
            <summary>
             Gets a Boolean value that indicates whether this property&apos;s
             value can be null.
            </summary>
            <returns> Returns a Boolean value that indicates whether this
              property&apos;s value can be null.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRasterPropertyDefinition.GetDefaultImageXSize">
            <summary>
             Gets the default size of the image file in the horizontal
             direction, in pixels (number of columns).
            </summary>
            <returns> Returns the default horizontal image size in pixels (number
              of columns).
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRasterPropertyDefinition.GetDefaultImageYSize">
            <summary>
             Gets the default size of the image file in the vertical
             direction, in pixels (number of rows).
            </summary>
            <returns> Returns the default vertical image size in pixels (number of
              rows).
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRasterPropertyDefinition.GetSpatialContextAssociation">
            <summary>
             Gets the Spatial Context name associated with this raster
             property.
            </summary>
            <returns> Returns a String value representing the Spatial Context
              name. If the value is empty then the raster property is
              associated with the active spatial context in the datastore.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRasterPropertyDefinition.SetReadOnly(System.Boolean)">
            <summary>
             Sets a Boolean value that specifies whether this property is
             read-only.
            </summary>
            <param name="value">
             (boolean/bool) True configures the property to be read-only and false configures it to be user settable.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRasterPropertyDefinition.SetNullable(System.Boolean)">
            <summary>
             Sets a Boolean value that indicates whether this property&apos;s
             value can be null.
            </summary>
            <param name="value">
             (boolean/bool) True configures the property to be nullable, and false configures it to disallow setting it to a null value.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRasterPropertyDefinition.SetDefaultImageXSize(System.Int32)">
            <summary>
             Sets the default size of the image file in the horizontal
             direction, in pixels (number of columns).
            </summary>
            <param name="size">
             (int) The desired default horizontal image size in pixels (number of columns).
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRasterPropertyDefinition.SetDefaultImageYSize(System.Int32)">
            <summary>
             Sets the default size of the image file in the vertical
             direction, in pixels (number of rows).
            </summary>
            <param name="size">
             (int) The desired default vertical image size in pixels (number of rows).
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgRasterPropertyDefinition.SetSpatialContextAssociation(System.String)">
            <summary>
             Sets a Spatial Context association for this raster
             property.
            </summary>
            <param name="spatialContextName">
             (String/string) The Spatial Context name to be set.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgReader">
            <summary>
             Provides a forward-only, read-only iterator for reading data.
             You must call ReadNext before you can access any data. This
             is a base class for <see cref="T:OSGeo.MapGuide.MgDataReader" />, <see cref="T:OSGeo.MapGuide.MgFeatureReader" />, and
             <see cref="T:OSGeo.MapGuide.MgSqlDataReader" />.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.ReadNext">
            <summary>
             Advances the reader to the next item and determines whether
             there is another object to read.
            </summary>
            <returns> Returns true if there is a next item; otherwise returns
              false.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetPropertyCount">
            <summary>
             Gets the number of properties in the feature currently being
             read.
            </summary>
            <returns> Returns the number of properties.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetPropertyName(System.Int32)">
            <summary>
             Gets the name of the property at the given ordinal position.
            </summary>
            <param name="index">
             (int) The position of the property in the list of properties belonging to the feature currently being read.
            </param>
            <returns> Returns the property name.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetPropertyType(System.String)">
            <summary>
             Gets the type of the property with the specified name. See
             <see cref="T:OSGeo.MapGuide.MgPropertyType" /> for the list of possible values.
            </summary>
            <param name="propertyName">
             (String/string) The property name.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgPropertyType" /> value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetPropertyType(System.Int32)">
            <summary>
             Gets the type of the property at the specified index. See
             <see cref="T:OSGeo.MapGuide.MgPropertyType" /> for the list of possible values.
            </summary>
            <param name="index">
             (index) The property index.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgPropertyType" /> value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.IsNull(System.String)">
            <summary>
             Determines whether the value of the specified property is
             null.
            </summary>
            <param name="propertyName">
             (String/string) The property name.
            </param>
            <returns> Returns true if the value is null; otherwise returns false.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetBoolean(System.String)">
            <summary>
             Gets the Boolean value of the specified property.
            </summary>
            <param name="propertyName">
             (String/string) The property name.
            </param>
            <returns> Returns the Boolean value.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetByte(System.String)">
            <summary>
             Gets the Byte value of the specified property.
            </summary>
            <param name="propertyName">
             (String/string) The property name.
            </param>
            <returns> Returns the Byte value.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetDateTime(System.String)">
            <summary>
             Gets the <see cref="T:OSGeo.MapGuide.MgDateTime" /> value of the specified property.
            </summary>
            <param name="propertyName">
             (String/string) The property name.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgDateTime" /> object.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetSingle(System.String)">
            <summary>
             Gets the Single value of the specified property.
            </summary>
            <param name="propertyName">
             (String/string) The property name.
            </param>
            <returns> Returns the single value.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetDouble(System.String)">
            <summary>
             Gets the Double value of the specified property.
            </summary>
            <param name="propertyName">
             (String/string) The property name.
            </param>
            <returns> Returns the double value.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetInt16(System.String)">
            <summary>
             Gets the 16 bit integer value of the specified property.
            </summary>
            <param name="propertyName">
             (String/string) The property name.
            </param>
            <returns> Returns the 16 bit integer value.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetInt32(System.String)">
            <summary>
             Gets the 32 bit integer value of the specified property.
            </summary>
            <param name="propertyName">
             (String/string) The property name.
            </param>
            <returns> Returns the integer 32 bits value.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetInt64(System.String)">
            <summary>
             Gets the 64 bit integer value of the specified property.
            </summary>
            <param name="propertyName">
             (String/string) The property name.
            </param>
            <returns> Returns the integer 64 bits value.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetString(System.String)">
            <summary>
             Gets the string value of the specified property.
            </summary>
            <param name="propertyName">
             (String/string) The property name.
            </param>
            <returns> Returns the string value.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetBLOB(System.String)">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <param name="propertyName">
             (String/string) The property name.
            </param>
            <returns> Returns the BLOB value in an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetCLOB(System.String)">
            <summary>
             Gets the CLOB value of the specified property.
            </summary>
            <param name="propertyName">
             (String/string) The property name.
            </param>
            <returns> Returns the CLOB value in an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetGeometry(System.String)">
            <summary>
             Gets the Geometry for the specified property.
            </summary>
            <param name="propertyName">
             (String/string) The property name.
            </param>
            <returns> Returns a geometry in AGF binary format in an <see cref="T:OSGeo.MapGuide.MgByteReader" />
              object.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetRaster(System.String)">
            <summary>
             Gets the raster object of the specified property.
            </summary>
            <param name="propertyName">
             (String/string) The property name.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgRaster" /> object.
            </returns>
            <exception cref="!:OSGeo.MapGuide.MgConnectionNotOpenException"> MgNullPropertyValueException</exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"> MgInvalidPropertyTypeException</exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetPropertyIndex(System.String)">
            <summary>
             Gets the index of the property with the specified property name.
            </summary>
            <param name="propertyName">
             (String/string) The name of the property in the list of properties belonging to the feature currently being read.
            </param>
            <returns> Returns the property index.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.IsNull(System.Int32)">
            <summary>
             Determines whether the value of the specified property is
             null.
            </summary>
            <param name="index">
             (int) The position of the property in the list of properties belonging to the feature currently being read.
            </param>
            <returns> Returns true if the value is null; otherwise returns false.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetBoolean(System.Int32)">
            <summary>
             Gets the Boolean value of the specified property.
            </summary>
            <param name="index">
             (int) The position of the property in the list of properties belonging to the feature currently being read.
            </param>
            <returns> Returns the Boolean value.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetByte(System.Int32)">
            <summary>
             Gets the Byte value of the specified property.
            </summary>
            <param name="index">
             (int) The position of the property in the list of properties belonging to the feature currently being read.
            </param>
            <returns> Returns the Byte value.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetDateTime(System.Int32)">
            <summary>
             Gets the <see cref="T:OSGeo.MapGuide.MgDateTime" /> value of the specified property.
            </summary>
            <param name="index">
             (int) The position of the property in the list of properties belonging to the feature currently being read.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgDateTime" /> object.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetSingle(System.Int32)">
            <summary>
             Gets the Single value of the specified property.
            </summary>
            <param name="index">
             (int) The position of the property in the list of properties belonging to the feature currently being read.
            </param>
            <returns> Returns the single value.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetDouble(System.Int32)">
            <summary>
             Gets the Double value of the specified property.
            </summary>
            <param name="index">
             (int) The position of the property in the list of properties belonging to the feature currently being read.
            </param>
            <returns> Returns the double value.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetInt16(System.Int32)">
            <summary>
             Gets the 16 bit integer value of the specified property.
            </summary>
            <param name="index">
             (int) The position of the property in the list of properties belonging to the feature currently being read.
            </param>
            <returns> Returns the 16 bit integer value.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetInt32(System.Int32)">
            <summary>
             Gets the 32 bit integer value of the specified property.
            </summary>
            <param name="index">
             (int) The position of the property in the list of properties belonging to the feature currently being read.
            </param>
            <returns> Returns the integer 32 bits value.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetInt64(System.Int32)">
            <summary>
             Gets the 64 bit integer value of the specified property.
            </summary>
            <param name="index">
             (int) The position of the property in the list of properties belonging to the feature currently being read.
            </param>
            <returns> Returns the integer 64 bits value.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetString(System.Int32)">
            <summary>
             Gets the string value of the specified property.
            </summary>
            <param name="index">
             (int) The position of the property in the list of properties belonging to the feature currently being read.
            </param>
            <returns> Returns the string value.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetBLOB(System.Int32)">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <param name="index">
             (int) The position of the property in the list of properties belonging to the feature currently being read.
            </param>
            <returns> Returns the BLOB value in an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetCLOB(System.Int32)">
            <summary>
             Gets the CLOB value of the specified property.
            </summary>
            <param name="index">
             (int) The position of the property in the list of properties belonging to the feature currently being read.
            </param>
            <returns> Returns the CLOB value in an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetGeometry(System.Int32)">
            <summary>
             Gets the Geometry for the specified property.
            </summary>
            <param name="index">
             (int) The position of the property in the list of properties belonging to the feature currently being read.
            </param>
            <returns> Returns a geometry in AGF binary format in an <see cref="T:OSGeo.MapGuide.MgByteReader" />
              object.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetRaster(System.Int32)">
            <summary>
             Gets the raster object of the specified property.
            </summary>
            <param name="index">
             (int) The position of the property in the list of properties belonging to the feature currently being read.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgRaster" /> object.
            </returns>
            <exception cref="!:OSGeo.MapGuide.MgConnectionNotOpenException"> MgNullPropertyValueException</exception>
            <exception cref="T:OSGeo.MapGuide.MgFdoException"> MgInvalidPropertyTypeException</exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidPropertyTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.Close">
            <summary>
             Closes the object, freeing any resources it may be holding.
            </summary>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.GetReaderType">
            <summary>
             Get the type of this reader. See <see cref="T:OSGeo.MapGuide.MgReaderType" /> for a list of
             the possible values.
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgReaderType" /> value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgReader.ToXml">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Serializes the unread features in the reader into an XML format.
             The XML format of the output is governed by the <see cref="!:OSGeo.MapGuide.MgFeatureSet" />
             schema.
            </summary>
            <returns> <see cref="T:OSGeo.MapGuide.MgByteReader" /> holding XML.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgReadOnlyLayerCollection">
            <summary>
             Provides read only access to a collection of <see cref="T:OSGeo.MapGuide.MgLayerBase" /> objects.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgReadOnlyLayerCollection.GetCount">
            <summary>
             Gets the number of layers in the collection.
            </summary>
            <returns> Returns the number of layers.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgReadOnlyLayerCollection.GetItem(System.Int32)">
            <summary>
             Gets the layer at the specified index.
            </summary>
            <param name="index">
             (int) Index of the layer to get.
            </param>
            <returns> Returns the layer.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgOutOfRangeException"> if the index is invalid.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgReadOnlyLayerCollection.Contains(OSGeo.MapGuide.MgLayerBase)">
            <summary>
             Determines if the collection contains the specified layer.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgLayerBase" />) <see cref="T:OSGeo.MapGuide.MgLayerBase" /> to search for.
            </param>
            <returns> Returns true if the collection contains the specified item,
              or false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgReadOnlyLayerCollection.IndexOf(OSGeo.MapGuide.MgLayerBase)">
            <summary>
             Gets the index of the specified layer in the collection.
            </summary>
            <param name="value">
             (<see cref="T:OSGeo.MapGuide.MgLayerBase" />) <see cref="T:OSGeo.MapGuide.MgLayerBase" /> to search for.
            </param>
            <returns> Returns the layer&apos;s index if the collection contains the
              specified layer, or false (-1) otherwise.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgResource">
            <summary>
             The abstract base class for all resource types.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgResource.GetResourceId">
            <summary>
             Identifies the resource.
            </summary>
            <returns> Returns the unique identifier for this resource or NULL if
              the resource has not yet been opened or saved.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgResource.Open(OSGeo.MapGuide.MgResourceService,OSGeo.MapGuide.MgResourceIdentifier)">
            <summary>
             Opens the resource using the specified resource service and
             resource identifier.
            </summary>
            <param name="resourceService">
             Resource service.
            </param>
            <param name="resourceId">
             Resource identifier.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgResource.Save(OSGeo.MapGuide.MgResourceService)">
            <summary>
             Saves the resource using the specified resource service.
            </summary>
            <param name="resourceService">
             Resource service.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgResource.Save(OSGeo.MapGuide.MgResourceService,OSGeo.MapGuide.MgResourceIdentifier)">
            <summary>
             Saves the resource using the specified resource service and
             resource identifier.
            </summary>
            <param name="resourceService">
             Resource service to use to save this resource.
            </param>
            <param name="resourceId">
             Resource identifier.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgResourceBusyException">
            <summary>
             Thrown when a requested resource is busy.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceBusyException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgResourceBusyException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgResourceDataNotFoundException">
            <summary>
             Thrown when requested resource data is not found.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceDataNotFoundException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgResourceDataNotFoundException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgResourceIdentifier">
            <summary>
             Creates and manipulates resource identifiers.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceIdentifier.#ctor(System.String)">
            <summary>
             Initialize and validate a resource identifier from a string.
            </summary>
            <param name="resource">
             (String/string)
            </param>
            <exception cref="T:OSGeo.MapGuide.MgOutOfMemoryException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourcePathException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceIdentifier.GetRepositoryType">
            <summary>
             Extracts the repository type from a resource&apos;s identifier.
            </summary>
            <returns> Returns the repository type. Legal repository types are
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceIdentifier.SetRepositoryType(System.String)">
            <summary>
             Sets the repository type.
            </summary>
            <param name="type">
             (String/string) Repository type string. Legal repository
            </param>
            <returns> Returns nothing.
              &lt;!-- Examples (PHP) --&gt;
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceIdentifier.GetRepositoryName">
            <summary>
             Extracts the repository name from a resource&apos;s identifier.
            </summary>
            <returns> Returns the repository name. For session repositories, the
              name is the session ID. For library repositories, the name is
              an empty string.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceIdentifier.SetRepositoryName(System.String)">
            <summary>
             Sets the repository name.
            </summary>
            <param name="name">
             (String/string) Repository name. &amp;lt;ul&gt; &lt;li&gt;If the repository is the library, the name must be an empty string.&lt;/li&gt; &lt;li&gt;If the repository is a session repository, the name cannot be empty.&lt;/li&gt; &lt;/ul&gt;
            </param>
            <returns> Returns nothing.
              &lt;!-- Examples (PHP) --&gt;
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceIdentifier.ToString">
            <summary>
             Converts the resource identifier into a string.
            </summary>
            <returns> Returns a fully qualified resource specifier string.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceIdentifier.GetPath">
            <summary>
             Extracts the resource&apos;s path from the resource identifier.
            </summary>
            <returns> Returns the resource&apos;s path.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceIdentifier.SetPath(System.String)">
            <summary>
             Set the resource path within the repository.
            </summary>
            <param name="path">
             (String/string) Resource path within the repository. It can contain spaces but cannot contain any of the characters
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceIdentifier.GetName">
            <summary>
             Extracts the resource&apos;s name from the resource identifier.
            </summary>
            <returns> Returns the resource name.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceIdentifier.SetName(System.String)">
            <summary>
             Set the resource name
            </summary>
            <param name="name">
             (String/string) Resource name. It can contain spaces but cannot contain any of the characters %*:|?&amp;lt;&apos;&amp;&quot;&gt;=
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceIdentifier.GetResourceType">
            <summary>
             Extracts the resource&apos;s type from the resource identifier.
            </summary>
            <returns> Returns the resource&apos;s type string, as defined in
              <see cref="T:OSGeo.MapGuide.MgResourceType" />.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceIdentifier.SetResourceType(System.String)">
            <summary>
             Sets the resource type.
            </summary>
            <param name="type">
             (String/string)
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceIdentifier.Validate">
            <summary>
             Validates the resource identifier.  This method should be called
             after the identifier has been fully specified by constructor and/or
             Set methods.
            </summary>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourcePathException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="T:OSGeo.MapGuide.MgResourceNotFoundException">
            <summary>
             Thrown when a requested resource is not found.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceNotFoundException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgResourceNotFoundException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgResourceService">
            <summary>
             Enables you to manipulate repositories and resources.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.UpdateRepository(OSGeo.MapGuide.MgResourceIdentifier,OSGeo.MapGuide.MgByteReader,OSGeo.MapGuide.MgByteReader)">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Repository to update.
            </param>
            <param name="content">
             (<see cref="T:OSGeo.MapGuide.MgByteReader" />)
            </param>
            <param name="header">
             (<see cref="T:OSGeo.MapGuide.MgByteReader" />) &amp;lt;ul&gt; &lt;li&gt;If the repository is the library, this is the
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgOutOfMemoryException"></exception>
            <exception cref="!:OSGeo.MapGuide.MgRepositoryNotFoundException"> if repository does not</exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.ApplyResourcePackage(OSGeo.MapGuide.MgByteReader)">
            <summary>
             Applies a package of resource changes to the repository.
            </summary>
            <param name="resourcePackage">
             (<see cref="T:OSGeo.MapGuide.MgByteReader" />) The package containing resources to update.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgNullArgumentException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourcePathException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgOutOfMemoryException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.EnumerateResources(OSGeo.MapGuide.MgResourceIdentifier,System.Int32,System.String)">
            <summary>
             Enumerates the resources in the specified repository.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Resource identifier specifying the resource to enumerate. This can be a document or a folder.
            </param>
            <param name="depth">
             (int) Recursion depth, relative to the specified resource. &amp;lt;ul&gt; &lt;li&gt;If the resource is a document, depth must be set to 0. &lt;/li&gt; &lt;li&gt;If the resource is a folder: &lt;/li&gt; &lt;ul&gt; &lt;li&gt;If the depth is equal to 0, only information about the specified folder is returned. &lt;/li&gt; &lt;li&gt;If the depth is greater than 0, information about the folder and its descendants up to the specified depth are returned. &lt;/li&gt; &lt;/ul&gt; &lt;li&gt;If the depth is -1, information about the folder and all its descendants is returned. &lt;/li&gt; &lt;/ul&gt;
            </param>
            <param name="type">
             (String/string) Type of the resource to be enumerated. (Case
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object containing a description of
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourcePathException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.EnumerateResources(OSGeo.MapGuide.MgResourceIdentifier,System.Int32,System.String,System.Boolean)">
            <summary>
             Enumerates the resources in the specified repository.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Resource identifier specifying the resource to enumerate. This can be a document or a folder.
            </param>
            <param name="depth">
             (int) Recursion depth, relative to the specified resource. &amp;lt;ul&gt; &lt;li&gt;If the resource is a document, depth must be set to 0. &lt;/li&gt; &lt;li&gt;If the resource is a folder: &lt;/li&gt; &lt;ul&gt; &lt;li&gt;If the depth is equal to 0, only information about the specified folder is returned. &lt;/li&gt; &lt;li&gt;If the depth is greater than 0, information about the folder and its descendants up to the specified depth are returned. &lt;/li&gt; &lt;/ul&gt; &lt;li&gt;If the depth is -1, information about the folder and all its descendants is returned. &lt;/li&gt; &lt;/ul&gt;
            </param>
            <param name="type">
             (String/string) Type of the resource to be enumerated. (Case
            </param>
            <param name="computeChildren">
             (boolean/bool) Flag to determine whether or not the number of children of the leaf folder resource at the specified depth should be computed. &amp;lt;ul&gt; &lt;li&gt;If it is true, then the number of children of the leaf folder resource at the specified depth will be set to a computed value (&gt;= 0). &lt;/li&gt; &lt;li&gt;If it is false, then the number of children of the leaf folder resource at the specified depth will be set to -1. &lt;/li&gt; &lt;/ul&gt;
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object containing a description of
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourcePathException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.SetResource(OSGeo.MapGuide.MgResourceIdentifier,OSGeo.MapGuide.MgByteReader,OSGeo.MapGuide.MgByteReader)">
            <summary>
             Adds a new resource to a resource repository, or updates an
             existing resource.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Location where the resource will be placed in the repository.
            </param>
            <param name="content">
             (<see cref="T:OSGeo.MapGuide.MgByteReader" />) The resource content in XML format using the schema
            </param>
            <param name="header">
             (<see cref="T:OSGeo.MapGuide.MgByteReader" />)
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.DeleteResource(OSGeo.MapGuide.MgResourceIdentifier)">
            <summary>
             Deletes an existing resource and its associated data from the
             repository.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Resource identifier specifying the resource to
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.MoveResource(OSGeo.MapGuide.MgResourceIdentifier,OSGeo.MapGuide.MgResourceIdentifier,System.Boolean)">
            <summary>
             Moves an existing resource to another location.
            </summary>
            <param name="sourceResource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Resource to be moved. This can be a document or folder. &amp;lt;ul&gt; &lt;li&gt;If it is a folder, this method also moves the contents of the folder and all folders below it.&lt;/li&gt; &lt;li&gt;If it is a folder, you must include the trailing slash in the identifier.&lt;/li&gt; &lt;/ul&gt;
            </param>
            <param name="destResource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Where the resource should be moved to.
            </param>
            <param name="overwrite">
             (boolean/bool) Flag to determine whether or not the destination resource should be overwritten if it exists.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgResourceNotFoundException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgDuplicateResourceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourcePathException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.MoveResource(OSGeo.MapGuide.MgResourceIdentifier,OSGeo.MapGuide.MgResourceIdentifier,System.Boolean,System.Boolean)">
            <summary>
             Moves an existing resource to another location.
            </summary>
            <param name="sourceResource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Resource to be moved. This can be a document or folder. &amp;lt;ul&gt; &lt;li&gt;If it is a folder, this method also moves the contents of the folder and all folders below it.&lt;/li&gt; &lt;li&gt;If it is a folder, you must include the trailing slash in the identifier.&lt;/li&gt; &lt;/ul&gt;
            </param>
            <param name="destResource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Where the resource should be moved to.
            </param>
            <param name="overwrite">
             (boolean/bool) Flag to determine whether or not the destination resource should be overwritten if it exists.
            </param>
            <param name="cascade">
             (boolean/bool) Flag to determine whether or not the referencing resources should be updated.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgResourceNotFoundException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgDuplicateResourceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourcePathException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.CopyResource(OSGeo.MapGuide.MgResourceIdentifier,OSGeo.MapGuide.MgResourceIdentifier,System.Boolean)">
            <summary>
             Copies an existing resource to another location.
            </summary>
            <param name="sourceResource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Resource to be copied from. This can be a document or folder.
            </param>
            <param name="destResource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Where the resource should be copied to.
            </param>
            <param name="overwrite">
             (boolean/bool) Flag to determine whether or not the destination resource should be overwritten if it exists.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgResourceNotFoundException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgDuplicateResourceException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourcePathException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.GetResourceContent(OSGeo.MapGuide.MgResourceIdentifier)">
            <summary>
             Gets the content of the specified resource.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Resource identifier specifying the resource.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object containing the resource
              content in XML format. The XML uses the schema appropriate
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourcePathException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.GetResourceContents(OSGeo.MapGuide.MgStringCollection,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             Gets the contents of the specified resources.
            </summary>
            <param name="resources">
             A collection of resource identifiers describing the resources.
            </param>
            <param name="preProcessTags">
             Pre-processing to apply to resource before returning content. If this parameter is NULL, it means no pre-processing. If this parameter is not NULL, it must be a collection of pre-processing types, and it should be one to one matching the collection of parameter resources. See <see cref="!:OSGeo.MapGuide.MgResourcePreProcessingType" /> for a list of supported pre-processing tags.
            </param>
            <returns> <see cref="T:OSGeo.MapGuide.MgStringCollection" /> object representing the collection of corresponding resource contents.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourcePathException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.GetResourceHeader(OSGeo.MapGuide.MgResourceIdentifier)">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Resource to get the header for.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object containing the resource
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.ChangeResourceOwner(OSGeo.MapGuide.MgResourceIdentifier,System.String,System.Boolean)">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Resource whose owner is to be changed. This
            </param>
            <param name="owner">
             (String/string) The User ID of the new owner. (The User ID must already exist. You can create User IDs through the Site Administrator tool.)
            </param>
            <param name="includeDescendants">
             (boolean/bool) Flag to determine whether or not the owners of descendant resources should be also be changed. This flag is applicable only if the resource is a folder.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="!:OSGeo.MapGuide.MgPermissionDeniedException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgResourceNotFoundException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourcePathException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.InheritPermissionsFrom(OSGeo.MapGuide.MgResourceIdentifier)">
            <summary>
             Sets the permissions for all descendants of a specified
             folder to be inherited from the folder.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Folder that permissions are to be inherited from. You must include the trailing slash in the identifier.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="!:OSGeo.MapGuide.MgPermissionDeniedException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgResourceNotFoundException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourcePathException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.SetResourceData(OSGeo.MapGuide.MgResourceIdentifier,System.String,System.String,OSGeo.MapGuide.MgByteReader)">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Resource to which this data is to be associated.
            </param>
            <param name="dataName">
             (String/string) Name for the data.
            </param>
            <param name="dataType">
             (String/string) Data type for the resource data. It must match one of the types defined in <see cref="T:OSGeo.MapGuide.MgResourceDataType" /> and is case sensitive. Data names must be unique.
            </param>
            <param name="data">
             (<see cref="T:OSGeo.MapGuide.MgByteReader" />) Data to set.
            </param>
            <returns> Returns nothing.
              &lt;!-- Examples (PHP) --&gt;
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"> if resource is a folder type</exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceDataTypeException"> if the specified</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.DeleteResourceData(OSGeo.MapGuide.MgResourceIdentifier,System.String)">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) The resource for which the resource data will be deleted.
            </param>
            <param name="dataName">
             (String/string) Name for data.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.RenameResourceData(OSGeo.MapGuide.MgResourceIdentifier,System.String,System.String,System.Boolean)">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) The resource for which the resource data will be renamed.
            </param>
            <param name="oldDataName">
             (String/string) Old data name.
            </param>
            <param name="newDataName">
             (String/string) New data name.
            </param>
            <param name="overwrite">
             (boolean/bool) Flag to determine whether or not the destination resource data should be overwritten if it exists.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceDataTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgResourceDataNotFoundException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgDuplicateResourceDataException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.GetResourceData(OSGeo.MapGuide.MgResourceIdentifier,System.String)">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) The resource for which the resource data will be obtained.
            </param>
            <param name="dataName">
             (String/string) Name for data (as specified when the data was
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object containing the resource data.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgResourceDataNotFoundException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.EnumerateResourceData(OSGeo.MapGuide.MgResourceIdentifier)">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) The resource for which the resource data will be listed.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object representing the description
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.GetRepositoryContent(OSGeo.MapGuide.MgResourceIdentifier)">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Repository to get the content for.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object containing the repository
            </returns>
            <exception cref="!:OSGeo.MapGuide.MgRepositoryNotFoundException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.GetRepositoryHeader(OSGeo.MapGuide.MgResourceIdentifier)">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Repository to get the header for.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object containing the repository
            </returns>
            <exception cref="!:OSGeo.MapGuide.MgRepositoryNotFoundException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.EnumerateReferences(OSGeo.MapGuide.MgResourceIdentifier)">
            <summary>
             Enumerates all the resources which reference the specified
             resource.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Resource to get references for.
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object containing the list of all
              resources which reference the specified resource. The list is
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourcePathException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceNameException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.ResourceExists(OSGeo.MapGuide.MgResourceIdentifier)">
            <summary>
             Checks to see if the specified resource exists.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Resource identifier specifying the resource to be checked for existence.
            </param>
            <returns> Returns true if the resource exists, false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.EnumerateUnmanagedData(System.String,System.Boolean,System.String,System.String)">
            <summary>
             Enumerate unmanaged data
            </summary>
            <param name="path">
             (String/string) Unmanaged data path
            </param>
            <param name="recursive">
             (boolean/bool) Flag to determine whether to recurse subfolders or not
            </param>
            <param name="type">
             (String/string) Folders, Files, or Both
            </param>
            <param name="filter">
             (String/string) file filter to be used on returned files
            </param>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object containing the unmanaged data
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.EnumerateResourceDocuments(OSGeo.MapGuide.MgStringCollection,System.String,System.Int32)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Enumerate the resource documents in the specified repository.
            </summary>
            <param name="resources">
             Resource identifiers specifying the resources to enumerate.
            </param>
            <param name="type">
             Type of the resource to be enumerated. See <see cref="T:OSGeo.MapGuide.MgResourceType" /> for valid types. No folder type is allowed.
            </param>
            <param name="properties">
             Flag to specify which properties of the resource header should be filtered. It may be set to 0 or by bitwise inclusively OR&amp;apos;ing together one or more of the <see cref="T:OSGeo.MapGuide.MgResourceHeaderProperties" /> values.
            </param>
            <returns> Returns a string containing a description of the WMS layer definitions
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.GetResourceModifiedDate(OSGeo.MapGuide.MgResourceIdentifier)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Returns the modified date of the specified resource.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) Resource to get the modified date for.
            </param>
            <returns> An <see cref="T:OSGeo.MapGuide.MgDateTime" /> object containing the modified date of the resource.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidRepositoryTypeException"></exception>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.SetResourceMetadata(OSGeo.MapGuide.MgResourceIdentifier,OSGeo.MapGuide.MgByteReader)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Sets the Metadata content for an existing resource.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) The resource in the repository that gets metadata attached to. Note the resource has to exist else this method fails
            </param>
            <param name="content">
             (<see cref="T:OSGeo.MapGuide.MgByteReader" />) The metadata content in XML format. This can be set to null, in which case the content is cleared. The schema of the Content is user driven and not given. Most people will use it for FGDC or ISO Metadata.
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgResourceService.GetResourceMetadata(OSGeo.MapGuide.MgResourceIdentifier)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Gets the Metadata content of a resource.
            </summary>
            <param name="resource">
             (<see cref="T:OSGeo.MapGuide.MgResourceIdentifier" />) The resource in the repository which has metadata attached to it. Note the resource has to exist else this method fails.
            </param>
            <returns> The metadata content in XML format. This can null in which case the resource has no metadata attached.
              The schema of the Content is user driven and not given. Most people will use it for FGDC or ISO Metadata.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidResourceTypeException"></exception>
        </member>
        <member name="T:OSGeo.MapGuide.MgSelectionBase">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.#ctor(OSGeo.MapGuide.MgMapBase)">
            <summary>
             Initialize selection generation from a map
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.#ctor(OSGeo.MapGuide.MgMapBase,System.String)">
            <summary>
             Initialize selection from a map and xml selection
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.GetSelectedFeaturesCount(OSGeo.MapGuide.MgLayerBase,System.String)">
            <summary>
             Returns the number of selected features.
            </summary>
            <param name="layer">
             (<see cref="T:OSGeo.MapGuide.MgLayerBase" />) Input layer.
            </param>
            <param name="className">
             (String/string) Input feature class name.
            </param>
            <returns> Returns Count of all selected features.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.GetSelectedFeatures(OSGeo.MapGuide.MgLayerBase,System.String,System.Boolean)">
            <summary>
             Returns the selected feature data for the specified feature class.
            </summary>
            <param name="layer">
             (<see cref="T:OSGeo.MapGuide.MgLayerBase" />) Input layer.
            </param>
            <param name="className">
             (String/string) Input feature class name.
            </param>
            <param name="mappedOnly">
             (boolean/bool) Return mapped (true) or all (false) properties for selected features
            </param>
            <returns> Returns a feature reader containing all the features for the given
              feature class in this selection.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.GetSelectedFeatures(OSGeo.MapGuide.MgLayerBase,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <param name="layer">
             (<see cref="T:OSGeo.MapGuide.MgLayerBase" />) Input layer.
            </param>
            <param name="className">
             (String/string) Input feature class name.
            </param>
            <param name="propertyNames">
             (<see cref="T:OSGeo.MapGuide.MgStringCollection" />) Properties to return for selected features.
            </param>
            <returns> Returns a feature reader containing all the features for the given
              feature class in this selection.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.FromXml(System.String)">
            <summary>
             Read selection from XML document.  Previous selection is cleared.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.ToXml">
            <summary>
             Write selection as XML document.  This document will typically
             be passed back to a viewer to select the desired features.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.AddFeatures(OSGeo.MapGuide.MgLayerBase,OSGeo.MapGuide.MgFeatureReader,System.Int32)">
            <summary>
             Add nFeatures to selection set from the FeatureReader.
             Specify nFeatures = 0 for all features in reader.
             Internal identity mapping for layer dictates the properties used
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.AddFeatureIds(OSGeo.MapGuide.MgLayerBase,System.String,OSGeo.MapGuide.MgPropertyCollection)">
            <summary>
             Add a single selection to the set based on a collection of identity properties
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.AddFeatureIdInt16(OSGeo.MapGuide.MgLayerBase,System.String,System.Int16)">
            <summary>
             Add a single selection to the set where the identity property is a 16-bit integer.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.AddFeatureIdInt32(OSGeo.MapGuide.MgLayerBase,System.String,System.Int32)">
            <summary>
             Add a single selection to the set where the identity property is a 32-bit integer.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.AddFeatureIdInt64(OSGeo.MapGuide.MgLayerBase,System.String,System.Int64)">
            <summary>
             Add a single selection to the set where the identity property is a 64-bit integer.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.AddFeatureIdString(OSGeo.MapGuide.MgLayerBase,System.String,System.String)">
            <summary>
             Add a single selection to the set where the identity property is a string.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.AddFeatureIdDouble(OSGeo.MapGuide.MgLayerBase,System.String,System.Double)">
            <summary>
             Add a single selection to the set where the identity property is a double.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.GetLayers">
            <summary>
             Returns list of selected layers
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.GetClasses(System.String)">
            <summary>
             Returns list of selected classes for a layer
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.GetClass(System.String)">
            <summary>
             Returns the class name for the layer
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.Contains(OSGeo.MapGuide.MgLayerBase,System.String)">
            <summary>
             Does a particular layer and class have selections.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.GenerateFilter(OSGeo.MapGuide.MgLayerBase,System.String)">
            <summary>
             Generates an Fdo filter text for the selections of the
             specified layer and class
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.GenerateFilters(OSGeo.MapGuide.MgLayerBase,System.String,System.Int32)">
            <summary>
             Generates a collection of FDO filter strings for the selections
             of the specified layer and class
            </summary>
            <returns> Returns the collection of FDO filter strings
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.GetExtents(OSGeo.MapGuide.MgFeatureService)">
            <summary>
             Gets the extents of the selection set.
            </summary>
            <param name="featureService">
             (<see cref="T:OSGeo.MapGuide.MgFeatureService" />) <see cref="T:OSGeo.MapGuide.MgFeatureService" /> that can be used to retrieve the extents for each feature class definition
            </param>
            <returns> Returns the <see cref="T:OSGeo.MapGuide.MgEnvelope" /> object with extent of selection
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.Add(System.String,System.String,System.String)">
            <summary>
             Adds the given feature (represented by its base64 encoded id)
             to the selection set
            </summary>
            <param name="layer">
             (CREFSTRING) Name of layer
            </param>
            <param name="className">
             (CREFSTRING) Name of feature class
            </param>
            <param name="id">
             (CREFSTRING) Base 64 string encoded ID of the feature
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.Open(OSGeo.MapGuide.MgResourceService,System.String)">
            <summary>
             Loads the map object from a session repository.
            </summary>
            <param name="resourceService">
             (<see cref="T:OSGeo.MapGuide.MgResourceService" />) An <see cref="T:OSGeo.MapGuide.MgResourceService" /> that can be used to retrieve the map.
            </param>
            <param name="mapName">
             (String/string) A string that specifies the name of the map. This
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.Save(OSGeo.MapGuide.MgResourceService,System.String)">
            <summary>
             Save the map object to a session repository.
            </summary>
            <param name="resourceService">
             (<see cref="T:OSGeo.MapGuide.MgResourceService" />) An <see cref="T:OSGeo.MapGuide.MgResourceService" /> that can be used to retrieve the map.
            </param>
            <param name="mapName">
             (String/string) A string that specifies the name of the map. This
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSelectionBase.GetResourceName(System.String,System.String)">
            <summary>
             Builds a resource name based on the map name amd the session id
            </summary>
            <param name="sessionId">
             (String/string) A string that specifies the session id
            </param>
            <param name="mapName">
             (String/string) A string that specifies the name of the map. This
            </param>
            <returns> Resource name.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OSGeo.MapGuide.MgSelectionBase.SetMap(OSGeo.MapGuide.MgMapBase)" -->
        <member name="T:OSGeo.MapGuide.MgService">
            <summary>
             class Service
             Base class for all services APIs
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgService.HasWarnings">
            <summary>
             HasWarnings() method reports if there are warnings.
            </summary>
            <returns> Returns true or false
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgService.GetWarningsObject">
            <summary>
             Returns non-critical messages from the given service.
            </summary>
            <returns> An <see cref="T:OSGeo.MapGuide.MgWarnings" /> object containing messages generated by the service.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgServiceNotAvailableException">
            <summary>
             Thrown when an invoked service is not available yet.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgServiceNotAvailableException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgServiceNotAvailableException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgServiceNotSupportedException">
            <summary>
             Thrown when an invoked service is not supported.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgServiceNotSupportedException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgServiceNotSupportedException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgSingleProperty">
            <summary>
             Stores single precision floating point data with an
             associated key name.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgSingleProperty.#ctor(System.String,System.Single)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgSingleProperty" /> object.
            </summary>
            <param name="name">
             (String/string) The name of the property.
            </param>
            <param name="value">
             (float) The value of the property.
            </param>
        </member>
        <member name="M:OSGeo.MapGuide.MgSingleProperty.GetValue">
            <summary>
             Gets the property value.
            </summary>
            <returns> Returns the property value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSingleProperty.GetPropertyType">
            <summary>
             Gets the property type.
            </summary>
            <returns> Returns the property type <see cref="T:OSGeo.MapGuide.MgPropertyType" />::Single.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSingleProperty.SetValue(System.Single)">
            <summary>
             Sets the property value.
            </summary>
            <param name="value">
             (float) The value of the property.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgSpatialContextReader">
            <summary>
             Provides forward-only, read-only functionality for
             enumerating spatial context information retrieved from a
             feature source.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgSpatialContextReader.GetName">
            <summary>
             Gets the name of the spatial context currently being read.
            </summary>
            <returns> Returns the name of the spatial context.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSpatialContextReader.GetDescription">
            <summary>
             Gets the description of the spatial context currently being read.
            </summary>
            <returns> Returns the description of the spatial context.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSpatialContextReader.GetCoordinateSystem">
            <summary>
             Gets the name of the coordinate system of the spatial context
             currently being read. If the result is a null string, the
             coordinate system is unknown to the spatial context.
            </summary>
            <returns> Returns the coordinate system name or NULL if unknown.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSpatialContextReader.GetCoordinateSystemWkt">
            <summary>
             Gets the name of the coordinate system currently being read
             in well-known text format.
            </summary>
            <returns> Returns the coordinate system name in OGC WKT format or NULL
              if unknown.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSpatialContextReader.GetExtentType">
            <summary>
             Gets the extent type of the spatial context currently being
             read.
            </summary>
            <returns> Returns the extent type as an <see cref="T:OSGeo.MapGuide.MgSpatialContextExtentType" />
              value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSpatialContextReader.GetExtent">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object containing a geometry in AGF
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSpatialContextReader.GetXYTolerance">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
            <returns> Returns the tolerance value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSpatialContextReader.GetZTolerance">
            <summary>
             Gets the tolerance value for Z ordinates for the spatial
             context currently being read.
            </summary>
            <returns> Returns the tolerance value.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSpatialContextReader.IsActive">
            <summary>
             Determines whether the spatial context currently being read
             is the active spatial context.
            </summary>
            <returns> Returns true if the current spatial context is the active
              one; otherwise returns false.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSpatialContextReader.ReadNext">
            <summary>
             Advances the reader to the next spatial context.
            </summary>
            <returns> Returns true if there is a next item; otherwise returns
              false.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSpatialContextReader.Close">
            <summary>
             Closes the SpatialContextReader object, freeing any resources
             it may be holding.
            </summary>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSpatialContextReader.Reset">
            <summary>
             Resets the SpatialContextReader object to the beginning just
            </summary>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgSpatialContextReader.ToXml">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Serializes the spatial context information to XML according
            </summary>
            <returns> Returns an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object containing the XML
              serialization of the spatial context information.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgSqlDataReader">
            <summary>
             Provides a forward-only, read-only iterator for reading data
             returned by a call to <see cref="T:OSGeo.MapGuide.MgFeatureService" />::ExecuteSqlQuery.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgStringPropertyCollection">
            <summary>
             This class collects key-value pairs in Strings. The key name should be unique.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.#ctor">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Constructs a StringPropertyCollection.  The collection is initially empty.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.GetCount">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Gets the number of items in the collection.
            </summary>
            <returns> Returns the number of items in the collection.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.GetName(System.Int32)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Gets the name of the item in the collection at the specified index position.
            </summary>
            <param name="index">
             Input index
            </param>
            <returns> Returns the name of the item in the collection at the specified index position.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.GetValue(System.Int32)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Gets the value of the item in the collection at the specified index position.
            </summary>
            <param name="index">
             Input index
            </param>
            <returns> Returns the value of the item in the collection at the specified index position.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.GetValue(System.String)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Gets the item in the collection with the specified key.
            </summary>
            <param name="keyname">
             Key for item
            </param>
            <returns> Returns the item in the collection at the specified index position.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgObjectNotFoundException"> if the key does not exist.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.SetValue(System.String,System.String)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Sets the item in the collection with the specified key to the specified value.
            </summary>
            <param name="keyname">
             Input key name
            </param>
            <param name="value">
             Input value
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgObjectNotFoundException"> if the key does not exist.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.Add(System.String,System.String)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Adds the specified item to the end of the collection.
            </summary>
            <param name="keyname">
             Name for input value
            </param>
            <param name="value">
             Input value
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"> if the key is empty.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.Add(OSGeo.MapGuide.MgStringProperty)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Adds item to the collection.
            </summary>
            <param name="value">
             Property to add
            </param>
            <returns> Returns nothing
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.Insert(System.Int32,System.String,System.String)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Inserts the specified item at the specified index position within the collection.
             Items following the insertion point are moved down to accommodate the new item.
            </summary>
            <param name="index">
             Insertion point
            </param>
            <param name="keyname">
             Input key
            </param>
            <param name="value">
             Input value
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.Insert(System.Int32,OSGeo.MapGuide.MgStringProperty)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Inserts the specified item at the specified index position within the collection.
             Items following the insertion point are moved down to accommodate the new item.
            </summary>
            <param name="index">
             Insertion point
            </param>
            <param name="value">
             Input value
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.Clear">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Removes all items from the collection.
            </summary>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.Remove(System.String)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Removes the specified item from the collection.
            </summary>
            <param name="keyname">
             Key for item
            </param>
            <returns> Returns true if removal was successful.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.Remove(OSGeo.MapGuide.MgStringProperty)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Removes the specified item from the collection.
            </summary>
            <param name="value">
             Property to remove
            </param>
            <returns> Returns true if removal was successful.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.RemoveAt(System.Int32)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Removes the specified item from the collection.
            </summary>
            <param name="index">
             Input index
            </param>
            <returns> Returns nothing.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgIndexOutOfRangeException"> if the index is out of range.</exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.Contains(System.String)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Returns true if the collection contains the specified item, false otherwise.
            </summary>
            <param name="keyname">
             Key for item to find
            </param>
            <returns> Returns true if the collection contains the specified item, false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.Contains(OSGeo.MapGuide.MgStringProperty)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Returns true if the collection contains the specified item, false otherwise.
            </summary>
            <param name="value">
             Property to find
            </param>
            <returns> Returns true if the collection contains the specified item, false otherwise.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.IndexOf(System.String)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Returns the index of the specified item in the collection or -1 if the item does not exist.
            </summary>
            <param name="keyname">
             Key for item
            </param>
            <returns> Returns the index of the specified item in the collection or -1 if the item does not exist.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.IndexOf(OSGeo.MapGuide.MgStringProperty)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Returns the index of the specified item in the collection or -1 if the item does not exist.
            </summary>
            <param name="value">
             Property to search for
            </param>
            <returns> Returns the index of the specified item in the collection or -1 if the item does not exist.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.GetItem(System.Int32)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Gets the item in the collection at the specified index position.
            </summary>
            <param name="index">
             Input index
            </param>
            <returns> Returns the item in the collection at the specified index position.
            </returns>
            <exception cref="T:OSGeo.MapGuide.MgInvalidArgumentException"></exception>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.SetItem(System.Int32,OSGeo.MapGuide.MgStringProperty)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Sets the item in the collection at the specified index position.
            </summary>
            <param name="index">
             Input index
            </param>
            <param name="value">
             Value to set
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgStringPropertyCollection.ToXml">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Creates an XML document representing the collection.
             The order of the properties in the XML is the same as the order of the properties in the collection.
             It starts with item zero to length of collection.
             TODO: Add a snippet of XML here?
            </summary>
            <returns> A pointer to an <see cref="T:OSGeo.MapGuide.MgByteReader" /> object.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgTransaction">
            <summary>
             <see cref="T:OSGeo.MapGuide.MgTransaction" /> represents a transaction to be performed in a DataStore.
             If the transaction is time out, commit or rollback a transaction will
             result in one exception <see cref="T:OSGeo.MapGuide.MgFeatureServiceException" /> thrown.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgTransaction.Commit">
            <summary>
             Commit the transaction.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgTransaction.Rollback">
            <summary>
             Rollback the transaction.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgTransaction.GetFeatureSource">
            <summary>
             Get the identifier of feature source associated with the transaction.
            </summary>
            <returns> Returns the identifier of feature source associated with the transaction.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgTransaction.AddSavePoint(System.String)">
            <summary>
              Create a save point in this transaction.
            </summary>
            <param name="suggestName">
             Suggested save point name.
            </param>
            <returns> The actual name used
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgTransaction.ReleaseSavePoint(System.String)">
            <summary>
              Release a specific save point.
            </summary>
            <param name="savePointName">
             Save point name.
            </param>
            <returns> Returns nothing
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgTransaction.Rollback(System.String)">
            <summary>
              Rollback the transaction to a specified save point.
            </summary>
            <param name="savePointName">
             Save point name.
            </param>
            <returns> Returns nothing
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgUpdateFeatures">
            <summary>
             Creates an update feature data command. You must add this
             command to an <see cref="T:OSGeo.MapGuide.MgFeatureCommandCollection" /> object and pass the
             latter in a call to <see cref="T:OSGeo.MapGuide.MgFeatureService" />::UpdateFeatures.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgUpdateFeatures.#ctor(System.String,OSGeo.MapGuide.MgPropertyCollection,System.String)">
            <summary>
             Constructs an <see cref="T:OSGeo.MapGuide.MgUpdateFeatures" /> object.
            </summary>
            <param name="className">
             (String/string) The name of class in the schema definition in the feature source whose feature instances are to be updated
            </param>
            <param name="propertyValues">
             (<see cref="T:OSGeo.MapGuide.MgPropertyCollection" />) The collection of properties to be updated.
            </param>
            <param name="filterText">
             (String/string) The filter used to select the feature instances to be updated.
            </param>
            <returns> Returns nothing.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgUpdateFeatures.GetCommandType">
            <summary>
             Gets the type of the command, that is,
             <see cref="T:OSGeo.MapGuide.MgFeatureCommandType" />::UpdateFeatures.
            </summary>
            <returns> Returns <see cref="T:OSGeo.MapGuide.MgFeatureCommandType" />::UpdateFeatures.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgUpdateFeatures.GetPropertyValues">
            <summary>
             Get the property values collection specified in the
             constructor.
            </summary>
            <returns> Returns the collection of properties specified in the
              constructor.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgUpdateFeatures.GetFeatureClassName">
            <summary>
             Get the feature class name specified in the constructor.
            </summary>
            <returns> Returns the feature class name specified in the constructor.
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgUpdateFeatures.GetFilterText">
            <summary>
             Get the filter specified in the constructor.
            </summary>
            <returns> Returns he filter specified specified in the constructor.
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgUserNotFoundException">
            <summary>
             Thrown when a user is not found.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgUserNotFoundException.#ctor(System.String,System.Int32,System.String,OSGeo.MapGuide.MgStringCollection,System.String,OSGeo.MapGuide.MgStringCollection)">
            <summary>
             (NOTE: This API is not officially supported and may be subject to removal in a future release without warning. Use with caution.)
             Construct a <see cref="T:OSGeo.MapGuide.MgUserNotFoundException" /> object.
            </summary>
            <param name="methodName">
             Name of the method where the exception occurred.
            </param>
            <param name="lineNumber">
             Line number where the exception occurred.
            </param>
            <param name="fileName">
             File name where the exception occurred.
            </param>
            <param name="whatArguments">
             Collection of arguments used to format the message that describes what the exception is.
            </param>
            <param name="whyMessageId">
             ID of the message that describes why the exception occurs.
            </param>
            <param name="whyArguments">
             Collection of arguments used to format the message that describes why the exception occurs.
            </param>
        </member>
        <member name="T:OSGeo.MapGuide.MgWarnings">
            <summary>
             Exposes non-critical warning messages from services.
            </summary>
        </member>
        <member name="M:OSGeo.MapGuide.MgWarnings.GetMessages">
            <summary>
             Retrieves collection of warning messages
            </summary>
            <returns> Collection of messages
            </returns>
        </member>
        <member name="M:OSGeo.MapGuide.MgWarnings.GetCount">
            <summary>
             Returns the count of warning messages
            </summary>
            <returns> Number of warning messages
            </returns>
        </member>
        <member name="T:OSGeo.MapGuide.MgLayerGroupType">
            <summary>
             <see cref="T:OSGeo.MapGuide.MgLayerGroupType" /> defines integer constants used to identify
             the type of a layer group.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgLayerGroupType.Normal">
            <summary>
             Specifies that the layer group is a normal layer group.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgLayerGroupType.BaseMap">
            <summary>
             Specifies that the layer is a base map layer group (i.e.
             it contains base map layers).
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgLayerGroupType.BaseMapFromTileSet">
            <summary>
             Specifies that the layer is a base map layer from a TileSetDefinition resource.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgLayerType">
            <summary>
             <see cref="T:OSGeo.MapGuide.MgLayerType" /> defines integer constants used to identify the
             type of a layer.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgLayerType.Dynamic">
            <summary>
             Specifies that the layer is a dynamic layer.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgLayerType.BaseMap">
            <summary>
             Specifies that the layer is a base map layer.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgServiceType">
            <summary>
             Service types for Platform services.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgServiceType.ResourceService">
            <summary>
             Resource Service
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgServiceType.DrawingService">
            <summary>
             DWF Drawing Service
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgServiceType.FeatureService">
            <summary>
             FDO Feature Service
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgServiceType.MappingService">
            <summary>
             Mapping Service
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgServiceType.RenderingService">
            <summary>
             Rendering Service
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgServiceType.TileService">
            <summary>
             Tile Service
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgServiceType.KmlService">
            <summary>
             Kml Service
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgServiceType.ProfilingService">
            <summary>
             Profiling Service
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgUser">
            <summary>
             MapGuide users.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:OSGeo.MapGuide.MgUser.Administrator" -->
        <!-- Badly formed XML comment ignored for member "F:OSGeo.MapGuide.MgUser.Anonymous" -->
        <!-- Badly formed XML comment ignored for member "F:OSGeo.MapGuide.MgUser.Author" -->
        <!-- Badly formed XML comment ignored for member "F:OSGeo.MapGuide.MgUser.WfsUser" -->
        <!-- Badly formed XML comment ignored for member "F:OSGeo.MapGuide.MgUser.WmsUser" -->
        <member name="T:OSGeo.MapGuide.MgGroup">
            <summary>
             MapGuide groups.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:OSGeo.MapGuide.MgGroup.Everyone" -->
        <member name="T:OSGeo.MapGuide.MgRole">
            <summary>
             MapGuide roles.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:OSGeo.MapGuide.MgRole.Administrator" -->
        <!-- Badly formed XML comment ignored for member "F:OSGeo.MapGuide.MgRole.Author" -->
        <!-- Badly formed XML comment ignored for member "F:OSGeo.MapGuide.MgRole.Viewer" -->
        <member name="T:OSGeo.MapGuide.MgFeatureCommandType">
            <summary>
             Is a set of constants used to specify the type of an
             <see cref="T:OSGeo.MapGuide.MgFeatureCommand" /> object.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureCommandType.InsertFeatures">
            <summary>
             Specifies the type of an <see cref="T:OSGeo.MapGuide.MgInsertFeatures" /> object.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureCommandType.UpdateFeatures">
            <summary>
             Specifies the type of an <see cref="T:OSGeo.MapGuide.MgUpdateFeatures" /> object.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureCommandType.DeleteFeatures">
            <summary>
             Specifies the type of an <see cref="T:OSGeo.MapGuide.MgDeleteFeatures" /> object.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureCommandType.LockFeatures">
            <summary>
             Specifies the type of an <see cref="!:OSGeo.MapGuide.MgLockFeatures" /> object.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureCommandType.UnlockFeatures">
            <summary>
             Specifies the type of an <see cref="!:OSGeo.MapGuide.MgUnlockFeatures" /> object.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgFeatureGeometricType">
            <summary>
             Is a set of constants specifying the dimensions of geometries
             which can be stored in a geometry property.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureGeometricType.Point">
            <summary>
             Represents zero-dimensional geometric primitives, such as
             <see cref="T:OSGeo.MapGuide.MgPoint" />.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureGeometricType.Curve">
            <summary>
             Represents one-dimensional geometric primitives, such as
             <see cref="T:OSGeo.MapGuide.MgLineString" /> and <see cref="T:OSGeo.MapGuide.MgCurveString" />.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureGeometricType.Surface">
            <summary>
             Represents two-dimensional geometric primitives, such as
             <see cref="T:OSGeo.MapGuide.MgPolygon" /> and <see cref="T:OSGeo.MapGuide.MgCurvePolygon" />.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureGeometricType.Solid">
            <summary>
             Represents three-dimensional geometric primitives, such as
             Cubes.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgFeatureSpatialOperations">
            <summary>
             Is a set of constants used to type spatial operations.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureSpatialOperations.Contains">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureSpatialOperations.Crosses">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureSpatialOperations.Disjoint">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureSpatialOperations.Equals">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureSpatialOperations.Intersects">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureSpatialOperations.Overlaps">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureSpatialOperations.Touches">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureSpatialOperations.Within">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureSpatialOperations.CoveredBy">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureSpatialOperations.Inside">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgFeatureSpatialOperations.EnvelopeIntersects">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgObjectPropertyType">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgObjectPropertyType.Value">
            <summary>
             Signifies that the object property contains a single feature
             class object.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgObjectPropertyType.Collection">
            <summary>
             Signifies that the object property contains more than one
             feature class object. The collection of objects is in no
             particular order relative to the identity property defined
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgObjectPropertyType.OrderedCollection">
            <summary>
             Signifies that the object property contains more than one
             feature class object in ascending or descending order
             relative to the identity property defined for the collection.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgOrderingOption">
            <summary>
             Defines a type used to specify the order in which features
             are returned by <see cref="T:OSGeo.MapGuide.MgFeatureService" />::SelectFeatures. This type
             is used as an argument to the <see cref="T:OSGeo.MapGuide.MgFeatureQueryOptions" />::SetOrderingFilter.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgOrderingOption.Ascending">
            <summary>
             Signifies that the features are returned in ascending order
             relative to the properties specified in the first argument of
             <see cref="T:OSGeo.MapGuide.MgFeatureQueryOptions" />::SetOrderingFilter.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgOrderingOption.Descending">
            <summary>
             Signifies that the features are returned in descending order
             relative to the properties specified in the first argument of
             <see cref="T:OSGeo.MapGuide.MgFeatureQueryOptions" />::SetOrderingFilter.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgParameterDirection">
            <summary>
             The <see cref="T:OSGeo.MapGuide.MgParameterDirection" /> defines integer constants used to signify the
             direction in which a parameter value will be used within the context of a
             FDO Command.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgParameterDirection.Input">
            <summary>
             Specifies that the parameter is an input parameter.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgParameterDirection.Output">
            <summary>
             Specifies that the parameter is an output parameter.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgParameterDirection.InputOutput">
            <summary>
             Specifies that the parameter is an input and output parameter.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgParameterDirection.Ret">
            <summary>
             Specifies that the parameter is a return parameter.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgRasterDataModelType">
            <summary>
             Enumerated values used to determine the type
             of units for plot decorations (scale bar).
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgRasterDataModelType.Unknown">
            <summary>
             Data is organized in an unknown or provider specific manner.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgRasterDataModelType.Data">
            <summary>
             Data is rectangular grid, floating point data model.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgRasterDataModelType.Bitonal">
            <summary>
             Data is one bit (black/white - bitonal) pixels.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgRasterDataModelType.Gray">
            <summary>
             Data is monochrome (black-&gt;gray->white) pixels.
             It is necessary to know the BitsPerPixel value to interpret the data.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgRasterDataModelType.RGB">
            <summary>
             Data is red/green/blue (in that order) pixels.
             It is necessary to know the BitsPerPixel value to interpret the data.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgRasterDataModelType.RGBA">
            <summary>
             Data is red/green/blue/alpha (in that order) pixels; RGB with transparency.
             It is necessary to know the BitsPerPixel value to interpret the data.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgRasterDataModelType.Palette">
            <summary>
             Data is monochrome but backed by a pallette (value-&gt;pallette->colour) pixels.
             It is necessary to know the BitsPerPixel value to interpret the data.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgReaderType">
            <summary>
             Type of reader represented by an <see cref="T:OSGeo.MapGuide.MgReader" />
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgReaderType.FeatureReader">
            <summary>
             Signifies that the object is of type <see cref="T:OSGeo.MapGuide.MgFeatureReader" />.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgReaderType.DataReader">
            <summary>
             Signifies that the object is of type <see cref="T:OSGeo.MapGuide.MgDataReader" />.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgReaderType.SqlDataReader">
            <summary>
             Signifies that the object is of type <see cref="T:OSGeo.MapGuide.MgSqlDataReader" />.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgRepositoryType">
            <summary>
             Defines names for the different types of repositories.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgRepositoryType.Library">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgRepositoryType.Session">
            \if INTERNAL  \endif 
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgResourceType">
            <summary>
             Defines names for the different types of resources.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceType.Map">
            <summary>
             This resource is the runtime definition of a map.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceType.MapDefinition">
            \if INTERNAL  \endif 
            <summary>
             This resource is a map definition.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceType.LayerDefinition">
            \if INTERNAL  \endif 
            <summary>
             This resource is a layer definition.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceType.DrawingSource">
            \if INTERNAL  \endif 
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceType.FeatureSource">
            \if INTERNAL  \endif 
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceType.Folder">
            \if INTERNAL  \endif 
            <summary>
             This resource is a folder.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceType.LoadProcedure">
            \if INTERNAL  \endif 
            <summary>
             This resource is a load procedure definition.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceType.PrintLayout">
            \if INTERNAL  \endif 
            <summary>
             This resource is a print layout.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceType.Selection">
            \if INTERNAL  \endif 
            <summary>
             This resource is the runtime definition of a selection.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceType.SymbolDefinition">
            \if INTERNAL  \endif 
            <summary>
             This resource is a symbol definition.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceType.SymbolLibrary">
            \if INTERNAL  \endif 
            <summary>
             This resource is a library of symbols.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceType.WebLayout">
            \if INTERNAL v \endif 
            <summary>
             This resource represents the screen layout for a specific
             map.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceType.ApplicationDefinition">
            \if INTERNAL  \endif 
            <summary>
             This resource represents a web application definition
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceType.WatermarkDefinition">
            \if INTERNAL  \endif 
            <summary>
             This resource is a watermark definition.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceType.TileSetDefinition">
            \if INTERNAL  \endif 
            <summary>
             This resource is a tile set definition.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgResourceTag">
            <summary>
             Substitution tags used within the XML file for a resource.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceTag.LoginUsername">
            <summary>
             Replaced with the name of the currently logged in user.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceTag.LoginPassword">
            \if INTERNAL  \endif 
            <summary>
             Replaced with the password of the currently logged in user.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceTag.Username">
            \if INTERNAL  \endif 
            <summary>
             Replaced with the default resource-specific username.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceTag.Password">
            \if INTERNAL  \endif 
            <summary>
             Replaced with the default resource-specific password.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceTag.ProxyServer">
            \if INTERNAL  \endif 
            <summary>
             Replaced with the proxy server name.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceTag.ProxyPort">
            \if INTERNAL  \endif 
            <summary>
             Replaced with the proxy server port.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceTag.ProxyUsername">
            \if INTERNAL  \endif 
            <summary>
             Replaced with the proxy server user name.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceTag.ProxyPassword">
            \if INTERNAL  \endif 
            <summary>
             Replaced with the proxy server password.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceTag.DataFilePath">
            \if INTERNAL  \endif 
            <summary>
             Replaced with the location of data files associated with the
             given resource. The trailing &quot;/" is included.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceTag.TileCachePath">
            \if INTERNAL  \endif 
            <summary>
             Replaced with the location of tile cache associated with the
             given resource. The trailing &quot;/" is included.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceTag.DataPathAliasBegin">
            \if INTERNAL  \endif 
            <summary>
             Denotes beginning of data path alias.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceTag.DataPathAliasEnd">
            \if INTERNAL  \endif 
            <summary>
             Denotes end of data path alias.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgResourceDataName">
            <summary>
             Defines reserved names for resource data.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceDataName.UserCredentials">
            <summary>
             Data name for adding default credentials to a resource.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceDataName.ProxyServerName">
            \if INTERNAL  \endif 
            <summary>
             Data name for adding proxy server name to a resource.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceDataName.ProxyServerPort">
            \if INTERNAL  \endif 
            <summary>
             Data name for adding proxy server port to a resource.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceDataName.ProxyCredentials">
            \if INTERNAL  \endif 
            <summary>
             Data name for adding proxy credentials to a resource.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgResourceDataType">
            <summary>
            TODO: API Documentation is missing or failed to translate doxygen brief directive (message inserted by IMake.exe)
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceDataType.File">
            <summary>
             Resource data stored as a file on disk.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceDataType.Stream">
            \if INTERNAL  \endif 
            <summary>
             Stream resource data is stored as a binary stream in the
             repository database.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourceDataType.String">
            \if INTERNAL  \endif 
            <summary>
             Resource data is stored as a string.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgResourcePermission">
            <summary>
             Types of resource permissions.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourcePermission.NoAccess">
            <summary>
             No Access permission.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourcePermission.ReadOnly">
            \if INTERNAL  \endif 
            <summary>
             Read-Only permission.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgResourcePermission.ReadWrite">
            \if INTERNAL  \endif 
            <summary>
             Read/Write permission.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgResourceHeaderProperties">
            <summary>
             Properties of the resource header.
             INTERNAL - Do not document.
            </summary>
        </member>
        <member name="T:OSGeo.MapGuide.MgSpatialContextExtentType">
            <summary>
             The SpatialContextExtentType enumeration defines how the extent of
             a context should be handled by the provider.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgSpatialContextExtentType.scStatic">
            <summary>
             The spatial extent of the context is static and must be specified
             when the context is created.
            </summary>
        </member>
        <member name="F:OSGeo.MapGuide.MgSpatialContextExtentType.scDynamic">
            <summary>
             The spatial extent of the context is dynamic and changes as data is
             added and removed from the context.
            </summary>
        </member>
    </members>
</doc>
